
TWI_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a54  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002a54  00002ac8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001f08  00000000  00000000  00002ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bff  00000000  00000000  000049d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000055d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00005737  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  000058c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000790b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00008a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00009990  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00009b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00009dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a660  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 d7 14 	call	0x29ae	; 0x29ae <main>
      7a:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 0d 15 	jmp	0x2a1a	; 0x2a1a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 19 15 	jmp	0x2a32	; 0x2a32 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 19 15 	jmp	0x2a32	; 0x2a32 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 0d 15 	jmp	0x2a1a	; 0x2a1a <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 15 15 	jmp	0x2a2a	; 0x2a2a <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 19 15 	jmp	0x2a32	; 0x2a32 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 19 15 	jmp	0x2a32	; 0x2a32 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 19 15 	jmp	0x2a32	; 0x2a32 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 01 15 	jmp	0x2a02	; 0x2a02 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 1d 15 	jmp	0x2a3a	; 0x2a3a <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_setPinDirection>:
/* MCAL */
#include "DIO_interface.h"
#include "DIO_private.h"

void DIO_setPinDirection(u8 PortId, u8 PinId, u8 PinDirection)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	00 d0       	rcall	.+0      	; 0xc94 <DIO_setPinDirection+0x6>
     c94:	00 d0       	rcall	.+0      	; 0xc96 <DIO_setPinDirection+0x8>
     c96:	0f 92       	push	r0
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	89 83       	std	Y+1, r24	; 0x01
     c9e:	6a 83       	std	Y+2, r22	; 0x02
     ca0:	4b 83       	std	Y+3, r20	; 0x03
	if((PortId<=3) && (PinId<=7) && ((PinDirection==DIO_PIN_OUTPUT)||(PinDirection==DIO_PIN_INPUT)))
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	84 30       	cpi	r24, 0x04	; 4
     ca6:	08 f0       	brcs	.+2      	; 0xcaa <DIO_setPinDirection+0x1c>
     ca8:	dc c0       	rjmp	.+440    	; 0xe62 <DIO_setPinDirection+0x1d4>
     caa:	8a 81       	ldd	r24, Y+2	; 0x02
     cac:	88 30       	cpi	r24, 0x08	; 8
     cae:	08 f0       	brcs	.+2      	; 0xcb2 <DIO_setPinDirection+0x24>
     cb0:	d8 c0       	rjmp	.+432    	; 0xe62 <DIO_setPinDirection+0x1d4>
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
     cb4:	81 30       	cpi	r24, 0x01	; 1
     cb6:	21 f0       	breq	.+8      	; 0xcc0 <DIO_setPinDirection+0x32>
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	88 23       	and	r24, r24
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <DIO_setPinDirection+0x32>
     cbe:	d1 c0       	rjmp	.+418    	; 0xe62 <DIO_setPinDirection+0x1d4>
	{
		switch(PortId)
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	28 2f       	mov	r18, r24
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	3d 83       	std	Y+5, r19	; 0x05
     cc8:	2c 83       	std	Y+4, r18	; 0x04
     cca:	8c 81       	ldd	r24, Y+4	; 0x04
     ccc:	9d 81       	ldd	r25, Y+5	; 0x05
     cce:	81 30       	cpi	r24, 0x01	; 1
     cd0:	91 05       	cpc	r25, r1
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <DIO_setPinDirection+0x48>
     cd4:	43 c0       	rjmp	.+134    	; 0xd5c <DIO_setPinDirection+0xce>
     cd6:	2c 81       	ldd	r18, Y+4	; 0x04
     cd8:	3d 81       	ldd	r19, Y+5	; 0x05
     cda:	22 30       	cpi	r18, 0x02	; 2
     cdc:	31 05       	cpc	r19, r1
     cde:	2c f4       	brge	.+10     	; 0xcea <DIO_setPinDirection+0x5c>
     ce0:	8c 81       	ldd	r24, Y+4	; 0x04
     ce2:	9d 81       	ldd	r25, Y+5	; 0x05
     ce4:	00 97       	sbiw	r24, 0x00	; 0
     ce6:	71 f0       	breq	.+28     	; 0xd04 <DIO_setPinDirection+0x76>
     ce8:	bc c0       	rjmp	.+376    	; 0xe62 <DIO_setPinDirection+0x1d4>
     cea:	2c 81       	ldd	r18, Y+4	; 0x04
     cec:	3d 81       	ldd	r19, Y+5	; 0x05
     cee:	22 30       	cpi	r18, 0x02	; 2
     cf0:	31 05       	cpc	r19, r1
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <DIO_setPinDirection+0x68>
     cf4:	5f c0       	rjmp	.+190    	; 0xdb4 <DIO_setPinDirection+0x126>
     cf6:	8c 81       	ldd	r24, Y+4	; 0x04
     cf8:	9d 81       	ldd	r25, Y+5	; 0x05
     cfa:	83 30       	cpi	r24, 0x03	; 3
     cfc:	91 05       	cpc	r25, r1
     cfe:	09 f4       	brne	.+2      	; 0xd02 <DIO_setPinDirection+0x74>
     d00:	85 c0       	rjmp	.+266    	; 0xe0c <DIO_setPinDirection+0x17e>
     d02:	af c0       	rjmp	.+350    	; 0xe62 <DIO_setPinDirection+0x1d4>
	    {
	    	case DIO_PORTA: 
	    	if(PinDirection == DIO_PIN_OUTPUT)
     d04:	8b 81       	ldd	r24, Y+3	; 0x03
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	a1 f4       	brne	.+40     	; 0xd32 <DIO_setPinDirection+0xa4>
	    	{
	    		SET_BIT(DDRA,PinId);
     d0a:	aa e3       	ldi	r26, 0x3A	; 58
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	ea e3       	ldi	r30, 0x3A	; 58
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	48 2f       	mov	r20, r24
     d16:	8a 81       	ldd	r24, Y+2	; 0x02
     d18:	28 2f       	mov	r18, r24
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	02 2e       	mov	r0, r18
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <DIO_setPinDirection+0x9a>
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	0a 94       	dec	r0
     d2a:	e2 f7       	brpl	.-8      	; 0xd24 <DIO_setPinDirection+0x96>
     d2c:	84 2b       	or	r24, r20
     d2e:	8c 93       	st	X, r24
     d30:	98 c0       	rjmp	.+304    	; 0xe62 <DIO_setPinDirection+0x1d4>
	    	}
	    	else
	    	{
	    		CLR_BIT(DDRA,PinId);
     d32:	aa e3       	ldi	r26, 0x3A	; 58
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	ea e3       	ldi	r30, 0x3A	; 58
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	48 2f       	mov	r20, r24
     d3e:	8a 81       	ldd	r24, Y+2	; 0x02
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	02 2e       	mov	r0, r18
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <DIO_setPinDirection+0xc2>
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	0a 94       	dec	r0
     d52:	e2 f7       	brpl	.-8      	; 0xd4c <DIO_setPinDirection+0xbe>
     d54:	80 95       	com	r24
     d56:	84 23       	and	r24, r20
     d58:	8c 93       	st	X, r24
     d5a:	83 c0       	rjmp	.+262    	; 0xe62 <DIO_setPinDirection+0x1d4>
	    	}
	    	break;
	    	
	    	case DIO_PORTB: 
	    	if(PinDirection == DIO_PIN_OUTPUT)
     d5c:	8b 81       	ldd	r24, Y+3	; 0x03
     d5e:	81 30       	cpi	r24, 0x01	; 1
     d60:	a1 f4       	brne	.+40     	; 0xd8a <DIO_setPinDirection+0xfc>
	    	{
	    		SET_BIT(DDRB,PinId);
     d62:	a7 e3       	ldi	r26, 0x37	; 55
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e7 e3       	ldi	r30, 0x37	; 55
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	48 2f       	mov	r20, r24
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	02 2e       	mov	r0, r18
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <DIO_setPinDirection+0xf2>
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	0a 94       	dec	r0
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <DIO_setPinDirection+0xee>
     d84:	84 2b       	or	r24, r20
     d86:	8c 93       	st	X, r24
     d88:	6c c0       	rjmp	.+216    	; 0xe62 <DIO_setPinDirection+0x1d4>
	    	}
	    	else
	    	{
	    		CLR_BIT(DDRB,PinId);
     d8a:	a7 e3       	ldi	r26, 0x37	; 55
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e7 e3       	ldi	r30, 0x37	; 55
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <DIO_setPinDirection+0x11a>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <DIO_setPinDirection+0x116>
     dac:	80 95       	com	r24
     dae:	84 23       	and	r24, r20
     db0:	8c 93       	st	X, r24
     db2:	57 c0       	rjmp	.+174    	; 0xe62 <DIO_setPinDirection+0x1d4>
	    	}
	    	break;
	    	
	    	case DIO_PORTC: 
	    	if(PinDirection == DIO_PIN_OUTPUT)
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	81 30       	cpi	r24, 0x01	; 1
     db8:	a1 f4       	brne	.+40     	; 0xde2 <DIO_setPinDirection+0x154>
	    	{
	    		SET_BIT(DDRC,PinId);
     dba:	a4 e3       	ldi	r26, 0x34	; 52
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e4 e3       	ldi	r30, 0x34	; 52
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	48 2f       	mov	r20, r24
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 2e       	mov	r0, r18
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <DIO_setPinDirection+0x14a>
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	0a 94       	dec	r0
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <DIO_setPinDirection+0x146>
     ddc:	84 2b       	or	r24, r20
     dde:	8c 93       	st	X, r24
     de0:	40 c0       	rjmp	.+128    	; 0xe62 <DIO_setPinDirection+0x1d4>
	    	}
	    	else
	    	{
	    		CLR_BIT(DDRC,PinId);
     de2:	a4 e3       	ldi	r26, 0x34	; 52
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e4 e3       	ldi	r30, 0x34	; 52
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <DIO_setPinDirection+0x172>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <DIO_setPinDirection+0x16e>
     e04:	80 95       	com	r24
     e06:	84 23       	and	r24, r20
     e08:	8c 93       	st	X, r24
     e0a:	2b c0       	rjmp	.+86     	; 0xe62 <DIO_setPinDirection+0x1d4>
	    	}
	    	break;
	    	
	    	case DIO_PORTD: 
	    	if(PinDirection == DIO_PIN_OUTPUT)
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	81 30       	cpi	r24, 0x01	; 1
     e10:	a1 f4       	brne	.+40     	; 0xe3a <DIO_setPinDirection+0x1ac>
	    	{
	    		SET_BIT(DDRD,PinId);
     e12:	a1 e3       	ldi	r26, 0x31	; 49
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e1 e3       	ldi	r30, 0x31	; 49
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	48 2f       	mov	r20, r24
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	02 2e       	mov	r0, r18
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <DIO_setPinDirection+0x1a2>
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	0a 94       	dec	r0
     e32:	e2 f7       	brpl	.-8      	; 0xe2c <DIO_setPinDirection+0x19e>
     e34:	84 2b       	or	r24, r20
     e36:	8c 93       	st	X, r24
     e38:	14 c0       	rjmp	.+40     	; 0xe62 <DIO_setPinDirection+0x1d4>
	    	}
	    	else
	    	{
	    		CLR_BIT(DDRD,PinId);
     e3a:	a1 e3       	ldi	r26, 0x31	; 49
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e1 e3       	ldi	r30, 0x31	; 49
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <DIO_setPinDirection+0x1ca>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <DIO_setPinDirection+0x1c6>
     e5c:	80 95       	com	r24
     e5e:	84 23       	and	r24, r20
     e60:	8c 93       	st	X, r24
	}
	else
	{
		// DO Nothing
	}
}
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	08 95       	ret

00000e72 <DIO_setPinValue>:


void DIO_setPinValue(u8 PortId, u8 PinId, u8 PinValue)
{
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	00 d0       	rcall	.+0      	; 0xe78 <DIO_setPinValue+0x6>
     e78:	00 d0       	rcall	.+0      	; 0xe7a <DIO_setPinValue+0x8>
     e7a:	0f 92       	push	r0
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	89 83       	std	Y+1, r24	; 0x01
     e82:	6a 83       	std	Y+2, r22	; 0x02
     e84:	4b 83       	std	Y+3, r20	; 0x03
	if((PortId<=3) && (PinId<=7) && ((PinValue==DIO_PIN_HIGH)||(PinValue==DIO_PIN_LOW)))
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	84 30       	cpi	r24, 0x04	; 4
     e8a:	08 f0       	brcs	.+2      	; 0xe8e <DIO_setPinValue+0x1c>
     e8c:	dc c0       	rjmp	.+440    	; 0x1046 <DIO_setPinValue+0x1d4>
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	88 30       	cpi	r24, 0x08	; 8
     e92:	08 f0       	brcs	.+2      	; 0xe96 <DIO_setPinValue+0x24>
     e94:	d8 c0       	rjmp	.+432    	; 0x1046 <DIO_setPinValue+0x1d4>
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	81 30       	cpi	r24, 0x01	; 1
     e9a:	21 f0       	breq	.+8      	; 0xea4 <DIO_setPinValue+0x32>
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	88 23       	and	r24, r24
     ea0:	09 f0       	breq	.+2      	; 0xea4 <DIO_setPinValue+0x32>
     ea2:	d1 c0       	rjmp	.+418    	; 0x1046 <DIO_setPinValue+0x1d4>
	{
		switch(PortId)
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	3d 83       	std	Y+5, r19	; 0x05
     eac:	2c 83       	std	Y+4, r18	; 0x04
     eae:	8c 81       	ldd	r24, Y+4	; 0x04
     eb0:	9d 81       	ldd	r25, Y+5	; 0x05
     eb2:	81 30       	cpi	r24, 0x01	; 1
     eb4:	91 05       	cpc	r25, r1
     eb6:	09 f4       	brne	.+2      	; 0xeba <DIO_setPinValue+0x48>
     eb8:	43 c0       	rjmp	.+134    	; 0xf40 <DIO_setPinValue+0xce>
     eba:	2c 81       	ldd	r18, Y+4	; 0x04
     ebc:	3d 81       	ldd	r19, Y+5	; 0x05
     ebe:	22 30       	cpi	r18, 0x02	; 2
     ec0:	31 05       	cpc	r19, r1
     ec2:	2c f4       	brge	.+10     	; 0xece <DIO_setPinValue+0x5c>
     ec4:	8c 81       	ldd	r24, Y+4	; 0x04
     ec6:	9d 81       	ldd	r25, Y+5	; 0x05
     ec8:	00 97       	sbiw	r24, 0x00	; 0
     eca:	71 f0       	breq	.+28     	; 0xee8 <DIO_setPinValue+0x76>
     ecc:	bc c0       	rjmp	.+376    	; 0x1046 <DIO_setPinValue+0x1d4>
     ece:	2c 81       	ldd	r18, Y+4	; 0x04
     ed0:	3d 81       	ldd	r19, Y+5	; 0x05
     ed2:	22 30       	cpi	r18, 0x02	; 2
     ed4:	31 05       	cpc	r19, r1
     ed6:	09 f4       	brne	.+2      	; 0xeda <DIO_setPinValue+0x68>
     ed8:	5f c0       	rjmp	.+190    	; 0xf98 <DIO_setPinValue+0x126>
     eda:	8c 81       	ldd	r24, Y+4	; 0x04
     edc:	9d 81       	ldd	r25, Y+5	; 0x05
     ede:	83 30       	cpi	r24, 0x03	; 3
     ee0:	91 05       	cpc	r25, r1
     ee2:	09 f4       	brne	.+2      	; 0xee6 <DIO_setPinValue+0x74>
     ee4:	85 c0       	rjmp	.+266    	; 0xff0 <DIO_setPinValue+0x17e>
     ee6:	af c0       	rjmp	.+350    	; 0x1046 <DIO_setPinValue+0x1d4>
	    {
	    	case DIO_PORTA:
	    	if(DIO_PIN_HIGH == PinValue)
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	a1 f4       	brne	.+40     	; 0xf16 <DIO_setPinValue+0xa4>
	    	{
	    		SET_BIT(PORTA,PinId);
     eee:	ab e3       	ldi	r26, 0x3B	; 59
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	eb e3       	ldi	r30, 0x3B	; 59
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <DIO_setPinValue+0x9a>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <DIO_setPinValue+0x96>
     f10:	84 2b       	or	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	98 c0       	rjmp	.+304    	; 0x1046 <DIO_setPinValue+0x1d4>
	    	}
	    	else
	    	{
	    		CLR_BIT(PORTA,PinId);
     f16:	ab e3       	ldi	r26, 0x3B	; 59
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	eb e3       	ldi	r30, 0x3B	; 59
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_setPinValue+0xc2>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_setPinValue+0xbe>
     f38:	80 95       	com	r24
     f3a:	84 23       	and	r24, r20
     f3c:	8c 93       	st	X, r24
     f3e:	83 c0       	rjmp	.+262    	; 0x1046 <DIO_setPinValue+0x1d4>
	    	}
	    	break;
	    	
	    	case DIO_PORTB:
	    	if(DIO_PIN_HIGH == PinValue)
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	a1 f4       	brne	.+40     	; 0xf6e <DIO_setPinValue+0xfc>
	    	{
	    		SET_BIT(PORTB,PinId);
     f46:	a8 e3       	ldi	r26, 0x38	; 56
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e8 e3       	ldi	r30, 0x38	; 56
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_setPinValue+0xf2>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_setPinValue+0xee>
     f68:	84 2b       	or	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	6c c0       	rjmp	.+216    	; 0x1046 <DIO_setPinValue+0x1d4>
	    	}
	    	else
	    	{
	    		CLR_BIT(PORTB,PinId);
     f6e:	a8 e3       	ldi	r26, 0x38	; 56
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e8 e3       	ldi	r30, 0x38	; 56
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <DIO_setPinValue+0x11a>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <DIO_setPinValue+0x116>
     f90:	80 95       	com	r24
     f92:	84 23       	and	r24, r20
     f94:	8c 93       	st	X, r24
     f96:	57 c0       	rjmp	.+174    	; 0x1046 <DIO_setPinValue+0x1d4>
	    	}
	    	break;
	    	
	    	case DIO_PORTC:
	    	if(DIO_PIN_HIGH == PinValue)
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	a1 f4       	brne	.+40     	; 0xfc6 <DIO_setPinValue+0x154>
	    	{
	    		SET_BIT(PORTC,PinId);
     f9e:	a5 e3       	ldi	r26, 0x35	; 53
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e5 e3       	ldi	r30, 0x35	; 53
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	48 2f       	mov	r20, r24
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 2e       	mov	r0, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <DIO_setPinValue+0x14a>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	0a 94       	dec	r0
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <DIO_setPinValue+0x146>
     fc0:	84 2b       	or	r24, r20
     fc2:	8c 93       	st	X, r24
     fc4:	40 c0       	rjmp	.+128    	; 0x1046 <DIO_setPinValue+0x1d4>
	    	}
	    	else
	    	{
	    		CLR_BIT(PORTC,PinId);
     fc6:	a5 e3       	ldi	r26, 0x35	; 53
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e5 e3       	ldi	r30, 0x35	; 53
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <DIO_setPinValue+0x172>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <DIO_setPinValue+0x16e>
     fe8:	80 95       	com	r24
     fea:	84 23       	and	r24, r20
     fec:	8c 93       	st	X, r24
     fee:	2b c0       	rjmp	.+86     	; 0x1046 <DIO_setPinValue+0x1d4>
	    	}
	    	break;
	    	
	    	case DIO_PORTD:
	    	if(DIO_PIN_HIGH == PinValue)
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	81 30       	cpi	r24, 0x01	; 1
     ff4:	a1 f4       	brne	.+40     	; 0x101e <DIO_setPinValue+0x1ac>
	    	{
	    		SET_BIT(PORTD,PinId);
     ff6:	a2 e3       	ldi	r26, 0x32	; 50
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e2 e3       	ldi	r30, 0x32	; 50
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_setPinValue+0x1a2>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_setPinValue+0x19e>
    1018:	84 2b       	or	r24, r20
    101a:	8c 93       	st	X, r24
    101c:	14 c0       	rjmp	.+40     	; 0x1046 <DIO_setPinValue+0x1d4>
	    	}
	    	else
	    	{
	    		CLR_BIT(PORTD,PinId);
    101e:	a2 e3       	ldi	r26, 0x32	; 50
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e2 e3       	ldi	r30, 0x32	; 50
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	48 2f       	mov	r20, r24
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 2e       	mov	r0, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <DIO_setPinValue+0x1ca>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <DIO_setPinValue+0x1c6>
    1040:	80 95       	com	r24
    1042:	84 23       	and	r24, r20
    1044:	8c 93       	st	X, r24
	}
	else
	{
		// DO Nothing
	}
}
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <DIO_togglePinValue>:


void DIO_togglePinValue(u8 PortId, u8 PinId)
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	00 d0       	rcall	.+0      	; 0x105c <DIO_togglePinValue+0x6>
    105c:	00 d0       	rcall	.+0      	; 0x105e <DIO_togglePinValue+0x8>
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	6a 83       	std	Y+2, r22	; 0x02
	if((PortId<=3) && (PinId<=7))
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	84 30       	cpi	r24, 0x04	; 4
    106a:	08 f0       	brcs	.+2      	; 0x106e <DIO_togglePinValue+0x18>
    106c:	72 c0       	rjmp	.+228    	; 0x1152 <DIO_togglePinValue+0xfc>
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	88 30       	cpi	r24, 0x08	; 8
    1072:	08 f0       	brcs	.+2      	; 0x1076 <DIO_togglePinValue+0x20>
    1074:	6e c0       	rjmp	.+220    	; 0x1152 <DIO_togglePinValue+0xfc>
	{
		switch(PortId)
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	3c 83       	std	Y+4, r19	; 0x04
    107e:	2b 83       	std	Y+3, r18	; 0x03
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	9c 81       	ldd	r25, Y+4	; 0x04
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	91 05       	cpc	r25, r1
    1088:	49 f1       	breq	.+82     	; 0x10dc <DIO_togglePinValue+0x86>
    108a:	2b 81       	ldd	r18, Y+3	; 0x03
    108c:	3c 81       	ldd	r19, Y+4	; 0x04
    108e:	22 30       	cpi	r18, 0x02	; 2
    1090:	31 05       	cpc	r19, r1
    1092:	2c f4       	brge	.+10     	; 0x109e <DIO_togglePinValue+0x48>
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	9c 81       	ldd	r25, Y+4	; 0x04
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	61 f0       	breq	.+24     	; 0x10b4 <DIO_togglePinValue+0x5e>
    109c:	5a c0       	rjmp	.+180    	; 0x1152 <DIO_togglePinValue+0xfc>
    109e:	2b 81       	ldd	r18, Y+3	; 0x03
    10a0:	3c 81       	ldd	r19, Y+4	; 0x04
    10a2:	22 30       	cpi	r18, 0x02	; 2
    10a4:	31 05       	cpc	r19, r1
    10a6:	71 f1       	breq	.+92     	; 0x1104 <DIO_togglePinValue+0xae>
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	9c 81       	ldd	r25, Y+4	; 0x04
    10ac:	83 30       	cpi	r24, 0x03	; 3
    10ae:	91 05       	cpc	r25, r1
    10b0:	e9 f1       	breq	.+122    	; 0x112c <DIO_togglePinValue+0xd6>
    10b2:	4f c0       	rjmp	.+158    	; 0x1152 <DIO_togglePinValue+0xfc>
		{
			case DIO_PORTA:
			TOG_BIT(PORTA,PinId);
    10b4:	ab e3       	ldi	r26, 0x3B	; 59
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	eb e3       	ldi	r30, 0x3B	; 59
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	48 2f       	mov	r20, r24
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	02 2e       	mov	r0, r18
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <DIO_togglePinValue+0x7c>
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	0a 94       	dec	r0
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <DIO_togglePinValue+0x78>
    10d6:	84 27       	eor	r24, r20
    10d8:	8c 93       	st	X, r24
    10da:	3b c0       	rjmp	.+118    	; 0x1152 <DIO_togglePinValue+0xfc>
			break;
			
			case DIO_PORTB:
			TOG_BIT(PORTB,PinId);
    10dc:	a8 e3       	ldi	r26, 0x38	; 56
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e8 e3       	ldi	r30, 0x38	; 56
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	48 2f       	mov	r20, r24
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	02 2e       	mov	r0, r18
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <DIO_togglePinValue+0xa4>
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	0a 94       	dec	r0
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <DIO_togglePinValue+0xa0>
    10fe:	84 27       	eor	r24, r20
    1100:	8c 93       	st	X, r24
    1102:	27 c0       	rjmp	.+78     	; 0x1152 <DIO_togglePinValue+0xfc>
			break;
			
			case DIO_PORTC:
			TOG_BIT(PORTC,PinId);
    1104:	a5 e3       	ldi	r26, 0x35	; 53
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e5 e3       	ldi	r30, 0x35	; 53
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	48 2f       	mov	r20, r24
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	02 2e       	mov	r0, r18
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <DIO_togglePinValue+0xcc>
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	0a 94       	dec	r0
    1124:	e2 f7       	brpl	.-8      	; 0x111e <DIO_togglePinValue+0xc8>
    1126:	84 27       	eor	r24, r20
    1128:	8c 93       	st	X, r24
    112a:	13 c0       	rjmp	.+38     	; 0x1152 <DIO_togglePinValue+0xfc>
			break;
			
			case DIO_PORTD:
			TOG_BIT(PORTD,PinId);
    112c:	a2 e3       	ldi	r26, 0x32	; 50
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e2 e3       	ldi	r30, 0x32	; 50
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	48 2f       	mov	r20, r24
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	02 2e       	mov	r0, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <DIO_togglePinValue+0xf4>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	0a 94       	dec	r0
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <DIO_togglePinValue+0xf0>
    114e:	84 27       	eor	r24, r20
    1150:	8c 93       	st	X, r24
	}
	else
	{
		// DO Nothing
	}
}
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <DIO_getPinValue>:


void DIO_getPinValue(u8 PortId, u8 PinId, u8* PinValue)
{
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	00 d0       	rcall	.+0      	; 0x1166 <DIO_getPinValue+0x6>
    1166:	00 d0       	rcall	.+0      	; 0x1168 <DIO_getPinValue+0x8>
    1168:	00 d0       	rcall	.+0      	; 0x116a <DIO_getPinValue+0xa>
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	89 83       	std	Y+1, r24	; 0x01
    1170:	6a 83       	std	Y+2, r22	; 0x02
    1172:	5c 83       	std	Y+4, r21	; 0x04
    1174:	4b 83       	std	Y+3, r20	; 0x03
	if((PortId<=3) && (PinId<=7) && (PinValue!= NULL))
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	84 30       	cpi	r24, 0x04	; 4
    117a:	08 f0       	brcs	.+2      	; 0x117e <DIO_getPinValue+0x1e>
    117c:	79 c0       	rjmp	.+242    	; 0x1270 <DIO_getPinValue+0x110>
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	88 30       	cpi	r24, 0x08	; 8
    1182:	08 f0       	brcs	.+2      	; 0x1186 <DIO_getPinValue+0x26>
    1184:	75 c0       	rjmp	.+234    	; 0x1270 <DIO_getPinValue+0x110>
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	9c 81       	ldd	r25, Y+4	; 0x04
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	09 f4       	brne	.+2      	; 0x1190 <DIO_getPinValue+0x30>
    118e:	70 c0       	rjmp	.+224    	; 0x1270 <DIO_getPinValue+0x110>
	{
		switch(PortId)
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	3e 83       	std	Y+6, r19	; 0x06
    1198:	2d 83       	std	Y+5, r18	; 0x05
    119a:	4d 81       	ldd	r20, Y+5	; 0x05
    119c:	5e 81       	ldd	r21, Y+6	; 0x06
    119e:	41 30       	cpi	r20, 0x01	; 1
    11a0:	51 05       	cpc	r21, r1
    11a2:	59 f1       	breq	.+86     	; 0x11fa <DIO_getPinValue+0x9a>
    11a4:	8d 81       	ldd	r24, Y+5	; 0x05
    11a6:	9e 81       	ldd	r25, Y+6	; 0x06
    11a8:	82 30       	cpi	r24, 0x02	; 2
    11aa:	91 05       	cpc	r25, r1
    11ac:	34 f4       	brge	.+12     	; 0x11ba <DIO_getPinValue+0x5a>
    11ae:	2d 81       	ldd	r18, Y+5	; 0x05
    11b0:	3e 81       	ldd	r19, Y+6	; 0x06
    11b2:	21 15       	cp	r18, r1
    11b4:	31 05       	cpc	r19, r1
    11b6:	69 f0       	breq	.+26     	; 0x11d2 <DIO_getPinValue+0x72>
    11b8:	5b c0       	rjmp	.+182    	; 0x1270 <DIO_getPinValue+0x110>
    11ba:	4d 81       	ldd	r20, Y+5	; 0x05
    11bc:	5e 81       	ldd	r21, Y+6	; 0x06
    11be:	42 30       	cpi	r20, 0x02	; 2
    11c0:	51 05       	cpc	r21, r1
    11c2:	79 f1       	breq	.+94     	; 0x1222 <DIO_getPinValue+0xc2>
    11c4:	8d 81       	ldd	r24, Y+5	; 0x05
    11c6:	9e 81       	ldd	r25, Y+6	; 0x06
    11c8:	83 30       	cpi	r24, 0x03	; 3
    11ca:	91 05       	cpc	r25, r1
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <DIO_getPinValue+0x70>
    11ce:	3d c0       	rjmp	.+122    	; 0x124a <DIO_getPinValue+0xea>
    11d0:	4f c0       	rjmp	.+158    	; 0x1270 <DIO_getPinValue+0x110>
		{
			case DIO_PORTA:
			*PinValue = GET_BIT(PINA,PinId);
    11d2:	e9 e3       	ldi	r30, 0x39	; 57
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	88 2f       	mov	r24, r24
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	a9 01       	movw	r20, r18
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <DIO_getPinValue+0x8a>
    11e6:	55 95       	asr	r21
    11e8:	47 95       	ror	r20
    11ea:	8a 95       	dec	r24
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <DIO_getPinValue+0x86>
    11ee:	ca 01       	movw	r24, r20
    11f0:	81 70       	andi	r24, 0x01	; 1
    11f2:	eb 81       	ldd	r30, Y+3	; 0x03
    11f4:	fc 81       	ldd	r31, Y+4	; 0x04
    11f6:	80 83       	st	Z, r24
    11f8:	3b c0       	rjmp	.+118    	; 0x1270 <DIO_getPinValue+0x110>
			break;
			
			case DIO_PORTB:
			*PinValue = GET_BIT(PINB,PinId);
    11fa:	e6 e3       	ldi	r30, 0x36	; 54
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	88 2f       	mov	r24, r24
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	a9 01       	movw	r20, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <DIO_getPinValue+0xb2>
    120e:	55 95       	asr	r21
    1210:	47 95       	ror	r20
    1212:	8a 95       	dec	r24
    1214:	e2 f7       	brpl	.-8      	; 0x120e <DIO_getPinValue+0xae>
    1216:	ca 01       	movw	r24, r20
    1218:	81 70       	andi	r24, 0x01	; 1
    121a:	eb 81       	ldd	r30, Y+3	; 0x03
    121c:	fc 81       	ldd	r31, Y+4	; 0x04
    121e:	80 83       	st	Z, r24
    1220:	27 c0       	rjmp	.+78     	; 0x1270 <DIO_getPinValue+0x110>
			break;
			
			case DIO_PORTC:
			*PinValue = GET_BIT(PINC,PinId);
    1222:	e3 e3       	ldi	r30, 0x33	; 51
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	88 2f       	mov	r24, r24
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	a9 01       	movw	r20, r18
    1234:	02 c0       	rjmp	.+4      	; 0x123a <DIO_getPinValue+0xda>
    1236:	55 95       	asr	r21
    1238:	47 95       	ror	r20
    123a:	8a 95       	dec	r24
    123c:	e2 f7       	brpl	.-8      	; 0x1236 <DIO_getPinValue+0xd6>
    123e:	ca 01       	movw	r24, r20
    1240:	81 70       	andi	r24, 0x01	; 1
    1242:	eb 81       	ldd	r30, Y+3	; 0x03
    1244:	fc 81       	ldd	r31, Y+4	; 0x04
    1246:	80 83       	st	Z, r24
    1248:	13 c0       	rjmp	.+38     	; 0x1270 <DIO_getPinValue+0x110>
			break;
			
			case DIO_PORTD:
			*PinValue = GET_BIT(PIND,PinId);
    124a:	e0 e3       	ldi	r30, 0x30	; 48
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	88 2f       	mov	r24, r24
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	a9 01       	movw	r20, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <DIO_getPinValue+0x102>
    125e:	55 95       	asr	r21
    1260:	47 95       	ror	r20
    1262:	8a 95       	dec	r24
    1264:	e2 f7       	brpl	.-8      	; 0x125e <DIO_getPinValue+0xfe>
    1266:	ca 01       	movw	r24, r20
    1268:	81 70       	andi	r24, 0x01	; 1
    126a:	eb 81       	ldd	r30, Y+3	; 0x03
    126c:	fc 81       	ldd	r31, Y+4	; 0x04
    126e:	80 83       	st	Z, r24
	}
	else
	{
		// DO Nothing
	}
}
    1270:	26 96       	adiw	r28, 0x06	; 6
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	f8 94       	cli
    1276:	de bf       	out	0x3e, r29	; 62
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	cd bf       	out	0x3d, r28	; 61
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <DIO_activePinInPullUpResistance>:


void DIO_activePinInPullUpResistance(u8 PortId, u8 PinId)
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	00 d0       	rcall	.+0      	; 0x1288 <DIO_activePinInPullUpResistance+0x6>
    1288:	00 d0       	rcall	.+0      	; 0x128a <DIO_activePinInPullUpResistance+0x8>
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	89 83       	std	Y+1, r24	; 0x01
    1290:	6a 83       	std	Y+2, r22	; 0x02
	if((PortId<=3) && (PinId<=7))
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	84 30       	cpi	r24, 0x04	; 4
    1296:	08 f0       	brcs	.+2      	; 0x129a <DIO_activePinInPullUpResistance+0x18>
    1298:	72 c0       	rjmp	.+228    	; 0x137e <DIO_activePinInPullUpResistance+0xfc>
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	88 30       	cpi	r24, 0x08	; 8
    129e:	08 f0       	brcs	.+2      	; 0x12a2 <DIO_activePinInPullUpResistance+0x20>
    12a0:	6e c0       	rjmp	.+220    	; 0x137e <DIO_activePinInPullUpResistance+0xfc>
	{
		switch(PortId)
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	3c 83       	std	Y+4, r19	; 0x04
    12aa:	2b 83       	std	Y+3, r18	; 0x03
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	9c 81       	ldd	r25, Y+4	; 0x04
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	91 05       	cpc	r25, r1
    12b4:	49 f1       	breq	.+82     	; 0x1308 <DIO_activePinInPullUpResistance+0x86>
    12b6:	2b 81       	ldd	r18, Y+3	; 0x03
    12b8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ba:	22 30       	cpi	r18, 0x02	; 2
    12bc:	31 05       	cpc	r19, r1
    12be:	2c f4       	brge	.+10     	; 0x12ca <DIO_activePinInPullUpResistance+0x48>
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	9c 81       	ldd	r25, Y+4	; 0x04
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	61 f0       	breq	.+24     	; 0x12e0 <DIO_activePinInPullUpResistance+0x5e>
    12c8:	5a c0       	rjmp	.+180    	; 0x137e <DIO_activePinInPullUpResistance+0xfc>
    12ca:	2b 81       	ldd	r18, Y+3	; 0x03
    12cc:	3c 81       	ldd	r19, Y+4	; 0x04
    12ce:	22 30       	cpi	r18, 0x02	; 2
    12d0:	31 05       	cpc	r19, r1
    12d2:	71 f1       	breq	.+92     	; 0x1330 <DIO_activePinInPullUpResistance+0xae>
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	83 30       	cpi	r24, 0x03	; 3
    12da:	91 05       	cpc	r25, r1
    12dc:	e9 f1       	breq	.+122    	; 0x1358 <DIO_activePinInPullUpResistance+0xd6>
    12de:	4f c0       	rjmp	.+158    	; 0x137e <DIO_activePinInPullUpResistance+0xfc>
		{
			case DIO_PORTA:
			SET_BIT(PORTA,PinId);
    12e0:	ab e3       	ldi	r26, 0x3B	; 59
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	eb e3       	ldi	r30, 0x3B	; 59
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	48 2f       	mov	r20, r24
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	02 2e       	mov	r0, r18
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <DIO_activePinInPullUpResistance+0x7c>
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	0a 94       	dec	r0
    1300:	e2 f7       	brpl	.-8      	; 0x12fa <DIO_activePinInPullUpResistance+0x78>
    1302:	84 2b       	or	r24, r20
    1304:	8c 93       	st	X, r24
    1306:	3b c0       	rjmp	.+118    	; 0x137e <DIO_activePinInPullUpResistance+0xfc>
			break;
			
			case DIO_PORTB:
			SET_BIT(PORTB,PinId);
    1308:	a8 e3       	ldi	r26, 0x38	; 56
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e8 e3       	ldi	r30, 0x38	; 56
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	48 2f       	mov	r20, r24
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	02 2e       	mov	r0, r18
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <DIO_activePinInPullUpResistance+0xa4>
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	0a 94       	dec	r0
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <DIO_activePinInPullUpResistance+0xa0>
    132a:	84 2b       	or	r24, r20
    132c:	8c 93       	st	X, r24
    132e:	27 c0       	rjmp	.+78     	; 0x137e <DIO_activePinInPullUpResistance+0xfc>
			break;
			
			case DIO_PORTC:
			SET_BIT(PORTC,PinId);
    1330:	a5 e3       	ldi	r26, 0x35	; 53
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e5 e3       	ldi	r30, 0x35	; 53
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	48 2f       	mov	r20, r24
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 2e       	mov	r0, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <DIO_activePinInPullUpResistance+0xcc>
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	0a 94       	dec	r0
    1350:	e2 f7       	brpl	.-8      	; 0x134a <DIO_activePinInPullUpResistance+0xc8>
    1352:	84 2b       	or	r24, r20
    1354:	8c 93       	st	X, r24
    1356:	13 c0       	rjmp	.+38     	; 0x137e <DIO_activePinInPullUpResistance+0xfc>
			break;
			
			case DIO_PORTD:
			SET_BIT(PORTD,PinId);
    1358:	a2 e3       	ldi	r26, 0x32	; 50
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e2 e3       	ldi	r30, 0x32	; 50
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	48 2f       	mov	r20, r24
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	02 2e       	mov	r0, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <DIO_activePinInPullUpResistance+0xf4>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	0a 94       	dec	r0
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <DIO_activePinInPullUpResistance+0xf0>
    137a:	84 2b       	or	r24, r20
    137c:	8c 93       	st	X, r24
	}
	else
	{
		// DO Nothing
	}
}
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <DIO_setPortDirection>:



/* Port Apis */
void DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	00 d0       	rcall	.+0      	; 0x1392 <DIO_setPortDirection+0x6>
    1392:	00 d0       	rcall	.+0      	; 0x1394 <DIO_setPortDirection+0x8>
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	89 83       	std	Y+1, r24	; 0x01
    139a:	6a 83       	std	Y+2, r22	; 0x02
	if((PortId<=3) && ((DIO_PORT_OUTPUT == PortDirection) || (DIO_PORT_INPUT == PortDirection)))
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	84 30       	cpi	r24, 0x04	; 4
    13a0:	08 f0       	brcs	.+2      	; 0x13a4 <DIO_setPortDirection+0x18>
    13a2:	55 c0       	rjmp	.+170    	; 0x144e <DIO_setPortDirection+0xc2>
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	8f 3f       	cpi	r24, 0xFF	; 255
    13a8:	21 f0       	breq	.+8      	; 0x13b2 <DIO_setPortDirection+0x26>
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	88 23       	and	r24, r24
    13ae:	09 f0       	breq	.+2      	; 0x13b2 <DIO_setPortDirection+0x26>
    13b0:	4e c0       	rjmp	.+156    	; 0x144e <DIO_setPortDirection+0xc2>
	{
		switch(PortId)
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	3c 83       	std	Y+4, r19	; 0x04
    13ba:	2b 83       	std	Y+3, r18	; 0x03
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	9c 81       	ldd	r25, Y+4	; 0x04
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	91 05       	cpc	r25, r1
    13c4:	09 f1       	breq	.+66     	; 0x1408 <DIO_setPortDirection+0x7c>
    13c6:	2b 81       	ldd	r18, Y+3	; 0x03
    13c8:	3c 81       	ldd	r19, Y+4	; 0x04
    13ca:	22 30       	cpi	r18, 0x02	; 2
    13cc:	31 05       	cpc	r19, r1
    13ce:	2c f4       	brge	.+10     	; 0x13da <DIO_setPortDirection+0x4e>
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	9c 81       	ldd	r25, Y+4	; 0x04
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	61 f0       	breq	.+24     	; 0x13f0 <DIO_setPortDirection+0x64>
    13d8:	3a c0       	rjmp	.+116    	; 0x144e <DIO_setPortDirection+0xc2>
    13da:	2b 81       	ldd	r18, Y+3	; 0x03
    13dc:	3c 81       	ldd	r19, Y+4	; 0x04
    13de:	22 30       	cpi	r18, 0x02	; 2
    13e0:	31 05       	cpc	r19, r1
    13e2:	f1 f0       	breq	.+60     	; 0x1420 <DIO_setPortDirection+0x94>
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	9c 81       	ldd	r25, Y+4	; 0x04
    13e8:	83 30       	cpi	r24, 0x03	; 3
    13ea:	91 05       	cpc	r25, r1
    13ec:	29 f1       	breq	.+74     	; 0x1438 <DIO_setPortDirection+0xac>
    13ee:	2f c0       	rjmp	.+94     	; 0x144e <DIO_setPortDirection+0xc2>
		{
		case 0:
			if(DIO_PORT_OUTPUT == PortDirection)
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	8f 3f       	cpi	r24, 0xFF	; 255
    13f4:	29 f4       	brne	.+10     	; 0x1400 <DIO_setPortDirection+0x74>
			{
				DDRA = 0xff;
    13f6:	ea e3       	ldi	r30, 0x3A	; 58
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	8f ef       	ldi	r24, 0xFF	; 255
    13fc:	80 83       	st	Z, r24
    13fe:	27 c0       	rjmp	.+78     	; 0x144e <DIO_setPortDirection+0xc2>
			}
			else
			{
				DDRA = 0x00;
    1400:	ea e3       	ldi	r30, 0x3A	; 58
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	10 82       	st	Z, r1
    1406:	23 c0       	rjmp	.+70     	; 0x144e <DIO_setPortDirection+0xc2>
			}
			break;

		case 1:
			if(DIO_PORT_OUTPUT == PortDirection)
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	8f 3f       	cpi	r24, 0xFF	; 255
    140c:	29 f4       	brne	.+10     	; 0x1418 <DIO_setPortDirection+0x8c>
			{
				DDRB = 0xff;
    140e:	e7 e3       	ldi	r30, 0x37	; 55
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	8f ef       	ldi	r24, 0xFF	; 255
    1414:	80 83       	st	Z, r24
    1416:	1b c0       	rjmp	.+54     	; 0x144e <DIO_setPortDirection+0xc2>
			}
			else
			{
				DDRB = 0x00;
    1418:	e7 e3       	ldi	r30, 0x37	; 55
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	10 82       	st	Z, r1
    141e:	17 c0       	rjmp	.+46     	; 0x144e <DIO_setPortDirection+0xc2>
			}
			break;

		case 2:
			if(DIO_PORT_OUTPUT == PortDirection)
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	8f 3f       	cpi	r24, 0xFF	; 255
    1424:	29 f4       	brne	.+10     	; 0x1430 <DIO_setPortDirection+0xa4>
			{
				DDRC = 0xff;
    1426:	e4 e3       	ldi	r30, 0x34	; 52
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	8f ef       	ldi	r24, 0xFF	; 255
    142c:	80 83       	st	Z, r24
    142e:	0f c0       	rjmp	.+30     	; 0x144e <DIO_setPortDirection+0xc2>
			}
			else
			{
				DDRC = 0x00;
    1430:	e4 e3       	ldi	r30, 0x34	; 52
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	10 82       	st	Z, r1
    1436:	0b c0       	rjmp	.+22     	; 0x144e <DIO_setPortDirection+0xc2>
			}
			break;

		case 3:
			if(DIO_PORT_OUTPUT == PortDirection)
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	8f 3f       	cpi	r24, 0xFF	; 255
    143c:	29 f4       	brne	.+10     	; 0x1448 <DIO_setPortDirection+0xbc>
			{
				DDRD = 0xff;
    143e:	e1 e3       	ldi	r30, 0x31	; 49
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	8f ef       	ldi	r24, 0xFF	; 255
    1444:	80 83       	st	Z, r24
    1446:	03 c0       	rjmp	.+6      	; 0x144e <DIO_setPortDirection+0xc2>
			}
			else
			{
				DDRD = 0x00;
    1448:	e1 e3       	ldi	r30, 0x31	; 49
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	10 82       	st	Z, r1
			}
			break;
		}
	}
}
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <DIO_setPortValue>:


void DIO_setPortValue(u8 PortId, u8 PortValue)
{
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	00 d0       	rcall	.+0      	; 0x1462 <DIO_setPortValue+0x6>
    1462:	00 d0       	rcall	.+0      	; 0x1464 <DIO_setPortValue+0x8>
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	89 83       	std	Y+1, r24	; 0x01
    146a:	6a 83       	std	Y+2, r22	; 0x02
	if(PortId<=3)
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	84 30       	cpi	r24, 0x04	; 4
    1470:	90 f5       	brcc	.+100    	; 0x14d6 <DIO_setPortValue+0x7a>
	{
		switch(PortId)
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	3c 83       	std	Y+4, r19	; 0x04
    147a:	2b 83       	std	Y+3, r18	; 0x03
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	9c 81       	ldd	r25, Y+4	; 0x04
    1480:	81 30       	cpi	r24, 0x01	; 1
    1482:	91 05       	cpc	r25, r1
    1484:	d1 f0       	breq	.+52     	; 0x14ba <DIO_setPortValue+0x5e>
    1486:	2b 81       	ldd	r18, Y+3	; 0x03
    1488:	3c 81       	ldd	r19, Y+4	; 0x04
    148a:	22 30       	cpi	r18, 0x02	; 2
    148c:	31 05       	cpc	r19, r1
    148e:	2c f4       	brge	.+10     	; 0x149a <DIO_setPortValue+0x3e>
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	9c 81       	ldd	r25, Y+4	; 0x04
    1494:	00 97       	sbiw	r24, 0x00	; 0
    1496:	61 f0       	breq	.+24     	; 0x14b0 <DIO_setPortValue+0x54>
    1498:	1e c0       	rjmp	.+60     	; 0x14d6 <DIO_setPortValue+0x7a>
    149a:	2b 81       	ldd	r18, Y+3	; 0x03
    149c:	3c 81       	ldd	r19, Y+4	; 0x04
    149e:	22 30       	cpi	r18, 0x02	; 2
    14a0:	31 05       	cpc	r19, r1
    14a2:	81 f0       	breq	.+32     	; 0x14c4 <DIO_setPortValue+0x68>
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	9c 81       	ldd	r25, Y+4	; 0x04
    14a8:	83 30       	cpi	r24, 0x03	; 3
    14aa:	91 05       	cpc	r25, r1
    14ac:	81 f0       	breq	.+32     	; 0x14ce <DIO_setPortValue+0x72>
    14ae:	13 c0       	rjmp	.+38     	; 0x14d6 <DIO_setPortValue+0x7a>
		{
		case 0:
			PORTA = PortValue;
    14b0:	eb e3       	ldi	r30, 0x3B	; 59
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	80 83       	st	Z, r24
    14b8:	0e c0       	rjmp	.+28     	; 0x14d6 <DIO_setPortValue+0x7a>
			break;

		case 1:
			PORTB = PortValue;
    14ba:	e8 e3       	ldi	r30, 0x38	; 56
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	80 83       	st	Z, r24
    14c2:	09 c0       	rjmp	.+18     	; 0x14d6 <DIO_setPortValue+0x7a>
			break;

		case 2:
			PORTC = PortValue;
    14c4:	e5 e3       	ldi	r30, 0x35	; 53
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	80 83       	st	Z, r24
    14cc:	04 c0       	rjmp	.+8      	; 0x14d6 <DIO_setPortValue+0x7a>
			break;

		case 3:
			PORTD = PortValue;
    14ce:	e2 e3       	ldi	r30, 0x32	; 50
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	80 83       	st	Z, r24
			break;
		}
	}
}
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <DIO_getPortValue>:


void DIO_getPortValue(u8 PortId, u8* PortValue)
{
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <DIO_getPortValue+0x6>
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <DIO_getPortValue+0x8>
    14ec:	0f 92       	push	r0
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	89 83       	std	Y+1, r24	; 0x01
    14f4:	7b 83       	std	Y+3, r23	; 0x03
    14f6:	6a 83       	std	Y+2, r22	; 0x02
	if((PortId<=3) && (PortValue != 0))
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	84 30       	cpi	r24, 0x04	; 4
    14fc:	08 f0       	brcs	.+2      	; 0x1500 <DIO_getPortValue+0x1c>
    14fe:	3e c0       	rjmp	.+124    	; 0x157c <DIO_getPortValue+0x98>
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	9b 81       	ldd	r25, Y+3	; 0x03
    1504:	00 97       	sbiw	r24, 0x00	; 0
    1506:	d1 f1       	breq	.+116    	; 0x157c <DIO_getPortValue+0x98>
	{
		switch(PortId)
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	3d 83       	std	Y+5, r19	; 0x05
    1510:	2c 83       	std	Y+4, r18	; 0x04
    1512:	8c 81       	ldd	r24, Y+4	; 0x04
    1514:	9d 81       	ldd	r25, Y+5	; 0x05
    1516:	81 30       	cpi	r24, 0x01	; 1
    1518:	91 05       	cpc	r25, r1
    151a:	e1 f0       	breq	.+56     	; 0x1554 <DIO_getPortValue+0x70>
    151c:	2c 81       	ldd	r18, Y+4	; 0x04
    151e:	3d 81       	ldd	r19, Y+5	; 0x05
    1520:	22 30       	cpi	r18, 0x02	; 2
    1522:	31 05       	cpc	r19, r1
    1524:	2c f4       	brge	.+10     	; 0x1530 <DIO_getPortValue+0x4c>
    1526:	8c 81       	ldd	r24, Y+4	; 0x04
    1528:	9d 81       	ldd	r25, Y+5	; 0x05
    152a:	00 97       	sbiw	r24, 0x00	; 0
    152c:	61 f0       	breq	.+24     	; 0x1546 <DIO_getPortValue+0x62>
    152e:	26 c0       	rjmp	.+76     	; 0x157c <DIO_getPortValue+0x98>
    1530:	2c 81       	ldd	r18, Y+4	; 0x04
    1532:	3d 81       	ldd	r19, Y+5	; 0x05
    1534:	22 30       	cpi	r18, 0x02	; 2
    1536:	31 05       	cpc	r19, r1
    1538:	a1 f0       	breq	.+40     	; 0x1562 <DIO_getPortValue+0x7e>
    153a:	8c 81       	ldd	r24, Y+4	; 0x04
    153c:	9d 81       	ldd	r25, Y+5	; 0x05
    153e:	83 30       	cpi	r24, 0x03	; 3
    1540:	91 05       	cpc	r25, r1
    1542:	b1 f0       	breq	.+44     	; 0x1570 <DIO_getPortValue+0x8c>
    1544:	1b c0       	rjmp	.+54     	; 0x157c <DIO_getPortValue+0x98>
		{
		case 0:
			*PortValue = PINA;
    1546:	e9 e3       	ldi	r30, 0x39	; 57
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	ea 81       	ldd	r30, Y+2	; 0x02
    154e:	fb 81       	ldd	r31, Y+3	; 0x03
    1550:	80 83       	st	Z, r24
    1552:	14 c0       	rjmp	.+40     	; 0x157c <DIO_getPortValue+0x98>
			break;

		case 1:
			*PortValue = PINB;
    1554:	e6 e3       	ldi	r30, 0x36	; 54
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	ea 81       	ldd	r30, Y+2	; 0x02
    155c:	fb 81       	ldd	r31, Y+3	; 0x03
    155e:	80 83       	st	Z, r24
    1560:	0d c0       	rjmp	.+26     	; 0x157c <DIO_getPortValue+0x98>
			break;

		case 2:
			*PortValue = PINC;
    1562:	e3 e3       	ldi	r30, 0x33	; 51
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	ea 81       	ldd	r30, Y+2	; 0x02
    156a:	fb 81       	ldd	r31, Y+3	; 0x03
    156c:	80 83       	st	Z, r24
    156e:	06 c0       	rjmp	.+12     	; 0x157c <DIO_getPortValue+0x98>
			break;

		case 3:
			*PortValue = PIND;
    1570:	e0 e3       	ldi	r30, 0x30	; 48
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	ea 81       	ldd	r30, Y+2	; 0x02
    1578:	fb 81       	ldd	r31, Y+3	; 0x03
    157a:	80 83       	st	Z, r24
			break;
		}
	}
}
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	08 95       	ret

0000158c <DIO_togglePortValue>:


void DIO_togglePortValue(u8 PortId)
{
    158c:	df 93       	push	r29
    158e:	cf 93       	push	r28
    1590:	00 d0       	rcall	.+0      	; 0x1592 <DIO_togglePortValue+0x6>
    1592:	0f 92       	push	r0
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	89 83       	std	Y+1, r24	; 0x01
	if(PortId<=3)
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	84 30       	cpi	r24, 0x04	; 4
    159e:	08 f0       	brcs	.+2      	; 0x15a2 <DIO_togglePortValue+0x16>
    15a0:	3e c0       	rjmp	.+124    	; 0x161e <DIO_togglePortValue+0x92>
	{
		switch(PortId)
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	3b 83       	std	Y+3, r19	; 0x03
    15aa:	2a 83       	std	Y+2, r18	; 0x02
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	9b 81       	ldd	r25, Y+3	; 0x03
    15b0:	81 30       	cpi	r24, 0x01	; 1
    15b2:	91 05       	cpc	r25, r1
    15b4:	e9 f0       	breq	.+58     	; 0x15f0 <DIO_togglePortValue+0x64>
    15b6:	2a 81       	ldd	r18, Y+2	; 0x02
    15b8:	3b 81       	ldd	r19, Y+3	; 0x03
    15ba:	22 30       	cpi	r18, 0x02	; 2
    15bc:	31 05       	cpc	r19, r1
    15be:	2c f4       	brge	.+10     	; 0x15ca <DIO_togglePortValue+0x3e>
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	9b 81       	ldd	r25, Y+3	; 0x03
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	61 f0       	breq	.+24     	; 0x15e0 <DIO_togglePortValue+0x54>
    15c8:	2a c0       	rjmp	.+84     	; 0x161e <DIO_togglePortValue+0x92>
    15ca:	2a 81       	ldd	r18, Y+2	; 0x02
    15cc:	3b 81       	ldd	r19, Y+3	; 0x03
    15ce:	22 30       	cpi	r18, 0x02	; 2
    15d0:	31 05       	cpc	r19, r1
    15d2:	b1 f0       	breq	.+44     	; 0x1600 <DIO_togglePortValue+0x74>
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	9b 81       	ldd	r25, Y+3	; 0x03
    15d8:	83 30       	cpi	r24, 0x03	; 3
    15da:	91 05       	cpc	r25, r1
    15dc:	c9 f0       	breq	.+50     	; 0x1610 <DIO_togglePortValue+0x84>
    15de:	1f c0       	rjmp	.+62     	; 0x161e <DIO_togglePortValue+0x92>
		{
		case 0:
			PORTA = ~PORTA;
    15e0:	ab e3       	ldi	r26, 0x3B	; 59
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	eb e3       	ldi	r30, 0x3B	; 59
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	80 95       	com	r24
    15ec:	8c 93       	st	X, r24
    15ee:	17 c0       	rjmp	.+46     	; 0x161e <DIO_togglePortValue+0x92>
			break;

		case 1:
			PORTB = ~PORTB;
    15f0:	a8 e3       	ldi	r26, 0x38	; 56
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e8 e3       	ldi	r30, 0x38	; 56
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	80 95       	com	r24
    15fc:	8c 93       	st	X, r24
    15fe:	0f c0       	rjmp	.+30     	; 0x161e <DIO_togglePortValue+0x92>
			break;

		case 2:
			PORTC = ~PORTC;
    1600:	a5 e3       	ldi	r26, 0x35	; 53
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e5 e3       	ldi	r30, 0x35	; 53
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	80 95       	com	r24
    160c:	8c 93       	st	X, r24
    160e:	07 c0       	rjmp	.+14     	; 0x161e <DIO_togglePortValue+0x92>
			break;

		case 3:
			PORTD = ~PORTD;
    1610:	a2 e3       	ldi	r26, 0x32	; 50
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e2 e3       	ldi	r30, 0x32	; 50
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	80 95       	com	r24
    161c:	8c 93       	st	X, r24
			break;
		}
	}
}
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	cf 91       	pop	r28
    1626:	df 91       	pop	r29
    1628:	08 95       	ret

0000162a <DIO_activePortInPullUpResistance>:


void DIO_activePortInPullUpResistance(u8 PortId)
{
    162a:	df 93       	push	r29
    162c:	cf 93       	push	r28
    162e:	00 d0       	rcall	.+0      	; 0x1630 <DIO_activePortInPullUpResistance+0x6>
    1630:	0f 92       	push	r0
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	89 83       	std	Y+1, r24	; 0x01
	if(PortId<=3)
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	84 30       	cpi	r24, 0x04	; 4
    163c:	90 f5       	brcc	.+100    	; 0x16a2 <DIO_activePortInPullUpResistance+0x78>
	{
		switch(PortId)
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	3b 83       	std	Y+3, r19	; 0x03
    1646:	2a 83       	std	Y+2, r18	; 0x02
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	9b 81       	ldd	r25, Y+3	; 0x03
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	91 05       	cpc	r25, r1
    1650:	d1 f0       	breq	.+52     	; 0x1686 <DIO_activePortInPullUpResistance+0x5c>
    1652:	2a 81       	ldd	r18, Y+2	; 0x02
    1654:	3b 81       	ldd	r19, Y+3	; 0x03
    1656:	22 30       	cpi	r18, 0x02	; 2
    1658:	31 05       	cpc	r19, r1
    165a:	2c f4       	brge	.+10     	; 0x1666 <DIO_activePortInPullUpResistance+0x3c>
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	9b 81       	ldd	r25, Y+3	; 0x03
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	61 f0       	breq	.+24     	; 0x167c <DIO_activePortInPullUpResistance+0x52>
    1664:	1e c0       	rjmp	.+60     	; 0x16a2 <DIO_activePortInPullUpResistance+0x78>
    1666:	2a 81       	ldd	r18, Y+2	; 0x02
    1668:	3b 81       	ldd	r19, Y+3	; 0x03
    166a:	22 30       	cpi	r18, 0x02	; 2
    166c:	31 05       	cpc	r19, r1
    166e:	81 f0       	breq	.+32     	; 0x1690 <DIO_activePortInPullUpResistance+0x66>
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	9b 81       	ldd	r25, Y+3	; 0x03
    1674:	83 30       	cpi	r24, 0x03	; 3
    1676:	91 05       	cpc	r25, r1
    1678:	81 f0       	breq	.+32     	; 0x169a <DIO_activePortInPullUpResistance+0x70>
    167a:	13 c0       	rjmp	.+38     	; 0x16a2 <DIO_activePortInPullUpResistance+0x78>
		{
		case 0:
			PORTA = 0xff;
    167c:	eb e3       	ldi	r30, 0x3B	; 59
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	8f ef       	ldi	r24, 0xFF	; 255
    1682:	80 83       	st	Z, r24
    1684:	0e c0       	rjmp	.+28     	; 0x16a2 <DIO_activePortInPullUpResistance+0x78>
			break;

		case 1:
			PORTB = 0xff;
    1686:	e8 e3       	ldi	r30, 0x38	; 56
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	8f ef       	ldi	r24, 0xFF	; 255
    168c:	80 83       	st	Z, r24
    168e:	09 c0       	rjmp	.+18     	; 0x16a2 <DIO_activePortInPullUpResistance+0x78>
			break;

		case 2:
			PORTC = 0xff;
    1690:	e5 e3       	ldi	r30, 0x35	; 53
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	8f ef       	ldi	r24, 0xFF	; 255
    1696:	80 83       	st	Z, r24
    1698:	04 c0       	rjmp	.+8      	; 0x16a2 <DIO_activePortInPullUpResistance+0x78>
			break;

		case 3:
			PORTD = 0xff;
    169a:	e2 e3       	ldi	r30, 0x32	; 50
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	8f ef       	ldi	r24, 0xFF	; 255
    16a0:	80 83       	st	Z, r24
			break;
		}
	}
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <EEPROM_init>:
#include "EEPROM_interface.h"
#include "EEPROM_private.h"


void EEPROM_init(void)
{
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
	TWI_initMaster();
    16b6:	0e 94 97 13 	call	0x272e	; 0x272e <TWI_initMaster>
}
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	08 95       	ret

000016c0 <EEPROM_writeByte>:


void EEPROM_writeByte(u16 wordAddress, u8 data)
{
    16c0:	df 93       	push	r29
    16c2:	cf 93       	push	r28
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	62 97       	sbiw	r28, 0x12	; 18
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	cd bf       	out	0x3d, r28	; 61
    16d4:	99 8b       	std	Y+17, r25	; 0x11
    16d6:	88 8b       	std	Y+16, r24	; 0x10
    16d8:	6a 8b       	std	Y+18, r22	; 0x12
	u8 address = (wordAddress>>8)|EEPROM_FIXED_ADDRESS;
    16da:	88 89       	ldd	r24, Y+16	; 0x10
    16dc:	99 89       	ldd	r25, Y+17	; 0x11
    16de:	89 2f       	mov	r24, r25
    16e0:	99 27       	eor	r25, r25
    16e2:	80 65       	ori	r24, 0x50	; 80
    16e4:	8f 87       	std	Y+15, r24	; 0x0f
	
	// Send start condition
	TWI_sendStartCondition();
    16e6:	0e 94 be 13 	call	0x277c	; 0x277c <TWI_sendStartCondition>
	
	// Send slave address with write operation
	TWI_sendSlaveAddWithWrite(address);
    16ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ec:	0e 94 1b 14 	call	0x2836	; 0x2836 <TWI_sendSlaveAddWithWrite>
	
	// Send word address
	TWI_sendMasterDataByte((u8)wordAddress);
    16f0:	88 89       	ldd	r24, Y+16	; 0x10
    16f2:	0e 94 87 14 	call	0x290e	; 0x290e <TWI_sendMasterDataByte>
	
	// Send byte data
	TWI_sendMasterDataByte(data);
    16f6:	8a 89       	ldd	r24, Y+18	; 0x12
    16f8:	0e 94 87 14 	call	0x290e	; 0x290e <TWI_sendMasterDataByte>
	
	// Send stop condition
	TWI_sendStopCondition();
    16fc:	0e 94 06 14 	call	0x280c	; 0x280c <TWI_sendStopCondition>
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	a0 ea       	ldi	r26, 0xA0	; 160
    1706:	b0 e4       	ldi	r27, 0x40	; 64
    1708:	8b 87       	std	Y+11, r24	; 0x0b
    170a:	9c 87       	std	Y+12, r25	; 0x0c
    170c:	ad 87       	std	Y+13, r26	; 0x0d
    170e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1710:	6b 85       	ldd	r22, Y+11	; 0x0b
    1712:	7c 85       	ldd	r23, Y+12	; 0x0c
    1714:	8d 85       	ldd	r24, Y+13	; 0x0d
    1716:	9e 85       	ldd	r25, Y+14	; 0x0e
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	4a e7       	ldi	r20, 0x7A	; 122
    171e:	55 e4       	ldi	r21, 0x45	; 69
    1720:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	8f 83       	std	Y+7, r24	; 0x07
    172a:	98 87       	std	Y+8, r25	; 0x08
    172c:	a9 87       	std	Y+9, r26	; 0x09
    172e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1730:	6f 81       	ldd	r22, Y+7	; 0x07
    1732:	78 85       	ldd	r23, Y+8	; 0x08
    1734:	89 85       	ldd	r24, Y+9	; 0x09
    1736:	9a 85       	ldd	r25, Y+10	; 0x0a
    1738:	20 e0       	ldi	r18, 0x00	; 0
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	40 e8       	ldi	r20, 0x80	; 128
    173e:	5f e3       	ldi	r21, 0x3F	; 63
    1740:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1744:	88 23       	and	r24, r24
    1746:	2c f4       	brge	.+10     	; 0x1752 <EEPROM_writeByte+0x92>
		__ticks = 1;
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	9e 83       	std	Y+6, r25	; 0x06
    174e:	8d 83       	std	Y+5, r24	; 0x05
    1750:	3f c0       	rjmp	.+126    	; 0x17d0 <EEPROM_writeByte+0x110>
	else if (__tmp > 65535)
    1752:	6f 81       	ldd	r22, Y+7	; 0x07
    1754:	78 85       	ldd	r23, Y+8	; 0x08
    1756:	89 85       	ldd	r24, Y+9	; 0x09
    1758:	9a 85       	ldd	r25, Y+10	; 0x0a
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	3f ef       	ldi	r19, 0xFF	; 255
    175e:	4f e7       	ldi	r20, 0x7F	; 127
    1760:	57 e4       	ldi	r21, 0x47	; 71
    1762:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1766:	18 16       	cp	r1, r24
    1768:	4c f5       	brge	.+82     	; 0x17bc <EEPROM_writeByte+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    176a:	6b 85       	ldd	r22, Y+11	; 0x0b
    176c:	7c 85       	ldd	r23, Y+12	; 0x0c
    176e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1770:	9e 85       	ldd	r25, Y+14	; 0x0e
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	40 e2       	ldi	r20, 0x20	; 32
    1778:	51 e4       	ldi	r21, 0x41	; 65
    177a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    177e:	dc 01       	movw	r26, r24
    1780:	cb 01       	movw	r24, r22
    1782:	bc 01       	movw	r22, r24
    1784:	cd 01       	movw	r24, r26
    1786:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	9e 83       	std	Y+6, r25	; 0x06
    1790:	8d 83       	std	Y+5, r24	; 0x05
    1792:	0f c0       	rjmp	.+30     	; 0x17b2 <EEPROM_writeByte+0xf2>
    1794:	80 e9       	ldi	r24, 0x90	; 144
    1796:	91 e0       	ldi	r25, 0x01	; 1
    1798:	9c 83       	std	Y+4, r25	; 0x04
    179a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	9c 81       	ldd	r25, Y+4	; 0x04
    17a0:	01 97       	sbiw	r24, 0x01	; 1
    17a2:	f1 f7       	brne	.-4      	; 0x17a0 <EEPROM_writeByte+0xe0>
    17a4:	9c 83       	std	Y+4, r25	; 0x04
    17a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a8:	8d 81       	ldd	r24, Y+5	; 0x05
    17aa:	9e 81       	ldd	r25, Y+6	; 0x06
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	9e 83       	std	Y+6, r25	; 0x06
    17b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b2:	8d 81       	ldd	r24, Y+5	; 0x05
    17b4:	9e 81       	ldd	r25, Y+6	; 0x06
    17b6:	00 97       	sbiw	r24, 0x00	; 0
    17b8:	69 f7       	brne	.-38     	; 0x1794 <EEPROM_writeByte+0xd4>
    17ba:	14 c0       	rjmp	.+40     	; 0x17e4 <EEPROM_writeByte+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17bc:	6f 81       	ldd	r22, Y+7	; 0x07
    17be:	78 85       	ldd	r23, Y+8	; 0x08
    17c0:	89 85       	ldd	r24, Y+9	; 0x09
    17c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	9e 83       	std	Y+6, r25	; 0x06
    17ce:	8d 83       	std	Y+5, r24	; 0x05
    17d0:	8d 81       	ldd	r24, Y+5	; 0x05
    17d2:	9e 81       	ldd	r25, Y+6	; 0x06
    17d4:	9a 83       	std	Y+2, r25	; 0x02
    17d6:	89 83       	std	Y+1, r24	; 0x01
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	9a 81       	ldd	r25, Y+2	; 0x02
    17dc:	01 97       	sbiw	r24, 0x01	; 1
    17de:	f1 f7       	brne	.-4      	; 0x17dc <EEPROM_writeByte+0x11c>
    17e0:	9a 83       	std	Y+2, r25	; 0x02
    17e2:	89 83       	std	Y+1, r24	; 0x01
	
	// Self-timed Write Cycle delay
	_delay_ms(5);
}
    17e4:	62 96       	adiw	r28, 0x12	; 18
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	08 95       	ret

000017f6 <EEPROM_readByte>:


void EEPROM_readByte(u16 wordAddress, u8* data)
{
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
    17fe:	63 97       	sbiw	r28, 0x13	; 19
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	99 8b       	std	Y+17, r25	; 0x11
    180c:	88 8b       	std	Y+16, r24	; 0x10
    180e:	7b 8b       	std	Y+19, r23	; 0x13
    1810:	6a 8b       	std	Y+18, r22	; 0x12
	if(data != NULL)
    1812:	8a 89       	ldd	r24, Y+18	; 0x12
    1814:	9b 89       	ldd	r25, Y+19	; 0x13
    1816:	00 97       	sbiw	r24, 0x00	; 0
    1818:	09 f4       	brne	.+2      	; 0x181c <EEPROM_readByte+0x26>
    181a:	8b c0       	rjmp	.+278    	; 0x1932 <EEPROM_readByte+0x13c>
	{
		u8 address = (wordAddress>>8)|EEPROM_FIXED_ADDRESS;
    181c:	88 89       	ldd	r24, Y+16	; 0x10
    181e:	99 89       	ldd	r25, Y+17	; 0x11
    1820:	89 2f       	mov	r24, r25
    1822:	99 27       	eor	r25, r25
    1824:	80 65       	ori	r24, 0x50	; 80
    1826:	8f 87       	std	Y+15, r24	; 0x0f
		
		// Send start condition
	    TWI_sendStartCondition();
    1828:	0e 94 be 13 	call	0x277c	; 0x277c <TWI_sendStartCondition>
	    
	    // Send slave address with write operation
	    TWI_sendSlaveAddWithWrite(address);
    182c:	8f 85       	ldd	r24, Y+15	; 0x0f
    182e:	0e 94 1b 14 	call	0x2836	; 0x2836 <TWI_sendSlaveAddWithWrite>
	    
	    // Send word address
	    TWI_sendMasterDataByte((u8)wordAddress);
    1832:	88 89       	ldd	r24, Y+16	; 0x10
    1834:	0e 94 87 14 	call	0x290e	; 0x290e <TWI_sendMasterDataByte>
		
		// Send Repeated start condition
		TWI_sendRepStartCondition();
    1838:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <TWI_sendRepStartCondition>
		
		// Send slave address with read operation
		TWI_sendSlaveAddWithRead(address);
    183c:	8f 85       	ldd	r24, Y+15	; 0x0f
    183e:	0e 94 51 14 	call	0x28a2	; 0x28a2 <TWI_sendSlaveAddWithRead>
		
		// Read byte data
		TWI_receiveMasterDataByte(data);
    1842:	8a 89       	ldd	r24, Y+18	; 0x12
    1844:	9b 89       	ldd	r25, Y+19	; 0x13
    1846:	0e 94 ab 14 	call	0x2956	; 0x2956 <TWI_receiveMasterDataByte>
		
		// Send stop condition
		TWI_sendStopCondition();
    184a:	0e 94 06 14 	call	0x280c	; 0x280c <TWI_sendStopCondition>
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	a0 ea       	ldi	r26, 0xA0	; 160
    1854:	b0 e4       	ldi	r27, 0x40	; 64
    1856:	8b 87       	std	Y+11, r24	; 0x0b
    1858:	9c 87       	std	Y+12, r25	; 0x0c
    185a:	ad 87       	std	Y+13, r26	; 0x0d
    185c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    185e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1860:	7c 85       	ldd	r23, Y+12	; 0x0c
    1862:	8d 85       	ldd	r24, Y+13	; 0x0d
    1864:	9e 85       	ldd	r25, Y+14	; 0x0e
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	4a e7       	ldi	r20, 0x7A	; 122
    186c:	55 e4       	ldi	r21, 0x45	; 69
    186e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	8f 83       	std	Y+7, r24	; 0x07
    1878:	98 87       	std	Y+8, r25	; 0x08
    187a:	a9 87       	std	Y+9, r26	; 0x09
    187c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    187e:	6f 81       	ldd	r22, Y+7	; 0x07
    1880:	78 85       	ldd	r23, Y+8	; 0x08
    1882:	89 85       	ldd	r24, Y+9	; 0x09
    1884:	9a 85       	ldd	r25, Y+10	; 0x0a
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	40 e8       	ldi	r20, 0x80	; 128
    188c:	5f e3       	ldi	r21, 0x3F	; 63
    188e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1892:	88 23       	and	r24, r24
    1894:	2c f4       	brge	.+10     	; 0x18a0 <EEPROM_readByte+0xaa>
		__ticks = 1;
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	9e 83       	std	Y+6, r25	; 0x06
    189c:	8d 83       	std	Y+5, r24	; 0x05
    189e:	3f c0       	rjmp	.+126    	; 0x191e <EEPROM_readByte+0x128>
	else if (__tmp > 65535)
    18a0:	6f 81       	ldd	r22, Y+7	; 0x07
    18a2:	78 85       	ldd	r23, Y+8	; 0x08
    18a4:	89 85       	ldd	r24, Y+9	; 0x09
    18a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	3f ef       	ldi	r19, 0xFF	; 255
    18ac:	4f e7       	ldi	r20, 0x7F	; 127
    18ae:	57 e4       	ldi	r21, 0x47	; 71
    18b0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18b4:	18 16       	cp	r1, r24
    18b6:	4c f5       	brge	.+82     	; 0x190a <EEPROM_readByte+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    18bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    18be:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	40 e2       	ldi	r20, 0x20	; 32
    18c6:	51 e4       	ldi	r21, 0x41	; 65
    18c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	bc 01       	movw	r22, r24
    18d2:	cd 01       	movw	r24, r26
    18d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	9e 83       	std	Y+6, r25	; 0x06
    18de:	8d 83       	std	Y+5, r24	; 0x05
    18e0:	0f c0       	rjmp	.+30     	; 0x1900 <EEPROM_readByte+0x10a>
    18e2:	80 e9       	ldi	r24, 0x90	; 144
    18e4:	91 e0       	ldi	r25, 0x01	; 1
    18e6:	9c 83       	std	Y+4, r25	; 0x04
    18e8:	8b 83       	std	Y+3, r24	; 0x03
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	9c 81       	ldd	r25, Y+4	; 0x04
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	f1 f7       	brne	.-4      	; 0x18ee <EEPROM_readByte+0xf8>
    18f2:	9c 83       	std	Y+4, r25	; 0x04
    18f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f6:	8d 81       	ldd	r24, Y+5	; 0x05
    18f8:	9e 81       	ldd	r25, Y+6	; 0x06
    18fa:	01 97       	sbiw	r24, 0x01	; 1
    18fc:	9e 83       	std	Y+6, r25	; 0x06
    18fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1900:	8d 81       	ldd	r24, Y+5	; 0x05
    1902:	9e 81       	ldd	r25, Y+6	; 0x06
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	69 f7       	brne	.-38     	; 0x18e2 <EEPROM_readByte+0xec>
    1908:	14 c0       	rjmp	.+40     	; 0x1932 <EEPROM_readByte+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190a:	6f 81       	ldd	r22, Y+7	; 0x07
    190c:	78 85       	ldd	r23, Y+8	; 0x08
    190e:	89 85       	ldd	r24, Y+9	; 0x09
    1910:	9a 85       	ldd	r25, Y+10	; 0x0a
    1912:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	9e 83       	std	Y+6, r25	; 0x06
    191c:	8d 83       	std	Y+5, r24	; 0x05
    191e:	8d 81       	ldd	r24, Y+5	; 0x05
    1920:	9e 81       	ldd	r25, Y+6	; 0x06
    1922:	9a 83       	std	Y+2, r25	; 0x02
    1924:	89 83       	std	Y+1, r24	; 0x01
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	9a 81       	ldd	r25, Y+2	; 0x02
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	f1 f7       	brne	.-4      	; 0x192a <EEPROM_readByte+0x134>
    192e:	9a 83       	std	Y+2, r25	; 0x02
    1930:	89 83       	std	Y+1, r24	; 0x01
		
		// Self-timed Write Cycle delay
	    _delay_ms(5);
	}
    1932:	63 96       	adiw	r28, 0x13	; 19
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	cd bf       	out	0x3d, r28	; 61
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	08 95       	ret

00001944 <LCD_init>:
#include "LCD_config.h"
#include "LCD_private.h"


void LCD_init(void)
{
    1944:	0f 93       	push	r16
    1946:	1f 93       	push	r17
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	ca 55       	subi	r28, 0x5A	; 90
    1952:	d0 40       	sbci	r29, 0x00	; 0
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	de bf       	out	0x3e, r29	; 62
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	cd bf       	out	0x3d, r28	; 61
	// Intialize LCD pins As OutPut Pins
	DIO_setPinDirection(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT);
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	61 e0       	ldi	r22, 0x01	; 1
    1962:	41 e0       	ldi	r20, 0x01	; 1
    1964:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_setPinDirection>
	DIO_setPinDirection(LCD_RW_PORT, LCD_RW_PIN, DIO_PIN_OUTPUT);
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	62 e0       	ldi	r22, 0x02	; 2
    196c:	41 e0       	ldi	r20, 0x01	; 1
    196e:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_setPinDirection>
	DIO_setPinDirection(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT);
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	63 e0       	ldi	r22, 0x03	; 3
    1976:	41 e0       	ldi	r20, 0x01	; 1
    1978:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_OUTPUT);
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	64 e0       	ldi	r22, 0x04	; 4
    1980:	41 e0       	ldi	r20, 0x01	; 1
    1982:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT);
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	65 e0       	ldi	r22, 0x05	; 5
    198a:	41 e0       	ldi	r20, 0x01	; 1
    198c:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT);
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	66 e0       	ldi	r22, 0x06	; 6
    1994:	41 e0       	ldi	r20, 0x01	; 1
    1996:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT);
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	67 e0       	ldi	r22, 0x07	; 7
    199e:	41 e0       	ldi	r20, 0x01	; 1
    19a0:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_setPinDirection>
    19a4:	fe 01       	movw	r30, r28
    19a6:	e9 5a       	subi	r30, 0xA9	; 169
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	ac e0       	ldi	r26, 0x0C	; 12
    19b0:	b2 e4       	ldi	r27, 0x42	; 66
    19b2:	80 83       	st	Z, r24
    19b4:	91 83       	std	Z+1, r25	; 0x01
    19b6:	a2 83       	std	Z+2, r26	; 0x02
    19b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ba:	8e 01       	movw	r16, r28
    19bc:	0d 5a       	subi	r16, 0xAD	; 173
    19be:	1f 4f       	sbci	r17, 0xFF	; 255
    19c0:	fe 01       	movw	r30, r28
    19c2:	e9 5a       	subi	r30, 0xA9	; 169
    19c4:	ff 4f       	sbci	r31, 0xFF	; 255
    19c6:	60 81       	ld	r22, Z
    19c8:	71 81       	ldd	r23, Z+1	; 0x01
    19ca:	82 81       	ldd	r24, Z+2	; 0x02
    19cc:	93 81       	ldd	r25, Z+3	; 0x03
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	4a e7       	ldi	r20, 0x7A	; 122
    19d4:	55 e4       	ldi	r21, 0x45	; 69
    19d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	f8 01       	movw	r30, r16
    19e0:	80 83       	st	Z, r24
    19e2:	91 83       	std	Z+1, r25	; 0x01
    19e4:	a2 83       	std	Z+2, r26	; 0x02
    19e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19e8:	fe 01       	movw	r30, r28
    19ea:	ed 5a       	subi	r30, 0xAD	; 173
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	60 81       	ld	r22, Z
    19f0:	71 81       	ldd	r23, Z+1	; 0x01
    19f2:	82 81       	ldd	r24, Z+2	; 0x02
    19f4:	93 81       	ldd	r25, Z+3	; 0x03
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	40 e8       	ldi	r20, 0x80	; 128
    19fc:	5f e3       	ldi	r21, 0x3F	; 63
    19fe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a02:	88 23       	and	r24, r24
    1a04:	44 f4       	brge	.+16     	; 0x1a16 <LCD_init+0xd2>
		__ticks = 1;
    1a06:	fe 01       	movw	r30, r28
    1a08:	ef 5a       	subi	r30, 0xAF	; 175
    1a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	91 83       	std	Z+1, r25	; 0x01
    1a12:	80 83       	st	Z, r24
    1a14:	64 c0       	rjmp	.+200    	; 0x1ade <LCD_init+0x19a>
	else if (__tmp > 65535)
    1a16:	fe 01       	movw	r30, r28
    1a18:	ed 5a       	subi	r30, 0xAD	; 173
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	60 81       	ld	r22, Z
    1a1e:	71 81       	ldd	r23, Z+1	; 0x01
    1a20:	82 81       	ldd	r24, Z+2	; 0x02
    1a22:	93 81       	ldd	r25, Z+3	; 0x03
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	3f ef       	ldi	r19, 0xFF	; 255
    1a28:	4f e7       	ldi	r20, 0x7F	; 127
    1a2a:	57 e4       	ldi	r21, 0x47	; 71
    1a2c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a30:	18 16       	cp	r1, r24
    1a32:	0c f0       	brlt	.+2      	; 0x1a36 <LCD_init+0xf2>
    1a34:	43 c0       	rjmp	.+134    	; 0x1abc <LCD_init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a36:	fe 01       	movw	r30, r28
    1a38:	e9 5a       	subi	r30, 0xA9	; 169
    1a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3c:	60 81       	ld	r22, Z
    1a3e:	71 81       	ldd	r23, Z+1	; 0x01
    1a40:	82 81       	ldd	r24, Z+2	; 0x02
    1a42:	93 81       	ldd	r25, Z+3	; 0x03
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e2       	ldi	r20, 0x20	; 32
    1a4a:	51 e4       	ldi	r21, 0x41	; 65
    1a4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	8e 01       	movw	r16, r28
    1a56:	0f 5a       	subi	r16, 0xAF	; 175
    1a58:	1f 4f       	sbci	r17, 0xFF	; 255
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	cd 01       	movw	r24, r26
    1a5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	f8 01       	movw	r30, r16
    1a68:	91 83       	std	Z+1, r25	; 0x01
    1a6a:	80 83       	st	Z, r24
    1a6c:	1f c0       	rjmp	.+62     	; 0x1aac <LCD_init+0x168>
    1a6e:	fe 01       	movw	r30, r28
    1a70:	e1 5b       	subi	r30, 0xB1	; 177
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	80 e9       	ldi	r24, 0x90	; 144
    1a76:	91 e0       	ldi	r25, 0x01	; 1
    1a78:	91 83       	std	Z+1, r25	; 0x01
    1a7a:	80 83       	st	Z, r24
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	e1 5b       	subi	r30, 0xB1	; 177
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	80 81       	ld	r24, Z
    1a84:	91 81       	ldd	r25, Z+1	; 0x01
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	f1 f7       	brne	.-4      	; 0x1a86 <LCD_init+0x142>
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	e1 5b       	subi	r30, 0xB1	; 177
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	91 83       	std	Z+1, r25	; 0x01
    1a92:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a94:	de 01       	movw	r26, r28
    1a96:	af 5a       	subi	r26, 0xAF	; 175
    1a98:	bf 4f       	sbci	r27, 0xFF	; 255
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	ef 5a       	subi	r30, 0xAF	; 175
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	80 81       	ld	r24, Z
    1aa2:	91 81       	ldd	r25, Z+1	; 0x01
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	11 96       	adiw	r26, 0x01	; 1
    1aa8:	9c 93       	st	X, r25
    1aaa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aac:	fe 01       	movw	r30, r28
    1aae:	ef 5a       	subi	r30, 0xAF	; 175
    1ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab2:	80 81       	ld	r24, Z
    1ab4:	91 81       	ldd	r25, Z+1	; 0x01
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	d1 f6       	brne	.-76     	; 0x1a6e <LCD_init+0x12a>
    1aba:	27 c0       	rjmp	.+78     	; 0x1b0a <LCD_init+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1abc:	8e 01       	movw	r16, r28
    1abe:	0f 5a       	subi	r16, 0xAF	; 175
    1ac0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	ed 5a       	subi	r30, 0xAD	; 173
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	60 81       	ld	r22, Z
    1aca:	71 81       	ldd	r23, Z+1	; 0x01
    1acc:	82 81       	ldd	r24, Z+2	; 0x02
    1ace:	93 81       	ldd	r25, Z+3	; 0x03
    1ad0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	f8 01       	movw	r30, r16
    1ada:	91 83       	std	Z+1, r25	; 0x01
    1adc:	80 83       	st	Z, r24
    1ade:	de 01       	movw	r26, r28
    1ae0:	a3 5b       	subi	r26, 0xB3	; 179
    1ae2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	ef 5a       	subi	r30, 0xAF	; 175
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	80 81       	ld	r24, Z
    1aec:	91 81       	ldd	r25, Z+1	; 0x01
    1aee:	8d 93       	st	X+, r24
    1af0:	9c 93       	st	X, r25
    1af2:	fe 01       	movw	r30, r28
    1af4:	e3 5b       	subi	r30, 0xB3	; 179
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	80 81       	ld	r24, Z
    1afa:	91 81       	ldd	r25, Z+1	; 0x01
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	f1 f7       	brne	.-4      	; 0x1afc <LCD_init+0x1b8>
    1b00:	fe 01       	movw	r30, r28
    1b02:	e3 5b       	subi	r30, 0xB3	; 179
    1b04:	ff 4f       	sbci	r31, 0xFF	; 255
    1b06:	91 83       	std	Z+1, r25	; 0x01
    1b08:	80 83       	st	Z, r24
	
	_delay_ms(35);
	
	// set Rs pin = 0 (write command)
	DIO_setPinValue(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_LOW);
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	61 e0       	ldi	r22, 0x01	; 1
    1b0e:	40 e0       	ldi	r20, 0x00	; 0
    1b10:	0e 94 39 07 	call	0xe72	; 0xe72 <DIO_setPinValue>
	// set Rw pin = 0 (write)
	DIO_setPinValue(LCD_RW_PORT, LCD_RW_PIN, DIO_PIN_LOW);
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	62 e0       	ldi	r22, 0x02	; 2
    1b18:	40 e0       	ldi	r20, 0x00	; 0
    1b1a:	0e 94 39 07 	call	0xe72	; 0xe72 <DIO_setPinValue>
	private_writeHalfPort(0b0010);
    1b1e:	82 e0       	ldi	r24, 0x02	; 2
    1b20:	0e 94 3f 13 	call	0x267e	; 0x267e <private_writeHalfPort>
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_HIGH);
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	63 e0       	ldi	r22, 0x03	; 3
    1b28:	41 e0       	ldi	r20, 0x01	; 1
    1b2a:	0e 94 39 07 	call	0xe72	; 0xe72 <DIO_setPinValue>
    1b2e:	fe 01       	movw	r30, r28
    1b30:	e7 5b       	subi	r30, 0xB7	; 183
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	a0 e8       	ldi	r26, 0x80	; 128
    1b3a:	bf e3       	ldi	r27, 0x3F	; 63
    1b3c:	80 83       	st	Z, r24
    1b3e:	91 83       	std	Z+1, r25	; 0x01
    1b40:	a2 83       	std	Z+2, r26	; 0x02
    1b42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b44:	8e 01       	movw	r16, r28
    1b46:	0b 5b       	subi	r16, 0xBB	; 187
    1b48:	1f 4f       	sbci	r17, 0xFF	; 255
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	e7 5b       	subi	r30, 0xB7	; 183
    1b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b50:	60 81       	ld	r22, Z
    1b52:	71 81       	ldd	r23, Z+1	; 0x01
    1b54:	82 81       	ldd	r24, Z+2	; 0x02
    1b56:	93 81       	ldd	r25, Z+3	; 0x03
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	4a e7       	ldi	r20, 0x7A	; 122
    1b5e:	55 e4       	ldi	r21, 0x45	; 69
    1b60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	f8 01       	movw	r30, r16
    1b6a:	80 83       	st	Z, r24
    1b6c:	91 83       	std	Z+1, r25	; 0x01
    1b6e:	a2 83       	std	Z+2, r26	; 0x02
    1b70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b72:	fe 01       	movw	r30, r28
    1b74:	eb 5b       	subi	r30, 0xBB	; 187
    1b76:	ff 4f       	sbci	r31, 0xFF	; 255
    1b78:	60 81       	ld	r22, Z
    1b7a:	71 81       	ldd	r23, Z+1	; 0x01
    1b7c:	82 81       	ldd	r24, Z+2	; 0x02
    1b7e:	93 81       	ldd	r25, Z+3	; 0x03
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	40 e8       	ldi	r20, 0x80	; 128
    1b86:	5f e3       	ldi	r21, 0x3F	; 63
    1b88:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b8c:	88 23       	and	r24, r24
    1b8e:	44 f4       	brge	.+16     	; 0x1ba0 <LCD_init+0x25c>
		__ticks = 1;
    1b90:	fe 01       	movw	r30, r28
    1b92:	ed 5b       	subi	r30, 0xBD	; 189
    1b94:	ff 4f       	sbci	r31, 0xFF	; 255
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	91 83       	std	Z+1, r25	; 0x01
    1b9c:	80 83       	st	Z, r24
    1b9e:	64 c0       	rjmp	.+200    	; 0x1c68 <LCD_init+0x324>
	else if (__tmp > 65535)
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	eb 5b       	subi	r30, 0xBB	; 187
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	60 81       	ld	r22, Z
    1ba8:	71 81       	ldd	r23, Z+1	; 0x01
    1baa:	82 81       	ldd	r24, Z+2	; 0x02
    1bac:	93 81       	ldd	r25, Z+3	; 0x03
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	3f ef       	ldi	r19, 0xFF	; 255
    1bb2:	4f e7       	ldi	r20, 0x7F	; 127
    1bb4:	57 e4       	ldi	r21, 0x47	; 71
    1bb6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bba:	18 16       	cp	r1, r24
    1bbc:	0c f0       	brlt	.+2      	; 0x1bc0 <LCD_init+0x27c>
    1bbe:	43 c0       	rjmp	.+134    	; 0x1c46 <LCD_init+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc0:	fe 01       	movw	r30, r28
    1bc2:	e7 5b       	subi	r30, 0xB7	; 183
    1bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc6:	60 81       	ld	r22, Z
    1bc8:	71 81       	ldd	r23, Z+1	; 0x01
    1bca:	82 81       	ldd	r24, Z+2	; 0x02
    1bcc:	93 81       	ldd	r25, Z+3	; 0x03
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	40 e2       	ldi	r20, 0x20	; 32
    1bd4:	51 e4       	ldi	r21, 0x41	; 65
    1bd6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	8e 01       	movw	r16, r28
    1be0:	0d 5b       	subi	r16, 0xBD	; 189
    1be2:	1f 4f       	sbci	r17, 0xFF	; 255
    1be4:	bc 01       	movw	r22, r24
    1be6:	cd 01       	movw	r24, r26
    1be8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	f8 01       	movw	r30, r16
    1bf2:	91 83       	std	Z+1, r25	; 0x01
    1bf4:	80 83       	st	Z, r24
    1bf6:	1f c0       	rjmp	.+62     	; 0x1c36 <LCD_init+0x2f2>
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	ef 5b       	subi	r30, 0xBF	; 191
    1bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfe:	80 e9       	ldi	r24, 0x90	; 144
    1c00:	91 e0       	ldi	r25, 0x01	; 1
    1c02:	91 83       	std	Z+1, r25	; 0x01
    1c04:	80 83       	st	Z, r24
    1c06:	fe 01       	movw	r30, r28
    1c08:	ef 5b       	subi	r30, 0xBF	; 191
    1c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0c:	80 81       	ld	r24, Z
    1c0e:	91 81       	ldd	r25, Z+1	; 0x01
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	f1 f7       	brne	.-4      	; 0x1c10 <LCD_init+0x2cc>
    1c14:	fe 01       	movw	r30, r28
    1c16:	ef 5b       	subi	r30, 0xBF	; 191
    1c18:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1a:	91 83       	std	Z+1, r25	; 0x01
    1c1c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c1e:	de 01       	movw	r26, r28
    1c20:	ad 5b       	subi	r26, 0xBD	; 189
    1c22:	bf 4f       	sbci	r27, 0xFF	; 255
    1c24:	fe 01       	movw	r30, r28
    1c26:	ed 5b       	subi	r30, 0xBD	; 189
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	80 81       	ld	r24, Z
    1c2c:	91 81       	ldd	r25, Z+1	; 0x01
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	11 96       	adiw	r26, 0x01	; 1
    1c32:	9c 93       	st	X, r25
    1c34:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c36:	fe 01       	movw	r30, r28
    1c38:	ed 5b       	subi	r30, 0xBD	; 189
    1c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3c:	80 81       	ld	r24, Z
    1c3e:	91 81       	ldd	r25, Z+1	; 0x01
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	d1 f6       	brne	.-76     	; 0x1bf8 <LCD_init+0x2b4>
    1c44:	24 c0       	rjmp	.+72     	; 0x1c8e <LCD_init+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c46:	8e 01       	movw	r16, r28
    1c48:	0d 5b       	subi	r16, 0xBD	; 189
    1c4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	eb 5b       	subi	r30, 0xBB	; 187
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	60 81       	ld	r22, Z
    1c54:	71 81       	ldd	r23, Z+1	; 0x01
    1c56:	82 81       	ldd	r24, Z+2	; 0x02
    1c58:	93 81       	ldd	r25, Z+3	; 0x03
    1c5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	f8 01       	movw	r30, r16
    1c64:	91 83       	std	Z+1, r25	; 0x01
    1c66:	80 83       	st	Z, r24
    1c68:	fe 01       	movw	r30, r28
    1c6a:	ed 5b       	subi	r30, 0xBD	; 189
    1c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6e:	80 81       	ld	r24, Z
    1c70:	91 81       	ldd	r25, Z+1	; 0x01
    1c72:	fe 01       	movw	r30, r28
    1c74:	ff 96       	adiw	r30, 0x3f	; 63
    1c76:	91 83       	std	Z+1, r25	; 0x01
    1c78:	80 83       	st	Z, r24
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	ff 96       	adiw	r30, 0x3f	; 63
    1c7e:	80 81       	ld	r24, Z
    1c80:	91 81       	ldd	r25, Z+1	; 0x01
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	f1 f7       	brne	.-4      	; 0x1c82 <LCD_init+0x33e>
    1c86:	fe 01       	movw	r30, r28
    1c88:	ff 96       	adiw	r30, 0x3f	; 63
    1c8a:	91 83       	std	Z+1, r25	; 0x01
    1c8c:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_LOW);
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	63 e0       	ldi	r22, 0x03	; 3
    1c92:	40 e0       	ldi	r20, 0x00	; 0
    1c94:	0e 94 39 07 	call	0xe72	; 0xe72 <DIO_setPinValue>
    // Function Set command 2*16 LCD , 4 Bit Mode
	LCD_sendCmnd(0b00101000);
    1c98:	88 e2       	ldi	r24, 0x28	; 40
    1c9a:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_sendCmnd>
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	a4 e3       	ldi	r26, 0x34	; 52
    1ca4:	b2 e4       	ldi	r27, 0x42	; 66
    1ca6:	8b af       	std	Y+59, r24	; 0x3b
    1ca8:	9c af       	std	Y+60, r25	; 0x3c
    1caa:	ad af       	std	Y+61, r26	; 0x3d
    1cac:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cae:	6b ad       	ldd	r22, Y+59	; 0x3b
    1cb0:	7c ad       	ldd	r23, Y+60	; 0x3c
    1cb2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cb4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cb6:	2b ea       	ldi	r18, 0xAB	; 171
    1cb8:	3a ea       	ldi	r19, 0xAA	; 170
    1cba:	4a ea       	ldi	r20, 0xAA	; 170
    1cbc:	50 e4       	ldi	r21, 0x40	; 64
    1cbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	8f ab       	std	Y+55, r24	; 0x37
    1cc8:	98 af       	std	Y+56, r25	; 0x38
    1cca:	a9 af       	std	Y+57, r26	; 0x39
    1ccc:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1cce:	6f a9       	ldd	r22, Y+55	; 0x37
    1cd0:	78 ad       	ldd	r23, Y+56	; 0x38
    1cd2:	89 ad       	ldd	r24, Y+57	; 0x39
    1cd4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e8       	ldi	r20, 0x80	; 128
    1cdc:	5f e3       	ldi	r21, 0x3F	; 63
    1cde:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ce2:	88 23       	and	r24, r24
    1ce4:	1c f4       	brge	.+6      	; 0x1cec <LCD_init+0x3a8>
		__ticks = 1;
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	8e ab       	std	Y+54, r24	; 0x36
    1cea:	91 c0       	rjmp	.+290    	; 0x1e0e <LCD_init+0x4ca>
	else if (__tmp > 255)
    1cec:	6f a9       	ldd	r22, Y+55	; 0x37
    1cee:	78 ad       	ldd	r23, Y+56	; 0x38
    1cf0:	89 ad       	ldd	r24, Y+57	; 0x39
    1cf2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	4f e7       	ldi	r20, 0x7F	; 127
    1cfa:	53 e4       	ldi	r21, 0x43	; 67
    1cfc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d00:	18 16       	cp	r1, r24
    1d02:	0c f0       	brlt	.+2      	; 0x1d06 <LCD_init+0x3c2>
    1d04:	7b c0       	rjmp	.+246    	; 0x1dfc <LCD_init+0x4b8>
	{
		_delay_ms(__us / 1000.0);
    1d06:	6b ad       	ldd	r22, Y+59	; 0x3b
    1d08:	7c ad       	ldd	r23, Y+60	; 0x3c
    1d0a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d0c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	4a e7       	ldi	r20, 0x7A	; 122
    1d14:	54 e4       	ldi	r21, 0x44	; 68
    1d16:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	8a ab       	std	Y+50, r24	; 0x32
    1d20:	9b ab       	std	Y+51, r25	; 0x33
    1d22:	ac ab       	std	Y+52, r26	; 0x34
    1d24:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d26:	6a a9       	ldd	r22, Y+50	; 0x32
    1d28:	7b a9       	ldd	r23, Y+51	; 0x33
    1d2a:	8c a9       	ldd	r24, Y+52	; 0x34
    1d2c:	9d a9       	ldd	r25, Y+53	; 0x35
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	4a e7       	ldi	r20, 0x7A	; 122
    1d34:	55 e4       	ldi	r21, 0x45	; 69
    1d36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	8e a7       	std	Y+46, r24	; 0x2e
    1d40:	9f a7       	std	Y+47, r25	; 0x2f
    1d42:	a8 ab       	std	Y+48, r26	; 0x30
    1d44:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1d46:	6e a5       	ldd	r22, Y+46	; 0x2e
    1d48:	7f a5       	ldd	r23, Y+47	; 0x2f
    1d4a:	88 a9       	ldd	r24, Y+48	; 0x30
    1d4c:	99 a9       	ldd	r25, Y+49	; 0x31
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	40 e8       	ldi	r20, 0x80	; 128
    1d54:	5f e3       	ldi	r21, 0x3F	; 63
    1d56:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d5a:	88 23       	and	r24, r24
    1d5c:	2c f4       	brge	.+10     	; 0x1d68 <LCD_init+0x424>
		__ticks = 1;
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	9d a7       	std	Y+45, r25	; 0x2d
    1d64:	8c a7       	std	Y+44, r24	; 0x2c
    1d66:	3f c0       	rjmp	.+126    	; 0x1de6 <LCD_init+0x4a2>
	else if (__tmp > 65535)
    1d68:	6e a5       	ldd	r22, Y+46	; 0x2e
    1d6a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1d6c:	88 a9       	ldd	r24, Y+48	; 0x30
    1d6e:	99 a9       	ldd	r25, Y+49	; 0x31
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	3f ef       	ldi	r19, 0xFF	; 255
    1d74:	4f e7       	ldi	r20, 0x7F	; 127
    1d76:	57 e4       	ldi	r21, 0x47	; 71
    1d78:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d7c:	18 16       	cp	r1, r24
    1d7e:	4c f5       	brge	.+82     	; 0x1dd2 <LCD_init+0x48e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d80:	6a a9       	ldd	r22, Y+50	; 0x32
    1d82:	7b a9       	ldd	r23, Y+51	; 0x33
    1d84:	8c a9       	ldd	r24, Y+52	; 0x34
    1d86:	9d a9       	ldd	r25, Y+53	; 0x35
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	40 e2       	ldi	r20, 0x20	; 32
    1d8e:	51 e4       	ldi	r21, 0x41	; 65
    1d90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	bc 01       	movw	r22, r24
    1d9a:	cd 01       	movw	r24, r26
    1d9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	9d a7       	std	Y+45, r25	; 0x2d
    1da6:	8c a7       	std	Y+44, r24	; 0x2c
    1da8:	0f c0       	rjmp	.+30     	; 0x1dc8 <LCD_init+0x484>
    1daa:	80 e9       	ldi	r24, 0x90	; 144
    1dac:	91 e0       	ldi	r25, 0x01	; 1
    1dae:	9b a7       	std	Y+43, r25	; 0x2b
    1db0:	8a a7       	std	Y+42, r24	; 0x2a
    1db2:	8a a5       	ldd	r24, Y+42	; 0x2a
    1db4:	9b a5       	ldd	r25, Y+43	; 0x2b
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	f1 f7       	brne	.-4      	; 0x1db6 <LCD_init+0x472>
    1dba:	9b a7       	std	Y+43, r25	; 0x2b
    1dbc:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dbe:	8c a5       	ldd	r24, Y+44	; 0x2c
    1dc0:	9d a5       	ldd	r25, Y+45	; 0x2d
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	9d a7       	std	Y+45, r25	; 0x2d
    1dc6:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc8:	8c a5       	ldd	r24, Y+44	; 0x2c
    1dca:	9d a5       	ldd	r25, Y+45	; 0x2d
    1dcc:	00 97       	sbiw	r24, 0x00	; 0
    1dce:	69 f7       	brne	.-38     	; 0x1daa <LCD_init+0x466>
    1dd0:	24 c0       	rjmp	.+72     	; 0x1e1a <LCD_init+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd2:	6e a5       	ldd	r22, Y+46	; 0x2e
    1dd4:	7f a5       	ldd	r23, Y+47	; 0x2f
    1dd6:	88 a9       	ldd	r24, Y+48	; 0x30
    1dd8:	99 a9       	ldd	r25, Y+49	; 0x31
    1dda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	9d a7       	std	Y+45, r25	; 0x2d
    1de4:	8c a7       	std	Y+44, r24	; 0x2c
    1de6:	8c a5       	ldd	r24, Y+44	; 0x2c
    1de8:	9d a5       	ldd	r25, Y+45	; 0x2d
    1dea:	99 a7       	std	Y+41, r25	; 0x29
    1dec:	88 a7       	std	Y+40, r24	; 0x28
    1dee:	88 a5       	ldd	r24, Y+40	; 0x28
    1df0:	99 a5       	ldd	r25, Y+41	; 0x29
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	f1 f7       	brne	.-4      	; 0x1df2 <LCD_init+0x4ae>
    1df6:	99 a7       	std	Y+41, r25	; 0x29
    1df8:	88 a7       	std	Y+40, r24	; 0x28
    1dfa:	0f c0       	rjmp	.+30     	; 0x1e1a <LCD_init+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1dfc:	6f a9       	ldd	r22, Y+55	; 0x37
    1dfe:	78 ad       	ldd	r23, Y+56	; 0x38
    1e00:	89 ad       	ldd	r24, Y+57	; 0x39
    1e02:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	8e ab       	std	Y+54, r24	; 0x36
    1e0e:	8e a9       	ldd	r24, Y+54	; 0x36
    1e10:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e12:	8f a1       	ldd	r24, Y+39	; 0x27
    1e14:	8a 95       	dec	r24
    1e16:	f1 f7       	brne	.-4      	; 0x1e14 <LCD_init+0x4d0>
    1e18:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(45);
	
	// Display on off Control (DisplayOn, Cursor on, Blink on)
	LCD_sendCmnd(0b00001111);
    1e1a:	8f e0       	ldi	r24, 0x0F	; 15
    1e1c:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_sendCmnd>
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	a4 e3       	ldi	r26, 0x34	; 52
    1e26:	b2 e4       	ldi	r27, 0x42	; 66
    1e28:	8b a3       	std	Y+35, r24	; 0x23
    1e2a:	9c a3       	std	Y+36, r25	; 0x24
    1e2c:	ad a3       	std	Y+37, r26	; 0x25
    1e2e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e30:	6b a1       	ldd	r22, Y+35	; 0x23
    1e32:	7c a1       	ldd	r23, Y+36	; 0x24
    1e34:	8d a1       	ldd	r24, Y+37	; 0x25
    1e36:	9e a1       	ldd	r25, Y+38	; 0x26
    1e38:	2b ea       	ldi	r18, 0xAB	; 171
    1e3a:	3a ea       	ldi	r19, 0xAA	; 170
    1e3c:	4a ea       	ldi	r20, 0xAA	; 170
    1e3e:	50 e4       	ldi	r21, 0x40	; 64
    1e40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	8f 8f       	std	Y+31, r24	; 0x1f
    1e4a:	98 a3       	std	Y+32, r25	; 0x20
    1e4c:	a9 a3       	std	Y+33, r26	; 0x21
    1e4e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1e50:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e52:	78 a1       	ldd	r23, Y+32	; 0x20
    1e54:	89 a1       	ldd	r24, Y+33	; 0x21
    1e56:	9a a1       	ldd	r25, Y+34	; 0x22
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e8       	ldi	r20, 0x80	; 128
    1e5e:	5f e3       	ldi	r21, 0x3F	; 63
    1e60:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e64:	88 23       	and	r24, r24
    1e66:	1c f4       	brge	.+6      	; 0x1e6e <LCD_init+0x52a>
		__ticks = 1;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	8e 8f       	std	Y+30, r24	; 0x1e
    1e6c:	91 c0       	rjmp	.+290    	; 0x1f90 <LCD_init+0x64c>
	else if (__tmp > 255)
    1e6e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e70:	78 a1       	ldd	r23, Y+32	; 0x20
    1e72:	89 a1       	ldd	r24, Y+33	; 0x21
    1e74:	9a a1       	ldd	r25, Y+34	; 0x22
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	4f e7       	ldi	r20, 0x7F	; 127
    1e7c:	53 e4       	ldi	r21, 0x43	; 67
    1e7e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e82:	18 16       	cp	r1, r24
    1e84:	0c f0       	brlt	.+2      	; 0x1e88 <LCD_init+0x544>
    1e86:	7b c0       	rjmp	.+246    	; 0x1f7e <LCD_init+0x63a>
	{
		_delay_ms(__us / 1000.0);
    1e88:	6b a1       	ldd	r22, Y+35	; 0x23
    1e8a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e8c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e8e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	4a e7       	ldi	r20, 0x7A	; 122
    1e96:	54 e4       	ldi	r21, 0x44	; 68
    1e98:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	8a 8f       	std	Y+26, r24	; 0x1a
    1ea2:	9b 8f       	std	Y+27, r25	; 0x1b
    1ea4:	ac 8f       	std	Y+28, r26	; 0x1c
    1ea6:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1eaa:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1eac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1eae:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	4a e7       	ldi	r20, 0x7A	; 122
    1eb6:	55 e4       	ldi	r21, 0x45	; 69
    1eb8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	8e 8b       	std	Y+22, r24	; 0x16
    1ec2:	9f 8b       	std	Y+23, r25	; 0x17
    1ec4:	a8 8f       	std	Y+24, r26	; 0x18
    1ec6:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1ec8:	6e 89       	ldd	r22, Y+22	; 0x16
    1eca:	7f 89       	ldd	r23, Y+23	; 0x17
    1ecc:	88 8d       	ldd	r24, Y+24	; 0x18
    1ece:	99 8d       	ldd	r25, Y+25	; 0x19
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	40 e8       	ldi	r20, 0x80	; 128
    1ed6:	5f e3       	ldi	r21, 0x3F	; 63
    1ed8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1edc:	88 23       	and	r24, r24
    1ede:	2c f4       	brge	.+10     	; 0x1eea <LCD_init+0x5a6>
		__ticks = 1;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	9d 8b       	std	Y+21, r25	; 0x15
    1ee6:	8c 8b       	std	Y+20, r24	; 0x14
    1ee8:	3f c0       	rjmp	.+126    	; 0x1f68 <LCD_init+0x624>
	else if (__tmp > 65535)
    1eea:	6e 89       	ldd	r22, Y+22	; 0x16
    1eec:	7f 89       	ldd	r23, Y+23	; 0x17
    1eee:	88 8d       	ldd	r24, Y+24	; 0x18
    1ef0:	99 8d       	ldd	r25, Y+25	; 0x19
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	3f ef       	ldi	r19, 0xFF	; 255
    1ef6:	4f e7       	ldi	r20, 0x7F	; 127
    1ef8:	57 e4       	ldi	r21, 0x47	; 71
    1efa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1efe:	18 16       	cp	r1, r24
    1f00:	4c f5       	brge	.+82     	; 0x1f54 <LCD_init+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f02:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1f04:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1f06:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f08:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e2       	ldi	r20, 0x20	; 32
    1f10:	51 e4       	ldi	r21, 0x41	; 65
    1f12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	bc 01       	movw	r22, r24
    1f1c:	cd 01       	movw	r24, r26
    1f1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	9d 8b       	std	Y+21, r25	; 0x15
    1f28:	8c 8b       	std	Y+20, r24	; 0x14
    1f2a:	0f c0       	rjmp	.+30     	; 0x1f4a <LCD_init+0x606>
    1f2c:	80 e9       	ldi	r24, 0x90	; 144
    1f2e:	91 e0       	ldi	r25, 0x01	; 1
    1f30:	9b 8b       	std	Y+19, r25	; 0x13
    1f32:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f34:	8a 89       	ldd	r24, Y+18	; 0x12
    1f36:	9b 89       	ldd	r25, Y+19	; 0x13
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <LCD_init+0x5f4>
    1f3c:	9b 8b       	std	Y+19, r25	; 0x13
    1f3e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f40:	8c 89       	ldd	r24, Y+20	; 0x14
    1f42:	9d 89       	ldd	r25, Y+21	; 0x15
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	9d 8b       	std	Y+21, r25	; 0x15
    1f48:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4a:	8c 89       	ldd	r24, Y+20	; 0x14
    1f4c:	9d 89       	ldd	r25, Y+21	; 0x15
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	69 f7       	brne	.-38     	; 0x1f2c <LCD_init+0x5e8>
    1f52:	24 c0       	rjmp	.+72     	; 0x1f9c <LCD_init+0x658>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f54:	6e 89       	ldd	r22, Y+22	; 0x16
    1f56:	7f 89       	ldd	r23, Y+23	; 0x17
    1f58:	88 8d       	ldd	r24, Y+24	; 0x18
    1f5a:	99 8d       	ldd	r25, Y+25	; 0x19
    1f5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	9d 8b       	std	Y+21, r25	; 0x15
    1f66:	8c 8b       	std	Y+20, r24	; 0x14
    1f68:	8c 89       	ldd	r24, Y+20	; 0x14
    1f6a:	9d 89       	ldd	r25, Y+21	; 0x15
    1f6c:	99 8b       	std	Y+17, r25	; 0x11
    1f6e:	88 8b       	std	Y+16, r24	; 0x10
    1f70:	88 89       	ldd	r24, Y+16	; 0x10
    1f72:	99 89       	ldd	r25, Y+17	; 0x11
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	f1 f7       	brne	.-4      	; 0x1f74 <LCD_init+0x630>
    1f78:	99 8b       	std	Y+17, r25	; 0x11
    1f7a:	88 8b       	std	Y+16, r24	; 0x10
    1f7c:	0f c0       	rjmp	.+30     	; 0x1f9c <LCD_init+0x658>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f7e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f80:	78 a1       	ldd	r23, Y+32	; 0x20
    1f82:	89 a1       	ldd	r24, Y+33	; 0x21
    1f84:	9a a1       	ldd	r25, Y+34	; 0x22
    1f86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	8e 8f       	std	Y+30, r24	; 0x1e
    1f90:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f92:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f94:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f96:	8a 95       	dec	r24
    1f98:	f1 f7       	brne	.-4      	; 0x1f96 <LCD_init+0x652>
    1f9a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(45);
	
	// Clear Display
	LCD_sendCmnd(0b00000001);
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_sendCmnd>
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	a0 e0       	ldi	r26, 0x00	; 0
    1fa8:	b0 e4       	ldi	r27, 0x40	; 64
    1faa:	8b 87       	std	Y+11, r24	; 0x0b
    1fac:	9c 87       	std	Y+12, r25	; 0x0c
    1fae:	ad 87       	std	Y+13, r26	; 0x0d
    1fb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	4a e7       	ldi	r20, 0x7A	; 122
    1fc0:	55 e4       	ldi	r21, 0x45	; 69
    1fc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	8f 83       	std	Y+7, r24	; 0x07
    1fcc:	98 87       	std	Y+8, r25	; 0x08
    1fce:	a9 87       	std	Y+9, r26	; 0x09
    1fd0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd4:	78 85       	ldd	r23, Y+8	; 0x08
    1fd6:	89 85       	ldd	r24, Y+9	; 0x09
    1fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	40 e8       	ldi	r20, 0x80	; 128
    1fe0:	5f e3       	ldi	r21, 0x3F	; 63
    1fe2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fe6:	88 23       	and	r24, r24
    1fe8:	2c f4       	brge	.+10     	; 0x1ff4 <LCD_init+0x6b0>
		__ticks = 1;
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	9e 83       	std	Y+6, r25	; 0x06
    1ff0:	8d 83       	std	Y+5, r24	; 0x05
    1ff2:	3f c0       	rjmp	.+126    	; 0x2072 <LCD_init+0x72e>
	else if (__tmp > 65535)
    1ff4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff6:	78 85       	ldd	r23, Y+8	; 0x08
    1ff8:	89 85       	ldd	r24, Y+9	; 0x09
    1ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	3f ef       	ldi	r19, 0xFF	; 255
    2000:	4f e7       	ldi	r20, 0x7F	; 127
    2002:	57 e4       	ldi	r21, 0x47	; 71
    2004:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2008:	18 16       	cp	r1, r24
    200a:	4c f5       	brge	.+82     	; 0x205e <LCD_init+0x71a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200c:	6b 85       	ldd	r22, Y+11	; 0x0b
    200e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2010:	8d 85       	ldd	r24, Y+13	; 0x0d
    2012:	9e 85       	ldd	r25, Y+14	; 0x0e
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	40 e2       	ldi	r20, 0x20	; 32
    201a:	51 e4       	ldi	r21, 0x41	; 65
    201c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	bc 01       	movw	r22, r24
    2026:	cd 01       	movw	r24, r26
    2028:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	9e 83       	std	Y+6, r25	; 0x06
    2032:	8d 83       	std	Y+5, r24	; 0x05
    2034:	0f c0       	rjmp	.+30     	; 0x2054 <LCD_init+0x710>
    2036:	80 e9       	ldi	r24, 0x90	; 144
    2038:	91 e0       	ldi	r25, 0x01	; 1
    203a:	9c 83       	std	Y+4, r25	; 0x04
    203c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    203e:	8b 81       	ldd	r24, Y+3	; 0x03
    2040:	9c 81       	ldd	r25, Y+4	; 0x04
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	f1 f7       	brne	.-4      	; 0x2042 <LCD_init+0x6fe>
    2046:	9c 83       	std	Y+4, r25	; 0x04
    2048:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204a:	8d 81       	ldd	r24, Y+5	; 0x05
    204c:	9e 81       	ldd	r25, Y+6	; 0x06
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	9e 83       	std	Y+6, r25	; 0x06
    2052:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2054:	8d 81       	ldd	r24, Y+5	; 0x05
    2056:	9e 81       	ldd	r25, Y+6	; 0x06
    2058:	00 97       	sbiw	r24, 0x00	; 0
    205a:	69 f7       	brne	.-38     	; 0x2036 <LCD_init+0x6f2>
    205c:	14 c0       	rjmp	.+40     	; 0x2086 <LCD_init+0x742>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205e:	6f 81       	ldd	r22, Y+7	; 0x07
    2060:	78 85       	ldd	r23, Y+8	; 0x08
    2062:	89 85       	ldd	r24, Y+9	; 0x09
    2064:	9a 85       	ldd	r25, Y+10	; 0x0a
    2066:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	9e 83       	std	Y+6, r25	; 0x06
    2070:	8d 83       	std	Y+5, r24	; 0x05
    2072:	8d 81       	ldd	r24, Y+5	; 0x05
    2074:	9e 81       	ldd	r25, Y+6	; 0x06
    2076:	9a 83       	std	Y+2, r25	; 0x02
    2078:	89 83       	std	Y+1, r24	; 0x01
    207a:	89 81       	ldd	r24, Y+1	; 0x01
    207c:	9a 81       	ldd	r25, Y+2	; 0x02
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	f1 f7       	brne	.-4      	; 0x207e <LCD_init+0x73a>
    2082:	9a 83       	std	Y+2, r25	; 0x02
    2084:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	
	// Entery Mode Set(increment mode on, shift off)
	LCD_sendCmnd(0b00000110);
    2086:	86 e0       	ldi	r24, 0x06	; 6
    2088:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_sendCmnd>
}
    208c:	c6 5a       	subi	r28, 0xA6	; 166
    208e:	df 4f       	sbci	r29, 0xFF	; 255
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	f8 94       	cli
    2094:	de bf       	out	0x3e, r29	; 62
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	cd bf       	out	0x3d, r28	; 61
    209a:	cf 91       	pop	r28
    209c:	df 91       	pop	r29
    209e:	1f 91       	pop	r17
    20a0:	0f 91       	pop	r16
    20a2:	08 95       	ret

000020a4 <LCD_sendCmnd>:


void LCD_sendCmnd(u8 Cmnd)
{
    20a4:	df 93       	push	r29
    20a6:	cf 93       	push	r28
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
    20ac:	6d 97       	sbiw	r28, 0x1d	; 29
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	8d 8f       	std	Y+29, r24	; 0x1d
	// set Rs pin = 0 (write command)
	DIO_setPinValue(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_LOW);
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	61 e0       	ldi	r22, 0x01	; 1
    20be:	40 e0       	ldi	r20, 0x00	; 0
    20c0:	0e 94 39 07 	call	0xe72	; 0xe72 <DIO_setPinValue>
	
	// set Rw pin = 0 (write)
	DIO_setPinValue(LCD_RW_PORT, LCD_RW_PIN, DIO_PIN_LOW);
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	62 e0       	ldi	r22, 0x02	; 2
    20c8:	40 e0       	ldi	r20, 0x00	; 0
    20ca:	0e 94 39 07 	call	0xe72	; 0xe72 <DIO_setPinValue>
	
	// Write The Most 4 bits Of command on Data Pins
	private_writeHalfPort(Cmnd>>4);
    20ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20d0:	82 95       	swap	r24
    20d2:	8f 70       	andi	r24, 0x0F	; 15
    20d4:	0e 94 3f 13 	call	0x267e	; 0x267e <private_writeHalfPort>
	
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_HIGH);
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	63 e0       	ldi	r22, 0x03	; 3
    20dc:	41 e0       	ldi	r20, 0x01	; 1
    20de:	0e 94 39 07 	call	0xe72	; 0xe72 <DIO_setPinValue>
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	a0 e8       	ldi	r26, 0x80	; 128
    20e8:	bf e3       	ldi	r27, 0x3F	; 63
    20ea:	89 8f       	std	Y+25, r24	; 0x19
    20ec:	9a 8f       	std	Y+26, r25	; 0x1a
    20ee:	ab 8f       	std	Y+27, r26	; 0x1b
    20f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f2:	69 8d       	ldd	r22, Y+25	; 0x19
    20f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	4a e7       	ldi	r20, 0x7A	; 122
    2100:	55 e4       	ldi	r21, 0x45	; 69
    2102:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	8d 8b       	std	Y+21, r24	; 0x15
    210c:	9e 8b       	std	Y+22, r25	; 0x16
    210e:	af 8b       	std	Y+23, r26	; 0x17
    2110:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2112:	6d 89       	ldd	r22, Y+21	; 0x15
    2114:	7e 89       	ldd	r23, Y+22	; 0x16
    2116:	8f 89       	ldd	r24, Y+23	; 0x17
    2118:	98 8d       	ldd	r25, Y+24	; 0x18
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e8       	ldi	r20, 0x80	; 128
    2120:	5f e3       	ldi	r21, 0x3F	; 63
    2122:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2126:	88 23       	and	r24, r24
    2128:	2c f4       	brge	.+10     	; 0x2134 <LCD_sendCmnd+0x90>
		__ticks = 1;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	9c 8b       	std	Y+20, r25	; 0x14
    2130:	8b 8b       	std	Y+19, r24	; 0x13
    2132:	3f c0       	rjmp	.+126    	; 0x21b2 <LCD_sendCmnd+0x10e>
	else if (__tmp > 65535)
    2134:	6d 89       	ldd	r22, Y+21	; 0x15
    2136:	7e 89       	ldd	r23, Y+22	; 0x16
    2138:	8f 89       	ldd	r24, Y+23	; 0x17
    213a:	98 8d       	ldd	r25, Y+24	; 0x18
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	3f ef       	ldi	r19, 0xFF	; 255
    2140:	4f e7       	ldi	r20, 0x7F	; 127
    2142:	57 e4       	ldi	r21, 0x47	; 71
    2144:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2148:	18 16       	cp	r1, r24
    214a:	4c f5       	brge	.+82     	; 0x219e <LCD_sendCmnd+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    214c:	69 8d       	ldd	r22, Y+25	; 0x19
    214e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2150:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2152:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e2       	ldi	r20, 0x20	; 32
    215a:	51 e4       	ldi	r21, 0x41	; 65
    215c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	bc 01       	movw	r22, r24
    2166:	cd 01       	movw	r24, r26
    2168:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	9c 8b       	std	Y+20, r25	; 0x14
    2172:	8b 8b       	std	Y+19, r24	; 0x13
    2174:	0f c0       	rjmp	.+30     	; 0x2194 <LCD_sendCmnd+0xf0>
    2176:	80 e9       	ldi	r24, 0x90	; 144
    2178:	91 e0       	ldi	r25, 0x01	; 1
    217a:	9a 8b       	std	Y+18, r25	; 0x12
    217c:	89 8b       	std	Y+17, r24	; 0x11
    217e:	89 89       	ldd	r24, Y+17	; 0x11
    2180:	9a 89       	ldd	r25, Y+18	; 0x12
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	f1 f7       	brne	.-4      	; 0x2182 <LCD_sendCmnd+0xde>
    2186:	9a 8b       	std	Y+18, r25	; 0x12
    2188:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218a:	8b 89       	ldd	r24, Y+19	; 0x13
    218c:	9c 89       	ldd	r25, Y+20	; 0x14
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	9c 8b       	std	Y+20, r25	; 0x14
    2192:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2194:	8b 89       	ldd	r24, Y+19	; 0x13
    2196:	9c 89       	ldd	r25, Y+20	; 0x14
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	69 f7       	brne	.-38     	; 0x2176 <LCD_sendCmnd+0xd2>
    219c:	14 c0       	rjmp	.+40     	; 0x21c6 <LCD_sendCmnd+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    219e:	6d 89       	ldd	r22, Y+21	; 0x15
    21a0:	7e 89       	ldd	r23, Y+22	; 0x16
    21a2:	8f 89       	ldd	r24, Y+23	; 0x17
    21a4:	98 8d       	ldd	r25, Y+24	; 0x18
    21a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	9c 8b       	std	Y+20, r25	; 0x14
    21b0:	8b 8b       	std	Y+19, r24	; 0x13
    21b2:	8b 89       	ldd	r24, Y+19	; 0x13
    21b4:	9c 89       	ldd	r25, Y+20	; 0x14
    21b6:	98 8b       	std	Y+16, r25	; 0x10
    21b8:	8f 87       	std	Y+15, r24	; 0x0f
    21ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    21bc:	98 89       	ldd	r25, Y+16	; 0x10
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	f1 f7       	brne	.-4      	; 0x21be <LCD_sendCmnd+0x11a>
    21c2:	98 8b       	std	Y+16, r25	; 0x10
    21c4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_LOW);
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	63 e0       	ldi	r22, 0x03	; 3
    21ca:	40 e0       	ldi	r20, 0x00	; 0
    21cc:	0e 94 39 07 	call	0xe72	; 0xe72 <DIO_setPinValue>
	
	// Write The Least 4 bits Of command on Data Pins
	private_writeHalfPort(Cmnd);
    21d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21d2:	0e 94 3f 13 	call	0x267e	; 0x267e <private_writeHalfPort>
	
	/* Enable Pulse *//* H => L */	
	DIO_setPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_HIGH);
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	63 e0       	ldi	r22, 0x03	; 3
    21da:	41 e0       	ldi	r20, 0x01	; 1
    21dc:	0e 94 39 07 	call	0xe72	; 0xe72 <DIO_setPinValue>
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	a0 e8       	ldi	r26, 0x80	; 128
    21e6:	bf e3       	ldi	r27, 0x3F	; 63
    21e8:	8b 87       	std	Y+11, r24	; 0x0b
    21ea:	9c 87       	std	Y+12, r25	; 0x0c
    21ec:	ad 87       	std	Y+13, r26	; 0x0d
    21ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	4a e7       	ldi	r20, 0x7A	; 122
    21fe:	55 e4       	ldi	r21, 0x45	; 69
    2200:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	8f 83       	std	Y+7, r24	; 0x07
    220a:	98 87       	std	Y+8, r25	; 0x08
    220c:	a9 87       	std	Y+9, r26	; 0x09
    220e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2210:	6f 81       	ldd	r22, Y+7	; 0x07
    2212:	78 85       	ldd	r23, Y+8	; 0x08
    2214:	89 85       	ldd	r24, Y+9	; 0x09
    2216:	9a 85       	ldd	r25, Y+10	; 0x0a
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	40 e8       	ldi	r20, 0x80	; 128
    221e:	5f e3       	ldi	r21, 0x3F	; 63
    2220:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2224:	88 23       	and	r24, r24
    2226:	2c f4       	brge	.+10     	; 0x2232 <LCD_sendCmnd+0x18e>
		__ticks = 1;
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	9e 83       	std	Y+6, r25	; 0x06
    222e:	8d 83       	std	Y+5, r24	; 0x05
    2230:	3f c0       	rjmp	.+126    	; 0x22b0 <LCD_sendCmnd+0x20c>
	else if (__tmp > 65535)
    2232:	6f 81       	ldd	r22, Y+7	; 0x07
    2234:	78 85       	ldd	r23, Y+8	; 0x08
    2236:	89 85       	ldd	r24, Y+9	; 0x09
    2238:	9a 85       	ldd	r25, Y+10	; 0x0a
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	3f ef       	ldi	r19, 0xFF	; 255
    223e:	4f e7       	ldi	r20, 0x7F	; 127
    2240:	57 e4       	ldi	r21, 0x47	; 71
    2242:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2246:	18 16       	cp	r1, r24
    2248:	4c f5       	brge	.+82     	; 0x229c <LCD_sendCmnd+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    224a:	6b 85       	ldd	r22, Y+11	; 0x0b
    224c:	7c 85       	ldd	r23, Y+12	; 0x0c
    224e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2250:	9e 85       	ldd	r25, Y+14	; 0x0e
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e2       	ldi	r20, 0x20	; 32
    2258:	51 e4       	ldi	r21, 0x41	; 65
    225a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	bc 01       	movw	r22, r24
    2264:	cd 01       	movw	r24, r26
    2266:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	9e 83       	std	Y+6, r25	; 0x06
    2270:	8d 83       	std	Y+5, r24	; 0x05
    2272:	0f c0       	rjmp	.+30     	; 0x2292 <LCD_sendCmnd+0x1ee>
    2274:	80 e9       	ldi	r24, 0x90	; 144
    2276:	91 e0       	ldi	r25, 0x01	; 1
    2278:	9c 83       	std	Y+4, r25	; 0x04
    227a:	8b 83       	std	Y+3, r24	; 0x03
    227c:	8b 81       	ldd	r24, Y+3	; 0x03
    227e:	9c 81       	ldd	r25, Y+4	; 0x04
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	f1 f7       	brne	.-4      	; 0x2280 <LCD_sendCmnd+0x1dc>
    2284:	9c 83       	std	Y+4, r25	; 0x04
    2286:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2288:	8d 81       	ldd	r24, Y+5	; 0x05
    228a:	9e 81       	ldd	r25, Y+6	; 0x06
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	9e 83       	std	Y+6, r25	; 0x06
    2290:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2292:	8d 81       	ldd	r24, Y+5	; 0x05
    2294:	9e 81       	ldd	r25, Y+6	; 0x06
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	69 f7       	brne	.-38     	; 0x2274 <LCD_sendCmnd+0x1d0>
    229a:	14 c0       	rjmp	.+40     	; 0x22c4 <LCD_sendCmnd+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229c:	6f 81       	ldd	r22, Y+7	; 0x07
    229e:	78 85       	ldd	r23, Y+8	; 0x08
    22a0:	89 85       	ldd	r24, Y+9	; 0x09
    22a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	9e 83       	std	Y+6, r25	; 0x06
    22ae:	8d 83       	std	Y+5, r24	; 0x05
    22b0:	8d 81       	ldd	r24, Y+5	; 0x05
    22b2:	9e 81       	ldd	r25, Y+6	; 0x06
    22b4:	9a 83       	std	Y+2, r25	; 0x02
    22b6:	89 83       	std	Y+1, r24	; 0x01
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
    22ba:	9a 81       	ldd	r25, Y+2	; 0x02
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	f1 f7       	brne	.-4      	; 0x22bc <LCD_sendCmnd+0x218>
    22c0:	9a 83       	std	Y+2, r25	; 0x02
    22c2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_LOW);
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	63 e0       	ldi	r22, 0x03	; 3
    22c8:	40 e0       	ldi	r20, 0x00	; 0
    22ca:	0e 94 39 07 	call	0xe72	; 0xe72 <DIO_setPinValue>
}
    22ce:	6d 96       	adiw	r28, 0x1d	; 29
    22d0:	0f b6       	in	r0, 0x3f	; 63
    22d2:	f8 94       	cli
    22d4:	de bf       	out	0x3e, r29	; 62
    22d6:	0f be       	out	0x3f, r0	; 63
    22d8:	cd bf       	out	0x3d, r28	; 61
    22da:	cf 91       	pop	r28
    22dc:	df 91       	pop	r29
    22de:	08 95       	ret

000022e0 <LCD_sendChar>:


void LCD_sendChar(u8 data)
{
    22e0:	df 93       	push	r29
    22e2:	cf 93       	push	r28
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
    22e8:	6d 97       	sbiw	r28, 0x1d	; 29
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	f8 94       	cli
    22ee:	de bf       	out	0x3e, r29	; 62
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	cd bf       	out	0x3d, r28	; 61
    22f4:	8d 8f       	std	Y+29, r24	; 0x1d
	// set Rs pin = 1 (write data)
	DIO_setPinValue(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_HIGH);
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	61 e0       	ldi	r22, 0x01	; 1
    22fa:	41 e0       	ldi	r20, 0x01	; 1
    22fc:	0e 94 39 07 	call	0xe72	; 0xe72 <DIO_setPinValue>
	
	// set Rw pin = 0 (write)
	DIO_setPinValue(LCD_RW_PORT, LCD_RW_PIN, DIO_PIN_LOW);
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	62 e0       	ldi	r22, 0x02	; 2
    2304:	40 e0       	ldi	r20, 0x00	; 0
    2306:	0e 94 39 07 	call	0xe72	; 0xe72 <DIO_setPinValue>
	
	// Write The Most 4 bits Of data on Data Pins
	private_writeHalfPort(data>>4);
    230a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    230c:	82 95       	swap	r24
    230e:	8f 70       	andi	r24, 0x0F	; 15
    2310:	0e 94 3f 13 	call	0x267e	; 0x267e <private_writeHalfPort>
	
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_HIGH);
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	63 e0       	ldi	r22, 0x03	; 3
    2318:	41 e0       	ldi	r20, 0x01	; 1
    231a:	0e 94 39 07 	call	0xe72	; 0xe72 <DIO_setPinValue>
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	a0 e8       	ldi	r26, 0x80	; 128
    2324:	bf e3       	ldi	r27, 0x3F	; 63
    2326:	89 8f       	std	Y+25, r24	; 0x19
    2328:	9a 8f       	std	Y+26, r25	; 0x1a
    232a:	ab 8f       	std	Y+27, r26	; 0x1b
    232c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    232e:	69 8d       	ldd	r22, Y+25	; 0x19
    2330:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2332:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2334:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	4a e7       	ldi	r20, 0x7A	; 122
    233c:	55 e4       	ldi	r21, 0x45	; 69
    233e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	8d 8b       	std	Y+21, r24	; 0x15
    2348:	9e 8b       	std	Y+22, r25	; 0x16
    234a:	af 8b       	std	Y+23, r26	; 0x17
    234c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    234e:	6d 89       	ldd	r22, Y+21	; 0x15
    2350:	7e 89       	ldd	r23, Y+22	; 0x16
    2352:	8f 89       	ldd	r24, Y+23	; 0x17
    2354:	98 8d       	ldd	r25, Y+24	; 0x18
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e8       	ldi	r20, 0x80	; 128
    235c:	5f e3       	ldi	r21, 0x3F	; 63
    235e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2362:	88 23       	and	r24, r24
    2364:	2c f4       	brge	.+10     	; 0x2370 <LCD_sendChar+0x90>
		__ticks = 1;
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	9c 8b       	std	Y+20, r25	; 0x14
    236c:	8b 8b       	std	Y+19, r24	; 0x13
    236e:	3f c0       	rjmp	.+126    	; 0x23ee <LCD_sendChar+0x10e>
	else if (__tmp > 65535)
    2370:	6d 89       	ldd	r22, Y+21	; 0x15
    2372:	7e 89       	ldd	r23, Y+22	; 0x16
    2374:	8f 89       	ldd	r24, Y+23	; 0x17
    2376:	98 8d       	ldd	r25, Y+24	; 0x18
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	3f ef       	ldi	r19, 0xFF	; 255
    237c:	4f e7       	ldi	r20, 0x7F	; 127
    237e:	57 e4       	ldi	r21, 0x47	; 71
    2380:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2384:	18 16       	cp	r1, r24
    2386:	4c f5       	brge	.+82     	; 0x23da <LCD_sendChar+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2388:	69 8d       	ldd	r22, Y+25	; 0x19
    238a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    238c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    238e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e2       	ldi	r20, 0x20	; 32
    2396:	51 e4       	ldi	r21, 0x41	; 65
    2398:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	bc 01       	movw	r22, r24
    23a2:	cd 01       	movw	r24, r26
    23a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	9c 8b       	std	Y+20, r25	; 0x14
    23ae:	8b 8b       	std	Y+19, r24	; 0x13
    23b0:	0f c0       	rjmp	.+30     	; 0x23d0 <LCD_sendChar+0xf0>
    23b2:	80 e9       	ldi	r24, 0x90	; 144
    23b4:	91 e0       	ldi	r25, 0x01	; 1
    23b6:	9a 8b       	std	Y+18, r25	; 0x12
    23b8:	89 8b       	std	Y+17, r24	; 0x11
    23ba:	89 89       	ldd	r24, Y+17	; 0x11
    23bc:	9a 89       	ldd	r25, Y+18	; 0x12
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	f1 f7       	brne	.-4      	; 0x23be <LCD_sendChar+0xde>
    23c2:	9a 8b       	std	Y+18, r25	; 0x12
    23c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c6:	8b 89       	ldd	r24, Y+19	; 0x13
    23c8:	9c 89       	ldd	r25, Y+20	; 0x14
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	9c 8b       	std	Y+20, r25	; 0x14
    23ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d0:	8b 89       	ldd	r24, Y+19	; 0x13
    23d2:	9c 89       	ldd	r25, Y+20	; 0x14
    23d4:	00 97       	sbiw	r24, 0x00	; 0
    23d6:	69 f7       	brne	.-38     	; 0x23b2 <LCD_sendChar+0xd2>
    23d8:	14 c0       	rjmp	.+40     	; 0x2402 <LCD_sendChar+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23da:	6d 89       	ldd	r22, Y+21	; 0x15
    23dc:	7e 89       	ldd	r23, Y+22	; 0x16
    23de:	8f 89       	ldd	r24, Y+23	; 0x17
    23e0:	98 8d       	ldd	r25, Y+24	; 0x18
    23e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	9c 8b       	std	Y+20, r25	; 0x14
    23ec:	8b 8b       	std	Y+19, r24	; 0x13
    23ee:	8b 89       	ldd	r24, Y+19	; 0x13
    23f0:	9c 89       	ldd	r25, Y+20	; 0x14
    23f2:	98 8b       	std	Y+16, r25	; 0x10
    23f4:	8f 87       	std	Y+15, r24	; 0x0f
    23f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f8:	98 89       	ldd	r25, Y+16	; 0x10
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	f1 f7       	brne	.-4      	; 0x23fa <LCD_sendChar+0x11a>
    23fe:	98 8b       	std	Y+16, r25	; 0x10
    2400:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_LOW);
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	63 e0       	ldi	r22, 0x03	; 3
    2406:	40 e0       	ldi	r20, 0x00	; 0
    2408:	0e 94 39 07 	call	0xe72	; 0xe72 <DIO_setPinValue>
	
	// Write The Least 4 bits Of data on Data Pins
	private_writeHalfPort(data);
    240c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    240e:	0e 94 3f 13 	call	0x267e	; 0x267e <private_writeHalfPort>
	
	/* Enable Pulse *//* H => L */	
	DIO_setPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_HIGH);
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	63 e0       	ldi	r22, 0x03	; 3
    2416:	41 e0       	ldi	r20, 0x01	; 1
    2418:	0e 94 39 07 	call	0xe72	; 0xe72 <DIO_setPinValue>
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	a0 e8       	ldi	r26, 0x80	; 128
    2422:	bf e3       	ldi	r27, 0x3F	; 63
    2424:	8b 87       	std	Y+11, r24	; 0x0b
    2426:	9c 87       	std	Y+12, r25	; 0x0c
    2428:	ad 87       	std	Y+13, r26	; 0x0d
    242a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    242c:	6b 85       	ldd	r22, Y+11	; 0x0b
    242e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2430:	8d 85       	ldd	r24, Y+13	; 0x0d
    2432:	9e 85       	ldd	r25, Y+14	; 0x0e
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	4a e7       	ldi	r20, 0x7A	; 122
    243a:	55 e4       	ldi	r21, 0x45	; 69
    243c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	8f 83       	std	Y+7, r24	; 0x07
    2446:	98 87       	std	Y+8, r25	; 0x08
    2448:	a9 87       	std	Y+9, r26	; 0x09
    244a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    244c:	6f 81       	ldd	r22, Y+7	; 0x07
    244e:	78 85       	ldd	r23, Y+8	; 0x08
    2450:	89 85       	ldd	r24, Y+9	; 0x09
    2452:	9a 85       	ldd	r25, Y+10	; 0x0a
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	40 e8       	ldi	r20, 0x80	; 128
    245a:	5f e3       	ldi	r21, 0x3F	; 63
    245c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2460:	88 23       	and	r24, r24
    2462:	2c f4       	brge	.+10     	; 0x246e <LCD_sendChar+0x18e>
		__ticks = 1;
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	9e 83       	std	Y+6, r25	; 0x06
    246a:	8d 83       	std	Y+5, r24	; 0x05
    246c:	3f c0       	rjmp	.+126    	; 0x24ec <LCD_sendChar+0x20c>
	else if (__tmp > 65535)
    246e:	6f 81       	ldd	r22, Y+7	; 0x07
    2470:	78 85       	ldd	r23, Y+8	; 0x08
    2472:	89 85       	ldd	r24, Y+9	; 0x09
    2474:	9a 85       	ldd	r25, Y+10	; 0x0a
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	3f ef       	ldi	r19, 0xFF	; 255
    247a:	4f e7       	ldi	r20, 0x7F	; 127
    247c:	57 e4       	ldi	r21, 0x47	; 71
    247e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2482:	18 16       	cp	r1, r24
    2484:	4c f5       	brge	.+82     	; 0x24d8 <LCD_sendChar+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2486:	6b 85       	ldd	r22, Y+11	; 0x0b
    2488:	7c 85       	ldd	r23, Y+12	; 0x0c
    248a:	8d 85       	ldd	r24, Y+13	; 0x0d
    248c:	9e 85       	ldd	r25, Y+14	; 0x0e
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	40 e2       	ldi	r20, 0x20	; 32
    2494:	51 e4       	ldi	r21, 0x41	; 65
    2496:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	bc 01       	movw	r22, r24
    24a0:	cd 01       	movw	r24, r26
    24a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	9e 83       	std	Y+6, r25	; 0x06
    24ac:	8d 83       	std	Y+5, r24	; 0x05
    24ae:	0f c0       	rjmp	.+30     	; 0x24ce <LCD_sendChar+0x1ee>
    24b0:	80 e9       	ldi	r24, 0x90	; 144
    24b2:	91 e0       	ldi	r25, 0x01	; 1
    24b4:	9c 83       	std	Y+4, r25	; 0x04
    24b6:	8b 83       	std	Y+3, r24	; 0x03
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	9c 81       	ldd	r25, Y+4	; 0x04
    24bc:	01 97       	sbiw	r24, 0x01	; 1
    24be:	f1 f7       	brne	.-4      	; 0x24bc <LCD_sendChar+0x1dc>
    24c0:	9c 83       	std	Y+4, r25	; 0x04
    24c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c4:	8d 81       	ldd	r24, Y+5	; 0x05
    24c6:	9e 81       	ldd	r25, Y+6	; 0x06
    24c8:	01 97       	sbiw	r24, 0x01	; 1
    24ca:	9e 83       	std	Y+6, r25	; 0x06
    24cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ce:	8d 81       	ldd	r24, Y+5	; 0x05
    24d0:	9e 81       	ldd	r25, Y+6	; 0x06
    24d2:	00 97       	sbiw	r24, 0x00	; 0
    24d4:	69 f7       	brne	.-38     	; 0x24b0 <LCD_sendChar+0x1d0>
    24d6:	14 c0       	rjmp	.+40     	; 0x2500 <LCD_sendChar+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d8:	6f 81       	ldd	r22, Y+7	; 0x07
    24da:	78 85       	ldd	r23, Y+8	; 0x08
    24dc:	89 85       	ldd	r24, Y+9	; 0x09
    24de:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	9e 83       	std	Y+6, r25	; 0x06
    24ea:	8d 83       	std	Y+5, r24	; 0x05
    24ec:	8d 81       	ldd	r24, Y+5	; 0x05
    24ee:	9e 81       	ldd	r25, Y+6	; 0x06
    24f0:	9a 83       	std	Y+2, r25	; 0x02
    24f2:	89 83       	std	Y+1, r24	; 0x01
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
    24f6:	9a 81       	ldd	r25, Y+2	; 0x02
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	f1 f7       	brne	.-4      	; 0x24f8 <LCD_sendChar+0x218>
    24fc:	9a 83       	std	Y+2, r25	; 0x02
    24fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_LOW);
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	63 e0       	ldi	r22, 0x03	; 3
    2504:	40 e0       	ldi	r20, 0x00	; 0
    2506:	0e 94 39 07 	call	0xe72	; 0xe72 <DIO_setPinValue>
}
    250a:	6d 96       	adiw	r28, 0x1d	; 29
    250c:	0f b6       	in	r0, 0x3f	; 63
    250e:	f8 94       	cli
    2510:	de bf       	out	0x3e, r29	; 62
    2512:	0f be       	out	0x3f, r0	; 63
    2514:	cd bf       	out	0x3d, r28	; 61
    2516:	cf 91       	pop	r28
    2518:	df 91       	pop	r29
    251a:	08 95       	ret

0000251c <LCD_writeString>:


void LCD_writeString(u8* String)
{
    251c:	df 93       	push	r29
    251e:	cf 93       	push	r28
    2520:	00 d0       	rcall	.+0      	; 0x2522 <LCD_writeString+0x6>
    2522:	0f 92       	push	r0
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
    2528:	9b 83       	std	Y+3, r25	; 0x03
    252a:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter=0;
    252c:	19 82       	std	Y+1, r1	; 0x01
    252e:	0e c0       	rjmp	.+28     	; 0x254c <LCD_writeString+0x30>
	while(String[counter]!='\0')
	{
		LCD_sendChar(String[counter]);
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	28 2f       	mov	r18, r24
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	8a 81       	ldd	r24, Y+2	; 0x02
    2538:	9b 81       	ldd	r25, Y+3	; 0x03
    253a:	fc 01       	movw	r30, r24
    253c:	e2 0f       	add	r30, r18
    253e:	f3 1f       	adc	r31, r19
    2540:	80 81       	ld	r24, Z
    2542:	0e 94 70 11 	call	0x22e0	; 0x22e0 <LCD_sendChar>
		++counter;
    2546:	89 81       	ldd	r24, Y+1	; 0x01
    2548:	8f 5f       	subi	r24, 0xFF	; 255
    254a:	89 83       	std	Y+1, r24	; 0x01


void LCD_writeString(u8* String)
{
	u8 counter=0;
	while(String[counter]!='\0')
    254c:	89 81       	ldd	r24, Y+1	; 0x01
    254e:	28 2f       	mov	r18, r24
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	8a 81       	ldd	r24, Y+2	; 0x02
    2554:	9b 81       	ldd	r25, Y+3	; 0x03
    2556:	fc 01       	movw	r30, r24
    2558:	e2 0f       	add	r30, r18
    255a:	f3 1f       	adc	r31, r19
    255c:	80 81       	ld	r24, Z
    255e:	88 23       	and	r24, r24
    2560:	39 f7       	brne	.-50     	; 0x2530 <LCD_writeString+0x14>
	{
		LCD_sendChar(String[counter]);
		++counter;
	}
}
    2562:	0f 90       	pop	r0
    2564:	0f 90       	pop	r0
    2566:	0f 90       	pop	r0
    2568:	cf 91       	pop	r28
    256a:	df 91       	pop	r29
    256c:	08 95       	ret

0000256e <LCD_clear>:


void LCD_clear(void)
{
    256e:	df 93       	push	r29
    2570:	cf 93       	push	r28
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
    2576:	2e 97       	sbiw	r28, 0x0e	; 14
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	f8 94       	cli
    257c:	de bf       	out	0x3e, r29	; 62
    257e:	0f be       	out	0x3f, r0	; 63
    2580:	cd bf       	out	0x3d, r28	; 61
	// Clear Display
	LCD_sendCmnd(0b00000001);
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_sendCmnd>
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	a0 e0       	ldi	r26, 0x00	; 0
    258e:	b0 e4       	ldi	r27, 0x40	; 64
    2590:	8b 87       	std	Y+11, r24	; 0x0b
    2592:	9c 87       	std	Y+12, r25	; 0x0c
    2594:	ad 87       	std	Y+13, r26	; 0x0d
    2596:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2598:	6b 85       	ldd	r22, Y+11	; 0x0b
    259a:	7c 85       	ldd	r23, Y+12	; 0x0c
    259c:	8d 85       	ldd	r24, Y+13	; 0x0d
    259e:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	4a e7       	ldi	r20, 0x7A	; 122
    25a6:	55 e4       	ldi	r21, 0x45	; 69
    25a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	8f 83       	std	Y+7, r24	; 0x07
    25b2:	98 87       	std	Y+8, r25	; 0x08
    25b4:	a9 87       	std	Y+9, r26	; 0x09
    25b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25b8:	6f 81       	ldd	r22, Y+7	; 0x07
    25ba:	78 85       	ldd	r23, Y+8	; 0x08
    25bc:	89 85       	ldd	r24, Y+9	; 0x09
    25be:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	40 e8       	ldi	r20, 0x80	; 128
    25c6:	5f e3       	ldi	r21, 0x3F	; 63
    25c8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    25cc:	88 23       	and	r24, r24
    25ce:	2c f4       	brge	.+10     	; 0x25da <LCD_clear+0x6c>
		__ticks = 1;
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	9e 83       	std	Y+6, r25	; 0x06
    25d6:	8d 83       	std	Y+5, r24	; 0x05
    25d8:	3f c0       	rjmp	.+126    	; 0x2658 <LCD_clear+0xea>
	else if (__tmp > 65535)
    25da:	6f 81       	ldd	r22, Y+7	; 0x07
    25dc:	78 85       	ldd	r23, Y+8	; 0x08
    25de:	89 85       	ldd	r24, Y+9	; 0x09
    25e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	3f ef       	ldi	r19, 0xFF	; 255
    25e6:	4f e7       	ldi	r20, 0x7F	; 127
    25e8:	57 e4       	ldi	r21, 0x47	; 71
    25ea:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    25ee:	18 16       	cp	r1, r24
    25f0:	4c f5       	brge	.+82     	; 0x2644 <LCD_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	40 e2       	ldi	r20, 0x20	; 32
    2600:	51 e4       	ldi	r21, 0x41	; 65
    2602:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2606:	dc 01       	movw	r26, r24
    2608:	cb 01       	movw	r24, r22
    260a:	bc 01       	movw	r22, r24
    260c:	cd 01       	movw	r24, r26
    260e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	9e 83       	std	Y+6, r25	; 0x06
    2618:	8d 83       	std	Y+5, r24	; 0x05
    261a:	0f c0       	rjmp	.+30     	; 0x263a <LCD_clear+0xcc>
    261c:	80 e9       	ldi	r24, 0x90	; 144
    261e:	91 e0       	ldi	r25, 0x01	; 1
    2620:	9c 83       	std	Y+4, r25	; 0x04
    2622:	8b 83       	std	Y+3, r24	; 0x03
    2624:	8b 81       	ldd	r24, Y+3	; 0x03
    2626:	9c 81       	ldd	r25, Y+4	; 0x04
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	f1 f7       	brne	.-4      	; 0x2628 <LCD_clear+0xba>
    262c:	9c 83       	std	Y+4, r25	; 0x04
    262e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2630:	8d 81       	ldd	r24, Y+5	; 0x05
    2632:	9e 81       	ldd	r25, Y+6	; 0x06
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	9e 83       	std	Y+6, r25	; 0x06
    2638:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263a:	8d 81       	ldd	r24, Y+5	; 0x05
    263c:	9e 81       	ldd	r25, Y+6	; 0x06
    263e:	00 97       	sbiw	r24, 0x00	; 0
    2640:	69 f7       	brne	.-38     	; 0x261c <LCD_clear+0xae>
    2642:	14 c0       	rjmp	.+40     	; 0x266c <LCD_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2644:	6f 81       	ldd	r22, Y+7	; 0x07
    2646:	78 85       	ldd	r23, Y+8	; 0x08
    2648:	89 85       	ldd	r24, Y+9	; 0x09
    264a:	9a 85       	ldd	r25, Y+10	; 0x0a
    264c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	9e 83       	std	Y+6, r25	; 0x06
    2656:	8d 83       	std	Y+5, r24	; 0x05
    2658:	8d 81       	ldd	r24, Y+5	; 0x05
    265a:	9e 81       	ldd	r25, Y+6	; 0x06
    265c:	9a 83       	std	Y+2, r25	; 0x02
    265e:	89 83       	std	Y+1, r24	; 0x01
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	9a 81       	ldd	r25, Y+2	; 0x02
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	f1 f7       	brne	.-4      	; 0x2664 <LCD_clear+0xf6>
    2668:	9a 83       	std	Y+2, r25	; 0x02
    266a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    266c:	2e 96       	adiw	r28, 0x0e	; 14
    266e:	0f b6       	in	r0, 0x3f	; 63
    2670:	f8 94       	cli
    2672:	de bf       	out	0x3e, r29	; 62
    2674:	0f be       	out	0x3f, r0	; 63
    2676:	cd bf       	out	0x3d, r28	; 61
    2678:	cf 91       	pop	r28
    267a:	df 91       	pop	r29
    267c:	08 95       	ret

0000267e <private_writeHalfPort>:


static void private_writeHalfPort(u8 value)
{
    267e:	df 93       	push	r29
    2680:	cf 93       	push	r28
    2682:	0f 92       	push	r0
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
    2688:	89 83       	std	Y+1, r24	; 0x01
	if(GET_BIT(value,0) == 1)
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	88 2f       	mov	r24, r24
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	81 70       	andi	r24, 0x01	; 1
    2692:	90 70       	andi	r25, 0x00	; 0
    2694:	88 23       	and	r24, r24
    2696:	31 f0       	breq	.+12     	; 0x26a4 <private_writeHalfPort+0x26>
	{
		DIO_setPinValue(LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_HIGH);
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	64 e0       	ldi	r22, 0x04	; 4
    269c:	41 e0       	ldi	r20, 0x01	; 1
    269e:	0e 94 39 07 	call	0xe72	; 0xe72 <DIO_setPinValue>
    26a2:	05 c0       	rjmp	.+10     	; 0x26ae <private_writeHalfPort+0x30>
	}
	else
	{
		DIO_setPinValue(LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_LOW);
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	64 e0       	ldi	r22, 0x04	; 4
    26a8:	40 e0       	ldi	r20, 0x00	; 0
    26aa:	0e 94 39 07 	call	0xe72	; 0xe72 <DIO_setPinValue>
	}
	
	if(GET_BIT(value,1) == 1)
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	86 95       	lsr	r24
    26b2:	88 2f       	mov	r24, r24
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	81 70       	andi	r24, 0x01	; 1
    26b8:	90 70       	andi	r25, 0x00	; 0
    26ba:	88 23       	and	r24, r24
    26bc:	31 f0       	breq	.+12     	; 0x26ca <private_writeHalfPort+0x4c>
	{
		DIO_setPinValue(LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_HIGH);
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	65 e0       	ldi	r22, 0x05	; 5
    26c2:	41 e0       	ldi	r20, 0x01	; 1
    26c4:	0e 94 39 07 	call	0xe72	; 0xe72 <DIO_setPinValue>
    26c8:	05 c0       	rjmp	.+10     	; 0x26d4 <private_writeHalfPort+0x56>
	}
	else
	{
		DIO_setPinValue(LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_LOW);
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	65 e0       	ldi	r22, 0x05	; 5
    26ce:	40 e0       	ldi	r20, 0x00	; 0
    26d0:	0e 94 39 07 	call	0xe72	; 0xe72 <DIO_setPinValue>
	}
	
	if(GET_BIT(value,2) == 1)
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
    26d6:	86 95       	lsr	r24
    26d8:	86 95       	lsr	r24
    26da:	88 2f       	mov	r24, r24
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	81 70       	andi	r24, 0x01	; 1
    26e0:	90 70       	andi	r25, 0x00	; 0
    26e2:	88 23       	and	r24, r24
    26e4:	31 f0       	breq	.+12     	; 0x26f2 <private_writeHalfPort+0x74>
	{
		DIO_setPinValue(LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_HIGH);
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	66 e0       	ldi	r22, 0x06	; 6
    26ea:	41 e0       	ldi	r20, 0x01	; 1
    26ec:	0e 94 39 07 	call	0xe72	; 0xe72 <DIO_setPinValue>
    26f0:	05 c0       	rjmp	.+10     	; 0x26fc <private_writeHalfPort+0x7e>
	}
	else
	{
		DIO_setPinValue(LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_LOW);
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	66 e0       	ldi	r22, 0x06	; 6
    26f6:	40 e0       	ldi	r20, 0x00	; 0
    26f8:	0e 94 39 07 	call	0xe72	; 0xe72 <DIO_setPinValue>
	}
	
	if(GET_BIT(value,3) == 1)
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
    26fe:	86 95       	lsr	r24
    2700:	86 95       	lsr	r24
    2702:	86 95       	lsr	r24
    2704:	88 2f       	mov	r24, r24
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	81 70       	andi	r24, 0x01	; 1
    270a:	90 70       	andi	r25, 0x00	; 0
    270c:	88 23       	and	r24, r24
    270e:	31 f0       	breq	.+12     	; 0x271c <private_writeHalfPort+0x9e>
	{
		DIO_setPinValue(LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_HIGH);
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	67 e0       	ldi	r22, 0x07	; 7
    2714:	41 e0       	ldi	r20, 0x01	; 1
    2716:	0e 94 39 07 	call	0xe72	; 0xe72 <DIO_setPinValue>
    271a:	05 c0       	rjmp	.+10     	; 0x2726 <private_writeHalfPort+0xa8>
	}
	else
	{
		DIO_setPinValue(LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_LOW);
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	67 e0       	ldi	r22, 0x07	; 7
    2720:	40 e0       	ldi	r20, 0x00	; 0
    2722:	0e 94 39 07 	call	0xe72	; 0xe72 <DIO_setPinValue>
	}
    2726:	0f 90       	pop	r0
    2728:	cf 91       	pop	r28
    272a:	df 91       	pop	r29
    272c:	08 95       	ret

0000272e <TWI_initMaster>:
#include "TWI_interface.h"
#include "TWI_private.h"


void TWI_initMaster(void)
{
    272e:	df 93       	push	r29
    2730:	cf 93       	push	r28
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
	//prescaler = 1 set freq = 400khz
	CLR_BIT(TWSR,TWPS0);
    2736:	a1 e2       	ldi	r26, 0x21	; 33
    2738:	b0 e0       	ldi	r27, 0x00	; 0
    273a:	e1 e2       	ldi	r30, 0x21	; 33
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	80 81       	ld	r24, Z
    2740:	8e 7f       	andi	r24, 0xFE	; 254
    2742:	8c 93       	st	X, r24
	CLR_BIT(TWSR,TWPS1);
    2744:	a1 e2       	ldi	r26, 0x21	; 33
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	e1 e2       	ldi	r30, 0x21	; 33
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	8d 7f       	andi	r24, 0xFD	; 253
    2750:	8c 93       	st	X, r24
	TWBR = 12;
    2752:	e0 e2       	ldi	r30, 0x20	; 32
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	8c e0       	ldi	r24, 0x0C	; 12
    2758:	80 83       	st	Z, r24
	
	// enable ack that check that each ack hae certain value from the data sheet the ack help mecheck that each step and part in the frame is succefly send or recieved but i must enable this bit bit to allow the micro cont to send this ack// Enable ACK
	SET_BIT(TWCR,TWEA);
    275a:	a6 e5       	ldi	r26, 0x56	; 86
    275c:	b0 e0       	ldi	r27, 0x00	; 0
    275e:	e6 e5       	ldi	r30, 0x56	; 86
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	80 81       	ld	r24, Z
    2764:	80 64       	ori	r24, 0x40	; 64
    2766:	8c 93       	st	X, r24
	
	// Enable TWI Peripheral
	SET_BIT(TWCR,TWEN);
    2768:	a6 e5       	ldi	r26, 0x56	; 86
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	e6 e5       	ldi	r30, 0x56	; 86
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	80 81       	ld	r24, Z
    2772:	84 60       	ori	r24, 0x04	; 4
    2774:	8c 93       	st	X, r24
}
    2776:	cf 91       	pop	r28
    2778:	df 91       	pop	r29
    277a:	08 95       	ret

0000277c <TWI_sendStartCondition>:


void TWI_sendStartCondition(void)
{
    277c:	df 93       	push	r29
    277e:	cf 93       	push	r28
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
	// Request Start Condition
	SET_BIT(TWCR,TWSTA);
    2784:	a6 e5       	ldi	r26, 0x56	; 86
    2786:	b0 e0       	ldi	r27, 0x00	; 0
    2788:	e6 e5       	ldi	r30, 0x56	; 86
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	80 81       	ld	r24, Z
    278e:	80 62       	ori	r24, 0x20	; 32
    2790:	8c 93       	st	X, r24
	
	//CLEAR FLAG TO START CURRENT JOB (THIS IS THE FLAG THAT ALWAYS GET RAISED AFTER NEARLY EVERY THING AND I CANNOT DO ANY THING UNTIL I LOW IT )
	SET_BIT(TWCR,TWINT);
    2792:	a6 e5       	ldi	r26, 0x56	; 86
    2794:	b0 e0       	ldi	r27, 0x00	; 0
    2796:	e6 e5       	ldi	r30, 0x56	; 86
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	80 68       	ori	r24, 0x80	; 128
    279e:	8c 93       	st	X, r24
	
	 //BUSY WAIT FOR THE FLAG TO ASSURE THAT MY START REQ IS DONE
	while(0 == GET_BIT(TWCR,TWINT));
    27a0:	e6 e5       	ldi	r30, 0x56	; 86
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
    27a4:	80 81       	ld	r24, Z
    27a6:	88 23       	and	r24, r24
    27a8:	dc f7       	brge	.-10     	; 0x27a0 <TWI_sendStartCondition+0x24>
	
	//the acknowlgment to make sure that it is positive compare it with the vlu in the data sheet for each acknowlgment in this case 0X08
	while(TWI_STATUS_VALUE != TWI_START_CONDITION_ACK);
    27aa:	e1 e2       	ldi	r30, 0x21	; 33
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	80 81       	ld	r24, Z
    27b0:	88 2f       	mov	r24, r24
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	88 7f       	andi	r24, 0xF8	; 248
    27b6:	90 70       	andi	r25, 0x00	; 0
    27b8:	88 30       	cpi	r24, 0x08	; 8
    27ba:	91 05       	cpc	r25, r1
    27bc:	b1 f7       	brne	.-20     	; 0x27aa <TWI_sendStartCondition+0x2e>
}
    27be:	cf 91       	pop	r28
    27c0:	df 91       	pop	r29
    27c2:	08 95       	ret

000027c4 <TWI_sendRepStartCondition>:

//the functionthat allow master to stay on the bus it has diff status value thats why i made a separate func for it
void TWI_sendRepStartCondition(void)
{
    27c4:	df 93       	push	r29
    27c6:	cf 93       	push	r28
    27c8:	cd b7       	in	r28, 0x3d	; 61
    27ca:	de b7       	in	r29, 0x3e	; 62
	// Request Start Condition
	SET_BIT(TWCR,TWSTA);
    27cc:	a6 e5       	ldi	r26, 0x56	; 86
    27ce:	b0 e0       	ldi	r27, 0x00	; 0
    27d0:	e6 e5       	ldi	r30, 0x56	; 86
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	80 62       	ori	r24, 0x20	; 32
    27d8:	8c 93       	st	X, r24
	
	//CLEAR FLAG TO START CURRENT JOB (THIS IS THE FLAG THAT ALWAYS GET RAISED AFTER NEARLY EVERY THING AND I CANNOT DO ANY THING UNTIL I LOW IT )
	SET_BIT(TWCR,TWINT);
    27da:	a6 e5       	ldi	r26, 0x56	; 86
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	e6 e5       	ldi	r30, 0x56	; 86
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	80 68       	ori	r24, 0x80	; 128
    27e6:	8c 93       	st	X, r24
	
	//BUSY WAIT FOR THE FLAG TO ASSURE THAT MY START REQ IS DONE
	while(0 == GET_BIT(TWCR,TWINT));
    27e8:	e6 e5       	ldi	r30, 0x56	; 86
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	80 81       	ld	r24, Z
    27ee:	88 23       	and	r24, r24
    27f0:	dc f7       	brge	.-10     	; 0x27e8 <TWI_sendRepStartCondition+0x24>
	
	 //the acknowlgment to make sure that it is positive compare it with the vlu in the data sheet for each acknowlgment in this case 0X10
	while(TWI_STATUS_VALUE != TWI_REP_START_CONDITION_ACK);
    27f2:	e1 e2       	ldi	r30, 0x21	; 33
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 81       	ld	r24, Z
    27f8:	88 2f       	mov	r24, r24
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	88 7f       	andi	r24, 0xF8	; 248
    27fe:	90 70       	andi	r25, 0x00	; 0
    2800:	80 31       	cpi	r24, 0x10	; 16
    2802:	91 05       	cpc	r25, r1
    2804:	b1 f7       	brne	.-20     	; 0x27f2 <TWI_sendRepStartCondition+0x2e>
}
    2806:	cf 91       	pop	r28
    2808:	df 91       	pop	r29
    280a:	08 95       	ret

0000280c <TWI_sendStopCondition>:


void TWI_sendStopCondition(void)
{
    280c:	df 93       	push	r29
    280e:	cf 93       	push	r28
    2810:	cd b7       	in	r28, 0x3d	; 61
    2812:	de b7       	in	r29, 0x3e	; 62
	// Request Stop Condition
	SET_BIT(TWCR,TWSTO);
    2814:	a6 e5       	ldi	r26, 0x56	; 86
    2816:	b0 e0       	ldi	r27, 0x00	; 0
    2818:	e6 e5       	ldi	r30, 0x56	; 86
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	80 81       	ld	r24, Z
    281e:	80 61       	ori	r24, 0x10	; 16
    2820:	8c 93       	st	X, r24
	
	 //clr flag to start current job (no need for blocking since stop is the last thing in the frame)
	SET_BIT(TWCR,TWINT);
    2822:	a6 e5       	ldi	r26, 0x56	; 86
    2824:	b0 e0       	ldi	r27, 0x00	; 0
    2826:	e6 e5       	ldi	r30, 0x56	; 86
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	80 81       	ld	r24, Z
    282c:	80 68       	ori	r24, 0x80	; 128
    282e:	8c 93       	st	X, r24
}
    2830:	cf 91       	pop	r28
    2832:	df 91       	pop	r29
    2834:	08 95       	ret

00002836 <TWI_sendSlaveAddWithWrite>:

//THE MASTER CALL IT AND GIVE IT ADDRESS
void TWI_sendSlaveAddWithWrite(u8 slaveAdd)
{
    2836:	df 93       	push	r29
    2838:	cf 93       	push	r28
    283a:	0f 92       	push	r0
    283c:	cd b7       	in	r28, 0x3d	; 61
    283e:	de b7       	in	r29, 0x3e	; 62
    2840:	89 83       	std	Y+1, r24	; 0x01
	if(slaveAdd<128)
    2842:	89 81       	ldd	r24, Y+1	; 0x01
    2844:	88 23       	and	r24, r24
    2846:	4c f1       	brlt	.+82     	; 0x289a <TWI_sendSlaveAddWithWrite+0x64>
	{
		TWDR = slaveAdd<<1;//SINCE THE ADDRESS IS 7 BIT
    2848:	e3 e2       	ldi	r30, 0x23	; 35
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	88 0f       	add	r24, r24
    2850:	80 83       	st	Z, r24
		
		// Select read operation //THE 8TH BIT AFTER DATA
		CLR_BIT(TWDR,0);
    2852:	a3 e2       	ldi	r26, 0x23	; 35
    2854:	b0 e0       	ldi	r27, 0x00	; 0
    2856:	e3 e2       	ldi	r30, 0x23	; 35
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	80 81       	ld	r24, Z
    285c:	8e 7f       	andi	r24, 0xFE	; 254
    285e:	8c 93       	st	X, r24
		
		// Clear SC bit//CLEAR START CONDITION BIT (CONSTRAIN IN THE DATA SHEET)
		CLR_BIT(TWCR,TWSTA);
    2860:	a6 e5       	ldi	r26, 0x56	; 86
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	e6 e5       	ldi	r30, 0x56	; 86
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	8f 7d       	andi	r24, 0xDF	; 223
    286c:	8c 93       	st	X, r24
		
		// Clear flag to start current job
	    SET_BIT(TWCR,TWINT);
    286e:	a6 e5       	ldi	r26, 0x56	; 86
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	e6 e5       	ldi	r30, 0x56	; 86
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	80 68       	ori	r24, 0x80	; 128
    287a:	8c 93       	st	X, r24
	    
	    // Busy Wait for the flag 
	    while(0 == GET_BIT(TWCR,TWINT));//TO BE SURE SLAVE ADDRESS IS SENT
    287c:	e6 e5       	ldi	r30, 0x56	; 86
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	80 81       	ld	r24, Z
    2882:	88 23       	and	r24, r24
    2884:	dc f7       	brge	.-10     	; 0x287c <TWI_sendSlaveAddWithWrite+0x46>
		
		// Check ACK = Master transmit ( slave address + Write request )
		while(TWI_STATUS_VALUE != TWI_SLAVE_ADDRESS_WRITE_ACK);
    2886:	e1 e2       	ldi	r30, 0x21	; 33
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	80 81       	ld	r24, Z
    288c:	88 2f       	mov	r24, r24
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	88 7f       	andi	r24, 0xF8	; 248
    2892:	90 70       	andi	r25, 0x00	; 0
    2894:	88 31       	cpi	r24, 0x18	; 24
    2896:	91 05       	cpc	r25, r1
    2898:	b1 f7       	brne	.-20     	; 0x2886 <TWI_sendSlaveAddWithWrite+0x50>
	}
}
    289a:	0f 90       	pop	r0
    289c:	cf 91       	pop	r28
    289e:	df 91       	pop	r29
    28a0:	08 95       	ret

000028a2 <TWI_sendSlaveAddWithRead>:


void TWI_sendSlaveAddWithRead(u8 slaveAdd)
{
    28a2:	df 93       	push	r29
    28a4:	cf 93       	push	r28
    28a6:	0f 92       	push	r0
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
    28ac:	89 83       	std	Y+1, r24	; 0x01
	if(slaveAdd<128)
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	88 23       	and	r24, r24
    28b2:	4c f1       	brlt	.+82     	; 0x2906 <TWI_sendSlaveAddWithRead+0x64>
	{
		TWDR = slaveAdd<<1;
    28b4:	e3 e2       	ldi	r30, 0x23	; 35
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	88 0f       	add	r24, r24
    28bc:	80 83       	st	Z, r24
		
		// Select read operation
		SET_BIT(TWDR,0);
    28be:	a3 e2       	ldi	r26, 0x23	; 35
    28c0:	b0 e0       	ldi	r27, 0x00	; 0
    28c2:	e3 e2       	ldi	r30, 0x23	; 35
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	80 81       	ld	r24, Z
    28c8:	81 60       	ori	r24, 0x01	; 1
    28ca:	8c 93       	st	X, r24
		
		// Clear SC bit
		CLR_BIT(TWCR,TWSTA);
    28cc:	a6 e5       	ldi	r26, 0x56	; 86
    28ce:	b0 e0       	ldi	r27, 0x00	; 0
    28d0:	e6 e5       	ldi	r30, 0x56	; 86
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	80 81       	ld	r24, Z
    28d6:	8f 7d       	andi	r24, 0xDF	; 223
    28d8:	8c 93       	st	X, r24
		
		// Clear flag to start current job
	    SET_BIT(TWCR,TWINT);
    28da:	a6 e5       	ldi	r26, 0x56	; 86
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	e6 e5       	ldi	r30, 0x56	; 86
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	80 81       	ld	r24, Z
    28e4:	80 68       	ori	r24, 0x80	; 128
    28e6:	8c 93       	st	X, r24
	    
	    // Busy Wait for the flag 
	    while(0 == GET_BIT(TWCR,TWINT));
    28e8:	e6 e5       	ldi	r30, 0x56	; 86
    28ea:	f0 e0       	ldi	r31, 0x00	; 0
    28ec:	80 81       	ld	r24, Z
    28ee:	88 23       	and	r24, r24
    28f0:	dc f7       	brge	.-10     	; 0x28e8 <TWI_sendSlaveAddWithRead+0x46>
		
		 // Check ACK = Master transmit ( slave address + Read request ) ACK
		while(TWI_STATUS_VALUE != TWI_SLAVE_ADDRESS_READ_ACK);
    28f2:	e1 e2       	ldi	r30, 0x21	; 33
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	80 81       	ld	r24, Z
    28f8:	88 2f       	mov	r24, r24
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	88 7f       	andi	r24, 0xF8	; 248
    28fe:	90 70       	andi	r25, 0x00	; 0
    2900:	80 34       	cpi	r24, 0x40	; 64
    2902:	91 05       	cpc	r25, r1
    2904:	b1 f7       	brne	.-20     	; 0x28f2 <TWI_sendSlaveAddWithRead+0x50>
	}
}
    2906:	0f 90       	pop	r0
    2908:	cf 91       	pop	r28
    290a:	df 91       	pop	r29
    290c:	08 95       	ret

0000290e <TWI_sendMasterDataByte>:


void TWI_sendMasterDataByte(u8 TxData)
{
    290e:	df 93       	push	r29
    2910:	cf 93       	push	r28
    2912:	0f 92       	push	r0
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
    2918:	89 83       	std	Y+1, r24	; 0x01
	// Write Data into data register
	TWDR = TxData;
    291a:	e3 e2       	ldi	r30, 0x23	; 35
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	89 81       	ldd	r24, Y+1	; 0x01
    2920:	80 83       	st	Z, r24
	
	// Clear flag to start current job
	SET_BIT(TWCR,TWINT);
    2922:	a6 e5       	ldi	r26, 0x56	; 86
    2924:	b0 e0       	ldi	r27, 0x00	; 0
    2926:	e6 e5       	ldi	r30, 0x56	; 86
    2928:	f0 e0       	ldi	r31, 0x00	; 0
    292a:	80 81       	ld	r24, Z
    292c:	80 68       	ori	r24, 0x80	; 128
    292e:	8c 93       	st	X, r24
	
	// Busy Wait for the flag 
	while(0 == GET_BIT(TWCR,TWINT));
    2930:	e6 e5       	ldi	r30, 0x56	; 86
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	80 81       	ld	r24, Z
    2936:	88 23       	and	r24, r24
    2938:	dc f7       	brge	.-10     	; 0x2930 <TWI_sendMasterDataByte+0x22>
	
	// Check ACK = Master transmit data ACK
	while(TWI_STATUS_VALUE != TWI_MASTER_DATA_TRANSMIT_ACK);
    293a:	e1 e2       	ldi	r30, 0x21	; 33
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	80 81       	ld	r24, Z
    2940:	88 2f       	mov	r24, r24
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	88 7f       	andi	r24, 0xF8	; 248
    2946:	90 70       	andi	r25, 0x00	; 0
    2948:	88 32       	cpi	r24, 0x28	; 40
    294a:	91 05       	cpc	r25, r1
    294c:	b1 f7       	brne	.-20     	; 0x293a <TWI_sendMasterDataByte+0x2c>
}
    294e:	0f 90       	pop	r0
    2950:	cf 91       	pop	r28
    2952:	df 91       	pop	r29
    2954:	08 95       	ret

00002956 <TWI_receiveMasterDataByte>:


void TWI_receiveMasterDataByte(u8* RxData)
{
    2956:	df 93       	push	r29
    2958:	cf 93       	push	r28
    295a:	00 d0       	rcall	.+0      	; 0x295c <TWI_receiveMasterDataByte+0x6>
    295c:	cd b7       	in	r28, 0x3d	; 61
    295e:	de b7       	in	r29, 0x3e	; 62
    2960:	9a 83       	std	Y+2, r25	; 0x02
    2962:	89 83       	std	Y+1, r24	; 0x01
	if(RxData != NULL)
    2964:	89 81       	ldd	r24, Y+1	; 0x01
    2966:	9a 81       	ldd	r25, Y+2	; 0x02
    2968:	00 97       	sbiw	r24, 0x00	; 0
    296a:	e1 f0       	breq	.+56     	; 0x29a4 <TWI_receiveMasterDataByte+0x4e>
	{
		// Clear flag to start current job
	    SET_BIT(TWCR,TWINT);
    296c:	a6 e5       	ldi	r26, 0x56	; 86
    296e:	b0 e0       	ldi	r27, 0x00	; 0
    2970:	e6 e5       	ldi	r30, 0x56	; 86
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	80 81       	ld	r24, Z
    2976:	80 68       	ori	r24, 0x80	; 128
    2978:	8c 93       	st	X, r24
		
		// Busy Wait for the flag 
	    while(0 == GET_BIT(TWCR,TWINT));
    297a:	e6 e5       	ldi	r30, 0x56	; 86
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	80 81       	ld	r24, Z
    2980:	88 23       	and	r24, r24
    2982:	dc f7       	brge	.-10     	; 0x297a <TWI_receiveMasterDataByte+0x24>
		
		// Check ACK = Master received data with ACK
		while(TWI_STATUS_VALUE != TWI_MASTER_DATA_RECIEVE_ACK);
    2984:	e1 e2       	ldi	r30, 0x21	; 33
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	80 81       	ld	r24, Z
    298a:	88 2f       	mov	r24, r24
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	88 7f       	andi	r24, 0xF8	; 248
    2990:	90 70       	andi	r25, 0x00	; 0
    2992:	80 35       	cpi	r24, 0x50	; 80
    2994:	91 05       	cpc	r25, r1
    2996:	b1 f7       	brne	.-20     	; 0x2984 <TWI_receiveMasterDataByte+0x2e>
		
		// Read Data from data register
		*RxData = TWDR;
    2998:	e3 e2       	ldi	r30, 0x23	; 35
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	80 81       	ld	r24, Z
    299e:	e9 81       	ldd	r30, Y+1	; 0x01
    29a0:	fa 81       	ldd	r31, Y+2	; 0x02
    29a2:	80 83       	st	Z, r24
	}
}
    29a4:	0f 90       	pop	r0
    29a6:	0f 90       	pop	r0
    29a8:	cf 91       	pop	r28
    29aa:	df 91       	pop	r29
    29ac:	08 95       	ret

000029ae <main>:
#include "EEPROM_interface.h"
#include "LCD_interface.h"


int main(void)
{
    29ae:	df 93       	push	r29
    29b0:	cf 93       	push	r28
    29b2:	0f 92       	push	r0
    29b4:	cd b7       	in	r28, 0x3d	; 61
    29b6:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	u8 data;
	LCD_init();
    29b8:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_init>
	EEPROM_init();
    29bc:	0e 94 57 0b 	call	0x16ae	; 0x16ae <EEPROM_init>
	EEPROM_writeByte(200,'D');
    29c0:	88 ec       	ldi	r24, 0xC8	; 200
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	64 e4       	ldi	r22, 0x44	; 68
    29c6:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <EEPROM_writeByte>
	EEPROM_readByte(200,&data);
    29ca:	88 ec       	ldi	r24, 0xC8	; 200
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	9e 01       	movw	r18, r28
    29d0:	2f 5f       	subi	r18, 0xFF	; 255
    29d2:	3f 4f       	sbci	r19, 0xFF	; 255
    29d4:	b9 01       	movw	r22, r18
    29d6:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <EEPROM_readByte>
	LCD_sendChar(data);
    29da:	89 81       	ldd	r24, Y+1	; 0x01
    29dc:	0e 94 70 11 	call	0x22e0	; 0x22e0 <LCD_sendChar>
    29e0:	ff cf       	rjmp	.-2      	; 0x29e0 <main+0x32>

000029e2 <__prologue_saves__>:
    29e2:	2f 92       	push	r2
    29e4:	3f 92       	push	r3
    29e6:	4f 92       	push	r4
    29e8:	5f 92       	push	r5
    29ea:	6f 92       	push	r6
    29ec:	7f 92       	push	r7
    29ee:	8f 92       	push	r8
    29f0:	9f 92       	push	r9
    29f2:	af 92       	push	r10
    29f4:	bf 92       	push	r11
    29f6:	cf 92       	push	r12
    29f8:	df 92       	push	r13
    29fa:	ef 92       	push	r14
    29fc:	ff 92       	push	r15
    29fe:	0f 93       	push	r16
    2a00:	1f 93       	push	r17
    2a02:	cf 93       	push	r28
    2a04:	df 93       	push	r29
    2a06:	cd b7       	in	r28, 0x3d	; 61
    2a08:	de b7       	in	r29, 0x3e	; 62
    2a0a:	ca 1b       	sub	r28, r26
    2a0c:	db 0b       	sbc	r29, r27
    2a0e:	0f b6       	in	r0, 0x3f	; 63
    2a10:	f8 94       	cli
    2a12:	de bf       	out	0x3e, r29	; 62
    2a14:	0f be       	out	0x3f, r0	; 63
    2a16:	cd bf       	out	0x3d, r28	; 61
    2a18:	09 94       	ijmp

00002a1a <__epilogue_restores__>:
    2a1a:	2a 88       	ldd	r2, Y+18	; 0x12
    2a1c:	39 88       	ldd	r3, Y+17	; 0x11
    2a1e:	48 88       	ldd	r4, Y+16	; 0x10
    2a20:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a22:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a24:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a26:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a28:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a2a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a2c:	b9 84       	ldd	r11, Y+9	; 0x09
    2a2e:	c8 84       	ldd	r12, Y+8	; 0x08
    2a30:	df 80       	ldd	r13, Y+7	; 0x07
    2a32:	ee 80       	ldd	r14, Y+6	; 0x06
    2a34:	fd 80       	ldd	r15, Y+5	; 0x05
    2a36:	0c 81       	ldd	r16, Y+4	; 0x04
    2a38:	1b 81       	ldd	r17, Y+3	; 0x03
    2a3a:	aa 81       	ldd	r26, Y+2	; 0x02
    2a3c:	b9 81       	ldd	r27, Y+1	; 0x01
    2a3e:	ce 0f       	add	r28, r30
    2a40:	d1 1d       	adc	r29, r1
    2a42:	0f b6       	in	r0, 0x3f	; 63
    2a44:	f8 94       	cli
    2a46:	de bf       	out	0x3e, r29	; 62
    2a48:	0f be       	out	0x3f, r0	; 63
    2a4a:	cd bf       	out	0x3d, r28	; 61
    2a4c:	ed 01       	movw	r28, r26
    2a4e:	08 95       	ret

00002a50 <_exit>:
    2a50:	f8 94       	cli

00002a52 <__stop_program>:
    2a52:	ff cf       	rjmp	.-2      	; 0x2a52 <__stop_program>
