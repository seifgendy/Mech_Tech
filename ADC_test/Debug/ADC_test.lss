
ADC_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b26  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00002b26  00002b9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001c14  00000000  00000000  00002bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ae5  00000000  00000000  000047c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000052a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00005409  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00005598  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  000075dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  000086de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00009660  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  000097e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00009aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a330  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 ad 13 	call	0x275a	; 0x275a <main>
      7a:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ac e6       	ldi	r26, 0x6C	; 108
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8c e6       	ldi	r24, 0x6C	; 108
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 62 15 	jmp	0x2ac4	; 0x2ac4 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6c e6       	ldi	r22, 0x6C	; 108
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 7e 15 	jmp	0x2afc	; 0x2afc <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <ADC_init>:
#include "ADC_interface.h"
#include "ADC_private.h"


void ADC_init(u8 referenceVolt)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	00 d0       	rcall	.+0      	; 0xc94 <ADC_init+0x6>
     c94:	0f 92       	push	r0
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	89 83       	std	Y+1, r24	; 0x01
	switch(referenceVolt)
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	3b 83       	std	Y+3, r19	; 0x03
     ca4:	2a 83       	std	Y+2, r18	; 0x02
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	9b 81       	ldd	r25, Y+3	; 0x03
     caa:	82 30       	cpi	r24, 0x02	; 2
     cac:	91 05       	cpc	r25, r1
     cae:	c9 f0       	breq	.+50     	; 0xce2 <ADC_init+0x54>
     cb0:	2a 81       	ldd	r18, Y+2	; 0x02
     cb2:	3b 81       	ldd	r19, Y+3	; 0x03
     cb4:	23 30       	cpi	r18, 0x03	; 3
     cb6:	31 05       	cpc	r19, r1
     cb8:	19 f1       	breq	.+70     	; 0xd00 <ADC_init+0x72>
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	9b 81       	ldd	r25, Y+3	; 0x03
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	91 05       	cpc	r25, r1
     cc2:	61 f5       	brne	.+88     	; 0xd1c <ADC_init+0x8e>
	{
		case ADC_REFERENCE_AVCC:
		// Select Vref = AVCC
	     SET_BIT(ADMUX,REFS0);
     cc4:	a7 e2       	ldi	r26, 0x27	; 39
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e7 e2       	ldi	r30, 0x27	; 39
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	80 64       	ori	r24, 0x40	; 64
     cd0:	8c 93       	st	X, r24
	     CLR_BIT(ADMUX,REFS1);
     cd2:	a7 e2       	ldi	r26, 0x27	; 39
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e7 e2       	ldi	r30, 0x27	; 39
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	8f 77       	andi	r24, 0x7F	; 127
     cde:	8c 93       	st	X, r24
     ce0:	1d c0       	rjmp	.+58     	; 0xd1c <ADC_init+0x8e>
		break;
		
		case ADC_REFERENCE_AREF:
		// Select Vref = AREF
	     CLR_BIT(ADMUX,REFS0);
     ce2:	a7 e2       	ldi	r26, 0x27	; 39
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e7 e2       	ldi	r30, 0x27	; 39
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	8f 7b       	andi	r24, 0xBF	; 191
     cee:	8c 93       	st	X, r24
	     CLR_BIT(ADMUX,REFS1);
     cf0:	a7 e2       	ldi	r26, 0x27	; 39
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e7 e2       	ldi	r30, 0x27	; 39
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	8f 77       	andi	r24, 0x7F	; 127
     cfc:	8c 93       	st	X, r24
     cfe:	0e c0       	rjmp	.+28     	; 0xd1c <ADC_init+0x8e>
		break;
		
		case ADC_REFERENCE_INTRNAL:
		// Select Vref = 2.56V internal
	     SET_BIT(ADMUX,REFS0);
     d00:	a7 e2       	ldi	r26, 0x27	; 39
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e7 e2       	ldi	r30, 0x27	; 39
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	80 64       	ori	r24, 0x40	; 64
     d0c:	8c 93       	st	X, r24
	     SET_BIT(ADMUX,REFS1);
     d0e:	a7 e2       	ldi	r26, 0x27	; 39
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e7 e2       	ldi	r30, 0x27	; 39
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	80 68       	ori	r24, 0x80	; 128
     d1a:	8c 93       	st	X, r24
		break;
	}
	
	// Select Right Adjustment
	CLR_BIT(ADMUX,ADLAR);
     d1c:	a7 e2       	ldi	r26, 0x27	; 39
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e7 e2       	ldi	r30, 0x27	; 39
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	8f 7d       	andi	r24, 0xDF	; 223
     d28:	8c 93       	st	X, r24
	
	// Single Conversation Mode
	CLR_BIT(ADCSRA,ADATE);
     d2a:	a6 e2       	ldi	r26, 0x26	; 38
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e6 e2       	ldi	r30, 0x26	; 38
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	8f 7d       	andi	r24, 0xDF	; 223
     d36:	8c 93       	st	X, r24
	
	//Disable ADC Interrupt 
	CLR_BIT(ADCSRA,ADIE);
     d38:	a6 e2       	ldi	r26, 0x26	; 38
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e6 e2       	ldi	r30, 0x26	; 38
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	87 7f       	andi	r24, 0xF7	; 247
     d44:	8c 93       	st	X, r24
	
	// Prescaler 128 For 16MHZ (125 KHZ)
	SET_BIT(ADCSRA,ADPS0);
     d46:	a6 e2       	ldi	r26, 0x26	; 38
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e6 e2       	ldi	r30, 0x26	; 38
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	81 60       	ori	r24, 0x01	; 1
     d52:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
     d54:	a6 e2       	ldi	r26, 0x26	; 38
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e6 e2       	ldi	r30, 0x26	; 38
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	82 60       	ori	r24, 0x02	; 2
     d60:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2);
     d62:	a6 e2       	ldi	r26, 0x26	; 38
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e6 e2       	ldi	r30, 0x26	; 38
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	84 60       	ori	r24, 0x04	; 4
     d6e:	8c 93       	st	X, r24
	
	// ADC Enable
	SET_BIT(ADCSRA,ADEN);
     d70:	a6 e2       	ldi	r26, 0x26	; 38
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	e6 e2       	ldi	r30, 0x26	; 38
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	80 68       	ori	r24, 0x80	; 128
     d7c:	8c 93       	st	X, r24
}
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	cf 91       	pop	r28
     d86:	df 91       	pop	r29
     d88:	08 95       	ret

00000d8a <ADC_getDigitalValue>:


void ADC_getDigitalValue(u8 channelNum,u16* digitalValue)
{
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <ADC_getDigitalValue+0x6>
     d90:	0f 92       	push	r0
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	89 83       	std	Y+1, r24	; 0x01
     d98:	7b 83       	std	Y+3, r23	; 0x03
     d9a:	6a 83       	std	Y+2, r22	; 0x02
	if((digitalValue != NULL)&&(channelNum<32))
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
     d9e:	9b 81       	ldd	r25, Y+3	; 0x03
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	99 f1       	breq	.+102    	; 0xe0a <ADC_getDigitalValue+0x80>
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	80 32       	cpi	r24, 0x20	; 32
     da8:	80 f5       	brcc	.+96     	; 0xe0a <ADC_getDigitalValue+0x80>
	{
		//Clear ADMUX Channel Bits
	    ADMUX &= 0xE0; //0b11100000
     daa:	a7 e2       	ldi	r26, 0x27	; 39
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e7 e2       	ldi	r30, 0x27	; 39
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	80 7e       	andi	r24, 0xE0	; 224
     db6:	8c 93       	st	X, r24
	    
	    // Select Channel Number
	    ADMUX |= channelNum;
     db8:	a7 e2       	ldi	r26, 0x27	; 39
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e7 e2       	ldi	r30, 0x27	; 39
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	90 81       	ld	r25, Z
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	89 2b       	or	r24, r25
     dc6:	8c 93       	st	X, r24
	    
	    // Start Conversition
		SET_BIT(ADCSRA,ADSC);
     dc8:	a6 e2       	ldi	r26, 0x26	; 38
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e6 e2       	ldi	r30, 0x26	; 38
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	80 64       	ori	r24, 0x40	; 64
     dd4:	8c 93       	st	X, r24
		
		// Monitor ADC Flag 
		while(0 == GET_BIT(ADCSRA,ADIF));
     dd6:	e6 e2       	ldi	r30, 0x26	; 38
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	82 95       	swap	r24
     dde:	8f 70       	andi	r24, 0x0F	; 15
     de0:	88 2f       	mov	r24, r24
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	81 70       	andi	r24, 0x01	; 1
     de6:	90 70       	andi	r25, 0x00	; 0
     de8:	00 97       	sbiw	r24, 0x00	; 0
     dea:	a9 f3       	breq	.-22     	; 0xdd6 <ADC_getDigitalValue+0x4c>
		
		// Clear Flag(write one to clear)
		SET_BIT(ADCSRA,ADIF);
     dec:	a6 e2       	ldi	r26, 0x26	; 38
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e6 e2       	ldi	r30, 0x26	; 38
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	80 61       	ori	r24, 0x10	; 16
     df8:	8c 93       	st	X, r24
		
		*digitalValue = ADC_u16;
     dfa:	e4 e2       	ldi	r30, 0x24	; 36
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	91 81       	ldd	r25, Z+1	; 0x01
     e02:	ea 81       	ldd	r30, Y+2	; 0x02
     e04:	fb 81       	ldd	r31, Y+3	; 0x03
     e06:	91 83       	std	Z+1, r25	; 0x01
     e08:	80 83       	st	Z, r24
	}
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	08 95       	ret

00000e16 <DIO_setPinDirection>:
/* MCAL */
#include "DIO_interface.h"
#include "DIO_private.h"

void DIO_setPinDirection(u8 PortId, u8 PinId, u8 PinDirection)
{
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	00 d0       	rcall	.+0      	; 0xe1c <DIO_setPinDirection+0x6>
     e1c:	00 d0       	rcall	.+0      	; 0xe1e <DIO_setPinDirection+0x8>
     e1e:	0f 92       	push	r0
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	89 83       	std	Y+1, r24	; 0x01
     e26:	6a 83       	std	Y+2, r22	; 0x02
     e28:	4b 83       	std	Y+3, r20	; 0x03
	if((PortId<=3) && (PinId<=7) && ((PinDirection==DIO_PIN_OUTPUT)||(PinDirection==DIO_PIN_INPUT)))
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	84 30       	cpi	r24, 0x04	; 4
     e2e:	08 f0       	brcs	.+2      	; 0xe32 <DIO_setPinDirection+0x1c>
     e30:	dc c0       	rjmp	.+440    	; 0xfea <DIO_setPinDirection+0x1d4>
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	88 30       	cpi	r24, 0x08	; 8
     e36:	08 f0       	brcs	.+2      	; 0xe3a <DIO_setPinDirection+0x24>
     e38:	d8 c0       	rjmp	.+432    	; 0xfea <DIO_setPinDirection+0x1d4>
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	81 30       	cpi	r24, 0x01	; 1
     e3e:	21 f0       	breq	.+8      	; 0xe48 <DIO_setPinDirection+0x32>
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	88 23       	and	r24, r24
     e44:	09 f0       	breq	.+2      	; 0xe48 <DIO_setPinDirection+0x32>
     e46:	d1 c0       	rjmp	.+418    	; 0xfea <DIO_setPinDirection+0x1d4>
	{
		switch(PortId)
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	3d 83       	std	Y+5, r19	; 0x05
     e50:	2c 83       	std	Y+4, r18	; 0x04
     e52:	8c 81       	ldd	r24, Y+4	; 0x04
     e54:	9d 81       	ldd	r25, Y+5	; 0x05
     e56:	81 30       	cpi	r24, 0x01	; 1
     e58:	91 05       	cpc	r25, r1
     e5a:	09 f4       	brne	.+2      	; 0xe5e <DIO_setPinDirection+0x48>
     e5c:	43 c0       	rjmp	.+134    	; 0xee4 <DIO_setPinDirection+0xce>
     e5e:	2c 81       	ldd	r18, Y+4	; 0x04
     e60:	3d 81       	ldd	r19, Y+5	; 0x05
     e62:	22 30       	cpi	r18, 0x02	; 2
     e64:	31 05       	cpc	r19, r1
     e66:	2c f4       	brge	.+10     	; 0xe72 <DIO_setPinDirection+0x5c>
     e68:	8c 81       	ldd	r24, Y+4	; 0x04
     e6a:	9d 81       	ldd	r25, Y+5	; 0x05
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	71 f0       	breq	.+28     	; 0xe8c <DIO_setPinDirection+0x76>
     e70:	bc c0       	rjmp	.+376    	; 0xfea <DIO_setPinDirection+0x1d4>
     e72:	2c 81       	ldd	r18, Y+4	; 0x04
     e74:	3d 81       	ldd	r19, Y+5	; 0x05
     e76:	22 30       	cpi	r18, 0x02	; 2
     e78:	31 05       	cpc	r19, r1
     e7a:	09 f4       	brne	.+2      	; 0xe7e <DIO_setPinDirection+0x68>
     e7c:	5f c0       	rjmp	.+190    	; 0xf3c <DIO_setPinDirection+0x126>
     e7e:	8c 81       	ldd	r24, Y+4	; 0x04
     e80:	9d 81       	ldd	r25, Y+5	; 0x05
     e82:	83 30       	cpi	r24, 0x03	; 3
     e84:	91 05       	cpc	r25, r1
     e86:	09 f4       	brne	.+2      	; 0xe8a <DIO_setPinDirection+0x74>
     e88:	85 c0       	rjmp	.+266    	; 0xf94 <DIO_setPinDirection+0x17e>
     e8a:	af c0       	rjmp	.+350    	; 0xfea <DIO_setPinDirection+0x1d4>
	    {
	    	case DIO_PORTA: 
	    	if(PinDirection == DIO_PIN_OUTPUT)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <DIO_setPinDirection+0xa4>
	    	{
	    		SET_BIT(DDRA,PinId);
     e92:	aa e3       	ldi	r26, 0x3A	; 58
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	ea e3       	ldi	r30, 0x3A	; 58
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <DIO_setPinDirection+0x9a>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <DIO_setPinDirection+0x96>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	98 c0       	rjmp	.+304    	; 0xfea <DIO_setPinDirection+0x1d4>
	    	}
	    	else
	    	{
	    		CLR_BIT(DDRA,PinId);
     eba:	aa e3       	ldi	r26, 0x3A	; 58
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	ea e3       	ldi	r30, 0x3A	; 58
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <DIO_setPinDirection+0xc2>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <DIO_setPinDirection+0xbe>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	83 c0       	rjmp	.+262    	; 0xfea <DIO_setPinDirection+0x1d4>
	    	}
	    	break;
	    	
	    	case DIO_PORTB: 
	    	if(PinDirection == DIO_PIN_OUTPUT)
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	a1 f4       	brne	.+40     	; 0xf12 <DIO_setPinDirection+0xfc>
	    	{
	    		SET_BIT(DDRB,PinId);
     eea:	a7 e3       	ldi	r26, 0x37	; 55
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e7 e3       	ldi	r30, 0x37	; 55
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <DIO_setPinDirection+0xf2>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <DIO_setPinDirection+0xee>
     f0c:	84 2b       	or	r24, r20
     f0e:	8c 93       	st	X, r24
     f10:	6c c0       	rjmp	.+216    	; 0xfea <DIO_setPinDirection+0x1d4>
	    	}
	    	else
	    	{
	    		CLR_BIT(DDRB,PinId);
     f12:	a7 e3       	ldi	r26, 0x37	; 55
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e7 e3       	ldi	r30, 0x37	; 55
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	48 2f       	mov	r20, r24
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 2e       	mov	r0, r18
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <DIO_setPinDirection+0x11a>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	0a 94       	dec	r0
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <DIO_setPinDirection+0x116>
     f34:	80 95       	com	r24
     f36:	84 23       	and	r24, r20
     f38:	8c 93       	st	X, r24
     f3a:	57 c0       	rjmp	.+174    	; 0xfea <DIO_setPinDirection+0x1d4>
	    	}
	    	break;
	    	
	    	case DIO_PORTC: 
	    	if(PinDirection == DIO_PIN_OUTPUT)
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	a1 f4       	brne	.+40     	; 0xf6a <DIO_setPinDirection+0x154>
	    	{
	    		SET_BIT(DDRC,PinId);
     f42:	a4 e3       	ldi	r26, 0x34	; 52
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e4 e3       	ldi	r30, 0x34	; 52
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DIO_setPinDirection+0x14a>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DIO_setPinDirection+0x146>
     f64:	84 2b       	or	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	40 c0       	rjmp	.+128    	; 0xfea <DIO_setPinDirection+0x1d4>
	    	}
	    	else
	    	{
	    		CLR_BIT(DDRC,PinId);
     f6a:	a4 e3       	ldi	r26, 0x34	; 52
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e4 e3       	ldi	r30, 0x34	; 52
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	48 2f       	mov	r20, r24
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 2e       	mov	r0, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <DIO_setPinDirection+0x172>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	0a 94       	dec	r0
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <DIO_setPinDirection+0x16e>
     f8c:	80 95       	com	r24
     f8e:	84 23       	and	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	2b c0       	rjmp	.+86     	; 0xfea <DIO_setPinDirection+0x1d4>
	    	}
	    	break;
	    	
	    	case DIO_PORTD: 
	    	if(PinDirection == DIO_PIN_OUTPUT)
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	81 30       	cpi	r24, 0x01	; 1
     f98:	a1 f4       	brne	.+40     	; 0xfc2 <DIO_setPinDirection+0x1ac>
	    	{
	    		SET_BIT(DDRD,PinId);
     f9a:	a1 e3       	ldi	r26, 0x31	; 49
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e1 e3       	ldi	r30, 0x31	; 49
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	48 2f       	mov	r20, r24
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 2e       	mov	r0, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <DIO_setPinDirection+0x1a2>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	0a 94       	dec	r0
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <DIO_setPinDirection+0x19e>
     fbc:	84 2b       	or	r24, r20
     fbe:	8c 93       	st	X, r24
     fc0:	14 c0       	rjmp	.+40     	; 0xfea <DIO_setPinDirection+0x1d4>
	    	}
	    	else
	    	{
	    		CLR_BIT(DDRD,PinId);
     fc2:	a1 e3       	ldi	r26, 0x31	; 49
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e1 e3       	ldi	r30, 0x31	; 49
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	48 2f       	mov	r20, r24
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 2e       	mov	r0, r18
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <DIO_setPinDirection+0x1ca>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	0a 94       	dec	r0
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <DIO_setPinDirection+0x1c6>
     fe4:	80 95       	com	r24
     fe6:	84 23       	and	r24, r20
     fe8:	8c 93       	st	X, r24
	}
	else
	{
		// DO Nothing
	}
}
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <DIO_setPinValue>:


void DIO_setPinValue(u8 PortId, u8 PinId, u8 PinValue)
{
     ffa:	df 93       	push	r29
     ffc:	cf 93       	push	r28
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <DIO_setPinValue+0x6>
    1000:	00 d0       	rcall	.+0      	; 0x1002 <DIO_setPinValue+0x8>
    1002:	0f 92       	push	r0
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	89 83       	std	Y+1, r24	; 0x01
    100a:	6a 83       	std	Y+2, r22	; 0x02
    100c:	4b 83       	std	Y+3, r20	; 0x03
	if((PortId<=3) && (PinId<=7) && ((PinValue==DIO_PIN_HIGH)||(PinValue==DIO_PIN_LOW)))
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	84 30       	cpi	r24, 0x04	; 4
    1012:	08 f0       	brcs	.+2      	; 0x1016 <DIO_setPinValue+0x1c>
    1014:	dc c0       	rjmp	.+440    	; 0x11ce <DIO_setPinValue+0x1d4>
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	88 30       	cpi	r24, 0x08	; 8
    101a:	08 f0       	brcs	.+2      	; 0x101e <DIO_setPinValue+0x24>
    101c:	d8 c0       	rjmp	.+432    	; 0x11ce <DIO_setPinValue+0x1d4>
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	21 f0       	breq	.+8      	; 0x102c <DIO_setPinValue+0x32>
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	88 23       	and	r24, r24
    1028:	09 f0       	breq	.+2      	; 0x102c <DIO_setPinValue+0x32>
    102a:	d1 c0       	rjmp	.+418    	; 0x11ce <DIO_setPinValue+0x1d4>
	{
		switch(PortId)
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	3d 83       	std	Y+5, r19	; 0x05
    1034:	2c 83       	std	Y+4, r18	; 0x04
    1036:	8c 81       	ldd	r24, Y+4	; 0x04
    1038:	9d 81       	ldd	r25, Y+5	; 0x05
    103a:	81 30       	cpi	r24, 0x01	; 1
    103c:	91 05       	cpc	r25, r1
    103e:	09 f4       	brne	.+2      	; 0x1042 <DIO_setPinValue+0x48>
    1040:	43 c0       	rjmp	.+134    	; 0x10c8 <DIO_setPinValue+0xce>
    1042:	2c 81       	ldd	r18, Y+4	; 0x04
    1044:	3d 81       	ldd	r19, Y+5	; 0x05
    1046:	22 30       	cpi	r18, 0x02	; 2
    1048:	31 05       	cpc	r19, r1
    104a:	2c f4       	brge	.+10     	; 0x1056 <DIO_setPinValue+0x5c>
    104c:	8c 81       	ldd	r24, Y+4	; 0x04
    104e:	9d 81       	ldd	r25, Y+5	; 0x05
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	71 f0       	breq	.+28     	; 0x1070 <DIO_setPinValue+0x76>
    1054:	bc c0       	rjmp	.+376    	; 0x11ce <DIO_setPinValue+0x1d4>
    1056:	2c 81       	ldd	r18, Y+4	; 0x04
    1058:	3d 81       	ldd	r19, Y+5	; 0x05
    105a:	22 30       	cpi	r18, 0x02	; 2
    105c:	31 05       	cpc	r19, r1
    105e:	09 f4       	brne	.+2      	; 0x1062 <DIO_setPinValue+0x68>
    1060:	5f c0       	rjmp	.+190    	; 0x1120 <DIO_setPinValue+0x126>
    1062:	8c 81       	ldd	r24, Y+4	; 0x04
    1064:	9d 81       	ldd	r25, Y+5	; 0x05
    1066:	83 30       	cpi	r24, 0x03	; 3
    1068:	91 05       	cpc	r25, r1
    106a:	09 f4       	brne	.+2      	; 0x106e <DIO_setPinValue+0x74>
    106c:	85 c0       	rjmp	.+266    	; 0x1178 <DIO_setPinValue+0x17e>
    106e:	af c0       	rjmp	.+350    	; 0x11ce <DIO_setPinValue+0x1d4>
	    {
	    	case DIO_PORTA:
	    	if(DIO_PIN_HIGH == PinValue)
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	a1 f4       	brne	.+40     	; 0x109e <DIO_setPinValue+0xa4>
	    	{
	    		SET_BIT(PORTA,PinId);
    1076:	ab e3       	ldi	r26, 0x3B	; 59
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	eb e3       	ldi	r30, 0x3B	; 59
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	02 2e       	mov	r0, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <DIO_setPinValue+0x9a>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <DIO_setPinValue+0x96>
    1098:	84 2b       	or	r24, r20
    109a:	8c 93       	st	X, r24
    109c:	98 c0       	rjmp	.+304    	; 0x11ce <DIO_setPinValue+0x1d4>
	    	}
	    	else
	    	{
	    		CLR_BIT(PORTA,PinId);
    109e:	ab e3       	ldi	r26, 0x3B	; 59
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	eb e3       	ldi	r30, 0x3B	; 59
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_setPinValue+0xc2>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_setPinValue+0xbe>
    10c0:	80 95       	com	r24
    10c2:	84 23       	and	r24, r20
    10c4:	8c 93       	st	X, r24
    10c6:	83 c0       	rjmp	.+262    	; 0x11ce <DIO_setPinValue+0x1d4>
	    	}
	    	break;
	    	
	    	case DIO_PORTB:
	    	if(DIO_PIN_HIGH == PinValue)
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	a1 f4       	brne	.+40     	; 0x10f6 <DIO_setPinValue+0xfc>
	    	{
	    		SET_BIT(PORTB,PinId);
    10ce:	a8 e3       	ldi	r26, 0x38	; 56
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e8 e3       	ldi	r30, 0x38	; 56
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	48 2f       	mov	r20, r24
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 2e       	mov	r0, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <DIO_setPinValue+0xf2>
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	0a 94       	dec	r0
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <DIO_setPinValue+0xee>
    10f0:	84 2b       	or	r24, r20
    10f2:	8c 93       	st	X, r24
    10f4:	6c c0       	rjmp	.+216    	; 0x11ce <DIO_setPinValue+0x1d4>
	    	}
	    	else
	    	{
	    		CLR_BIT(PORTB,PinId);
    10f6:	a8 e3       	ldi	r26, 0x38	; 56
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e8 e3       	ldi	r30, 0x38	; 56
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	48 2f       	mov	r20, r24
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	02 2e       	mov	r0, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <DIO_setPinValue+0x11a>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	0a 94       	dec	r0
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <DIO_setPinValue+0x116>
    1118:	80 95       	com	r24
    111a:	84 23       	and	r24, r20
    111c:	8c 93       	st	X, r24
    111e:	57 c0       	rjmp	.+174    	; 0x11ce <DIO_setPinValue+0x1d4>
	    	}
	    	break;
	    	
	    	case DIO_PORTC:
	    	if(DIO_PIN_HIGH == PinValue)
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	81 30       	cpi	r24, 0x01	; 1
    1124:	a1 f4       	brne	.+40     	; 0x114e <DIO_setPinValue+0x154>
	    	{
	    		SET_BIT(PORTC,PinId);
    1126:	a5 e3       	ldi	r26, 0x35	; 53
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e5 e3       	ldi	r30, 0x35	; 53
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	48 2f       	mov	r20, r24
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	02 2e       	mov	r0, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <DIO_setPinValue+0x14a>
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	0a 94       	dec	r0
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <DIO_setPinValue+0x146>
    1148:	84 2b       	or	r24, r20
    114a:	8c 93       	st	X, r24
    114c:	40 c0       	rjmp	.+128    	; 0x11ce <DIO_setPinValue+0x1d4>
	    	}
	    	else
	    	{
	    		CLR_BIT(PORTC,PinId);
    114e:	a5 e3       	ldi	r26, 0x35	; 53
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e5 e3       	ldi	r30, 0x35	; 53
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	48 2f       	mov	r20, r24
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	02 2e       	mov	r0, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <DIO_setPinValue+0x172>
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	0a 94       	dec	r0
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <DIO_setPinValue+0x16e>
    1170:	80 95       	com	r24
    1172:	84 23       	and	r24, r20
    1174:	8c 93       	st	X, r24
    1176:	2b c0       	rjmp	.+86     	; 0x11ce <DIO_setPinValue+0x1d4>
	    	}
	    	break;
	    	
	    	case DIO_PORTD:
	    	if(DIO_PIN_HIGH == PinValue)
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	a1 f4       	brne	.+40     	; 0x11a6 <DIO_setPinValue+0x1ac>
	    	{
	    		SET_BIT(PORTD,PinId);
    117e:	a2 e3       	ldi	r26, 0x32	; 50
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e2 e3       	ldi	r30, 0x32	; 50
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	48 2f       	mov	r20, r24
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	02 2e       	mov	r0, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <DIO_setPinValue+0x1a2>
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	0a 94       	dec	r0
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <DIO_setPinValue+0x19e>
    11a0:	84 2b       	or	r24, r20
    11a2:	8c 93       	st	X, r24
    11a4:	14 c0       	rjmp	.+40     	; 0x11ce <DIO_setPinValue+0x1d4>
	    	}
	    	else
	    	{
	    		CLR_BIT(PORTD,PinId);
    11a6:	a2 e3       	ldi	r26, 0x32	; 50
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e2 e3       	ldi	r30, 0x32	; 50
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	48 2f       	mov	r20, r24
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	02 2e       	mov	r0, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <DIO_setPinValue+0x1ca>
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	0a 94       	dec	r0
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <DIO_setPinValue+0x1c6>
    11c8:	80 95       	com	r24
    11ca:	84 23       	and	r24, r20
    11cc:	8c 93       	st	X, r24
	}
	else
	{
		// DO Nothing
	}
}
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <DIO_togglePinValue>:


void DIO_togglePinValue(u8 PortId, u8 PinId)
{
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <DIO_togglePinValue+0x6>
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <DIO_togglePinValue+0x8>
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	89 83       	std	Y+1, r24	; 0x01
    11ec:	6a 83       	std	Y+2, r22	; 0x02
	if((PortId<=3) && (PinId<=7))
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	84 30       	cpi	r24, 0x04	; 4
    11f2:	08 f0       	brcs	.+2      	; 0x11f6 <DIO_togglePinValue+0x18>
    11f4:	72 c0       	rjmp	.+228    	; 0x12da <DIO_togglePinValue+0xfc>
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	88 30       	cpi	r24, 0x08	; 8
    11fa:	08 f0       	brcs	.+2      	; 0x11fe <DIO_togglePinValue+0x20>
    11fc:	6e c0       	rjmp	.+220    	; 0x12da <DIO_togglePinValue+0xfc>
	{
		switch(PortId)
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	3c 83       	std	Y+4, r19	; 0x04
    1206:	2b 83       	std	Y+3, r18	; 0x03
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	9c 81       	ldd	r25, Y+4	; 0x04
    120c:	81 30       	cpi	r24, 0x01	; 1
    120e:	91 05       	cpc	r25, r1
    1210:	49 f1       	breq	.+82     	; 0x1264 <DIO_togglePinValue+0x86>
    1212:	2b 81       	ldd	r18, Y+3	; 0x03
    1214:	3c 81       	ldd	r19, Y+4	; 0x04
    1216:	22 30       	cpi	r18, 0x02	; 2
    1218:	31 05       	cpc	r19, r1
    121a:	2c f4       	brge	.+10     	; 0x1226 <DIO_togglePinValue+0x48>
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	9c 81       	ldd	r25, Y+4	; 0x04
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	61 f0       	breq	.+24     	; 0x123c <DIO_togglePinValue+0x5e>
    1224:	5a c0       	rjmp	.+180    	; 0x12da <DIO_togglePinValue+0xfc>
    1226:	2b 81       	ldd	r18, Y+3	; 0x03
    1228:	3c 81       	ldd	r19, Y+4	; 0x04
    122a:	22 30       	cpi	r18, 0x02	; 2
    122c:	31 05       	cpc	r19, r1
    122e:	71 f1       	breq	.+92     	; 0x128c <DIO_togglePinValue+0xae>
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	9c 81       	ldd	r25, Y+4	; 0x04
    1234:	83 30       	cpi	r24, 0x03	; 3
    1236:	91 05       	cpc	r25, r1
    1238:	e9 f1       	breq	.+122    	; 0x12b4 <DIO_togglePinValue+0xd6>
    123a:	4f c0       	rjmp	.+158    	; 0x12da <DIO_togglePinValue+0xfc>
		{
			case DIO_PORTA:
			TOG_BIT(PORTA,PinId);
    123c:	ab e3       	ldi	r26, 0x3B	; 59
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	eb e3       	ldi	r30, 0x3B	; 59
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 2e       	mov	r0, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <DIO_togglePinValue+0x7c>
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	0a 94       	dec	r0
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <DIO_togglePinValue+0x78>
    125e:	84 27       	eor	r24, r20
    1260:	8c 93       	st	X, r24
    1262:	3b c0       	rjmp	.+118    	; 0x12da <DIO_togglePinValue+0xfc>
			break;
			
			case DIO_PORTB:
			TOG_BIT(PORTB,PinId);
    1264:	a8 e3       	ldi	r26, 0x38	; 56
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e8 e3       	ldi	r30, 0x38	; 56
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	48 2f       	mov	r20, r24
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	02 2e       	mov	r0, r18
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <DIO_togglePinValue+0xa4>
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	0a 94       	dec	r0
    1284:	e2 f7       	brpl	.-8      	; 0x127e <DIO_togglePinValue+0xa0>
    1286:	84 27       	eor	r24, r20
    1288:	8c 93       	st	X, r24
    128a:	27 c0       	rjmp	.+78     	; 0x12da <DIO_togglePinValue+0xfc>
			break;
			
			case DIO_PORTC:
			TOG_BIT(PORTC,PinId);
    128c:	a5 e3       	ldi	r26, 0x35	; 53
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	e5 e3       	ldi	r30, 0x35	; 53
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	48 2f       	mov	r20, r24
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	02 2e       	mov	r0, r18
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <DIO_togglePinValue+0xcc>
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	0a 94       	dec	r0
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <DIO_togglePinValue+0xc8>
    12ae:	84 27       	eor	r24, r20
    12b0:	8c 93       	st	X, r24
    12b2:	13 c0       	rjmp	.+38     	; 0x12da <DIO_togglePinValue+0xfc>
			break;
			
			case DIO_PORTD:
			TOG_BIT(PORTD,PinId);
    12b4:	a2 e3       	ldi	r26, 0x32	; 50
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e2 e3       	ldi	r30, 0x32	; 50
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <DIO_togglePinValue+0xf4>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <DIO_togglePinValue+0xf0>
    12d6:	84 27       	eor	r24, r20
    12d8:	8c 93       	st	X, r24
	}
	else
	{
		// DO Nothing
	}
}
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <DIO_getPinValue>:


void DIO_getPinValue(u8 PortId, u8 PinId, u8* PinValue)
{
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <DIO_getPinValue+0x6>
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <DIO_getPinValue+0x8>
    12f0:	00 d0       	rcall	.+0      	; 0x12f2 <DIO_getPinValue+0xa>
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	89 83       	std	Y+1, r24	; 0x01
    12f8:	6a 83       	std	Y+2, r22	; 0x02
    12fa:	5c 83       	std	Y+4, r21	; 0x04
    12fc:	4b 83       	std	Y+3, r20	; 0x03
	if((PortId<=3) && (PinId<=7) && (PinValue!= NULL))
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	84 30       	cpi	r24, 0x04	; 4
    1302:	08 f0       	brcs	.+2      	; 0x1306 <DIO_getPinValue+0x1e>
    1304:	79 c0       	rjmp	.+242    	; 0x13f8 <DIO_getPinValue+0x110>
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	88 30       	cpi	r24, 0x08	; 8
    130a:	08 f0       	brcs	.+2      	; 0x130e <DIO_getPinValue+0x26>
    130c:	75 c0       	rjmp	.+234    	; 0x13f8 <DIO_getPinValue+0x110>
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	9c 81       	ldd	r25, Y+4	; 0x04
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	09 f4       	brne	.+2      	; 0x1318 <DIO_getPinValue+0x30>
    1316:	70 c0       	rjmp	.+224    	; 0x13f8 <DIO_getPinValue+0x110>
	{
		switch(PortId)
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	3e 83       	std	Y+6, r19	; 0x06
    1320:	2d 83       	std	Y+5, r18	; 0x05
    1322:	4d 81       	ldd	r20, Y+5	; 0x05
    1324:	5e 81       	ldd	r21, Y+6	; 0x06
    1326:	41 30       	cpi	r20, 0x01	; 1
    1328:	51 05       	cpc	r21, r1
    132a:	59 f1       	breq	.+86     	; 0x1382 <DIO_getPinValue+0x9a>
    132c:	8d 81       	ldd	r24, Y+5	; 0x05
    132e:	9e 81       	ldd	r25, Y+6	; 0x06
    1330:	82 30       	cpi	r24, 0x02	; 2
    1332:	91 05       	cpc	r25, r1
    1334:	34 f4       	brge	.+12     	; 0x1342 <DIO_getPinValue+0x5a>
    1336:	2d 81       	ldd	r18, Y+5	; 0x05
    1338:	3e 81       	ldd	r19, Y+6	; 0x06
    133a:	21 15       	cp	r18, r1
    133c:	31 05       	cpc	r19, r1
    133e:	69 f0       	breq	.+26     	; 0x135a <DIO_getPinValue+0x72>
    1340:	5b c0       	rjmp	.+182    	; 0x13f8 <DIO_getPinValue+0x110>
    1342:	4d 81       	ldd	r20, Y+5	; 0x05
    1344:	5e 81       	ldd	r21, Y+6	; 0x06
    1346:	42 30       	cpi	r20, 0x02	; 2
    1348:	51 05       	cpc	r21, r1
    134a:	79 f1       	breq	.+94     	; 0x13aa <DIO_getPinValue+0xc2>
    134c:	8d 81       	ldd	r24, Y+5	; 0x05
    134e:	9e 81       	ldd	r25, Y+6	; 0x06
    1350:	83 30       	cpi	r24, 0x03	; 3
    1352:	91 05       	cpc	r25, r1
    1354:	09 f4       	brne	.+2      	; 0x1358 <DIO_getPinValue+0x70>
    1356:	3d c0       	rjmp	.+122    	; 0x13d2 <DIO_getPinValue+0xea>
    1358:	4f c0       	rjmp	.+158    	; 0x13f8 <DIO_getPinValue+0x110>
		{
			case DIO_PORTA:
			*PinValue = GET_BIT(PINA,PinId);
    135a:	e9 e3       	ldi	r30, 0x39	; 57
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	88 2f       	mov	r24, r24
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	a9 01       	movw	r20, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <DIO_getPinValue+0x8a>
    136e:	55 95       	asr	r21
    1370:	47 95       	ror	r20
    1372:	8a 95       	dec	r24
    1374:	e2 f7       	brpl	.-8      	; 0x136e <DIO_getPinValue+0x86>
    1376:	ca 01       	movw	r24, r20
    1378:	81 70       	andi	r24, 0x01	; 1
    137a:	eb 81       	ldd	r30, Y+3	; 0x03
    137c:	fc 81       	ldd	r31, Y+4	; 0x04
    137e:	80 83       	st	Z, r24
    1380:	3b c0       	rjmp	.+118    	; 0x13f8 <DIO_getPinValue+0x110>
			break;
			
			case DIO_PORTB:
			*PinValue = GET_BIT(PINB,PinId);
    1382:	e6 e3       	ldi	r30, 0x36	; 54
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	88 2f       	mov	r24, r24
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	a9 01       	movw	r20, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <DIO_getPinValue+0xb2>
    1396:	55 95       	asr	r21
    1398:	47 95       	ror	r20
    139a:	8a 95       	dec	r24
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <DIO_getPinValue+0xae>
    139e:	ca 01       	movw	r24, r20
    13a0:	81 70       	andi	r24, 0x01	; 1
    13a2:	eb 81       	ldd	r30, Y+3	; 0x03
    13a4:	fc 81       	ldd	r31, Y+4	; 0x04
    13a6:	80 83       	st	Z, r24
    13a8:	27 c0       	rjmp	.+78     	; 0x13f8 <DIO_getPinValue+0x110>
			break;
			
			case DIO_PORTC:
			*PinValue = GET_BIT(PINC,PinId);
    13aa:	e3 e3       	ldi	r30, 0x33	; 51
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	88 2f       	mov	r24, r24
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	a9 01       	movw	r20, r18
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <DIO_getPinValue+0xda>
    13be:	55 95       	asr	r21
    13c0:	47 95       	ror	r20
    13c2:	8a 95       	dec	r24
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <DIO_getPinValue+0xd6>
    13c6:	ca 01       	movw	r24, r20
    13c8:	81 70       	andi	r24, 0x01	; 1
    13ca:	eb 81       	ldd	r30, Y+3	; 0x03
    13cc:	fc 81       	ldd	r31, Y+4	; 0x04
    13ce:	80 83       	st	Z, r24
    13d0:	13 c0       	rjmp	.+38     	; 0x13f8 <DIO_getPinValue+0x110>
			break;
			
			case DIO_PORTD:
			*PinValue = GET_BIT(PIND,PinId);
    13d2:	e0 e3       	ldi	r30, 0x30	; 48
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	88 2f       	mov	r24, r24
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	a9 01       	movw	r20, r18
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <DIO_getPinValue+0x102>
    13e6:	55 95       	asr	r21
    13e8:	47 95       	ror	r20
    13ea:	8a 95       	dec	r24
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <DIO_getPinValue+0xfe>
    13ee:	ca 01       	movw	r24, r20
    13f0:	81 70       	andi	r24, 0x01	; 1
    13f2:	eb 81       	ldd	r30, Y+3	; 0x03
    13f4:	fc 81       	ldd	r31, Y+4	; 0x04
    13f6:	80 83       	st	Z, r24
	}
	else
	{
		// DO Nothing
	}
}
    13f8:	26 96       	adiw	r28, 0x06	; 6
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	de bf       	out	0x3e, r29	; 62
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	cd bf       	out	0x3d, r28	; 61
    1404:	cf 91       	pop	r28
    1406:	df 91       	pop	r29
    1408:	08 95       	ret

0000140a <DIO_activePinInPullUpResistance>:


void DIO_activePinInPullUpResistance(u8 PortId, u8 PinId)
{
    140a:	df 93       	push	r29
    140c:	cf 93       	push	r28
    140e:	00 d0       	rcall	.+0      	; 0x1410 <DIO_activePinInPullUpResistance+0x6>
    1410:	00 d0       	rcall	.+0      	; 0x1412 <DIO_activePinInPullUpResistance+0x8>
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
    1416:	89 83       	std	Y+1, r24	; 0x01
    1418:	6a 83       	std	Y+2, r22	; 0x02
	if((PortId<=3) && (PinId<=7))
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	84 30       	cpi	r24, 0x04	; 4
    141e:	08 f0       	brcs	.+2      	; 0x1422 <DIO_activePinInPullUpResistance+0x18>
    1420:	72 c0       	rjmp	.+228    	; 0x1506 <DIO_activePinInPullUpResistance+0xfc>
    1422:	8a 81       	ldd	r24, Y+2	; 0x02
    1424:	88 30       	cpi	r24, 0x08	; 8
    1426:	08 f0       	brcs	.+2      	; 0x142a <DIO_activePinInPullUpResistance+0x20>
    1428:	6e c0       	rjmp	.+220    	; 0x1506 <DIO_activePinInPullUpResistance+0xfc>
	{
		switch(PortId)
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	3c 83       	std	Y+4, r19	; 0x04
    1432:	2b 83       	std	Y+3, r18	; 0x03
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	9c 81       	ldd	r25, Y+4	; 0x04
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	91 05       	cpc	r25, r1
    143c:	49 f1       	breq	.+82     	; 0x1490 <DIO_activePinInPullUpResistance+0x86>
    143e:	2b 81       	ldd	r18, Y+3	; 0x03
    1440:	3c 81       	ldd	r19, Y+4	; 0x04
    1442:	22 30       	cpi	r18, 0x02	; 2
    1444:	31 05       	cpc	r19, r1
    1446:	2c f4       	brge	.+10     	; 0x1452 <DIO_activePinInPullUpResistance+0x48>
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	9c 81       	ldd	r25, Y+4	; 0x04
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	61 f0       	breq	.+24     	; 0x1468 <DIO_activePinInPullUpResistance+0x5e>
    1450:	5a c0       	rjmp	.+180    	; 0x1506 <DIO_activePinInPullUpResistance+0xfc>
    1452:	2b 81       	ldd	r18, Y+3	; 0x03
    1454:	3c 81       	ldd	r19, Y+4	; 0x04
    1456:	22 30       	cpi	r18, 0x02	; 2
    1458:	31 05       	cpc	r19, r1
    145a:	71 f1       	breq	.+92     	; 0x14b8 <DIO_activePinInPullUpResistance+0xae>
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	9c 81       	ldd	r25, Y+4	; 0x04
    1460:	83 30       	cpi	r24, 0x03	; 3
    1462:	91 05       	cpc	r25, r1
    1464:	e9 f1       	breq	.+122    	; 0x14e0 <DIO_activePinInPullUpResistance+0xd6>
    1466:	4f c0       	rjmp	.+158    	; 0x1506 <DIO_activePinInPullUpResistance+0xfc>
		{
			case DIO_PORTA:
			SET_BIT(PORTA,PinId);
    1468:	ab e3       	ldi	r26, 0x3B	; 59
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	eb e3       	ldi	r30, 0x3B	; 59
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	48 2f       	mov	r20, r24
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 2e       	mov	r0, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <DIO_activePinInPullUpResistance+0x7c>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	0a 94       	dec	r0
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <DIO_activePinInPullUpResistance+0x78>
    148a:	84 2b       	or	r24, r20
    148c:	8c 93       	st	X, r24
    148e:	3b c0       	rjmp	.+118    	; 0x1506 <DIO_activePinInPullUpResistance+0xfc>
			break;
			
			case DIO_PORTB:
			SET_BIT(PORTB,PinId);
    1490:	a8 e3       	ldi	r26, 0x38	; 56
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e8 e3       	ldi	r30, 0x38	; 56
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	48 2f       	mov	r20, r24
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	02 2e       	mov	r0, r18
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <DIO_activePinInPullUpResistance+0xa4>
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	0a 94       	dec	r0
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <DIO_activePinInPullUpResistance+0xa0>
    14b2:	84 2b       	or	r24, r20
    14b4:	8c 93       	st	X, r24
    14b6:	27 c0       	rjmp	.+78     	; 0x1506 <DIO_activePinInPullUpResistance+0xfc>
			break;
			
			case DIO_PORTC:
			SET_BIT(PORTC,PinId);
    14b8:	a5 e3       	ldi	r26, 0x35	; 53
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e5 e3       	ldi	r30, 0x35	; 53
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	48 2f       	mov	r20, r24
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	02 2e       	mov	r0, r18
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <DIO_activePinInPullUpResistance+0xcc>
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	0a 94       	dec	r0
    14d8:	e2 f7       	brpl	.-8      	; 0x14d2 <DIO_activePinInPullUpResistance+0xc8>
    14da:	84 2b       	or	r24, r20
    14dc:	8c 93       	st	X, r24
    14de:	13 c0       	rjmp	.+38     	; 0x1506 <DIO_activePinInPullUpResistance+0xfc>
			break;
			
			case DIO_PORTD:
			SET_BIT(PORTD,PinId);
    14e0:	a2 e3       	ldi	r26, 0x32	; 50
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e2 e3       	ldi	r30, 0x32	; 50
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	48 2f       	mov	r20, r24
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	02 2e       	mov	r0, r18
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <DIO_activePinInPullUpResistance+0xf4>
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	0a 94       	dec	r0
    1500:	e2 f7       	brpl	.-8      	; 0x14fa <DIO_activePinInPullUpResistance+0xf0>
    1502:	84 2b       	or	r24, r20
    1504:	8c 93       	st	X, r24
	}
	else
	{
		// DO Nothing
	}
}
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	08 95       	ret

00001514 <DIO_setPortDirection>:



/* Port Apis */
void DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	00 d0       	rcall	.+0      	; 0x151a <DIO_setPortDirection+0x6>
    151a:	00 d0       	rcall	.+0      	; 0x151c <DIO_setPortDirection+0x8>
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	89 83       	std	Y+1, r24	; 0x01
    1522:	6a 83       	std	Y+2, r22	; 0x02
	if((PortId<=3) && ((DIO_PORT_OUTPUT == PortDirection) || (DIO_PORT_INPUT == PortDirection)))
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	84 30       	cpi	r24, 0x04	; 4
    1528:	08 f0       	brcs	.+2      	; 0x152c <DIO_setPortDirection+0x18>
    152a:	55 c0       	rjmp	.+170    	; 0x15d6 <DIO_setPortDirection+0xc2>
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	8f 3f       	cpi	r24, 0xFF	; 255
    1530:	21 f0       	breq	.+8      	; 0x153a <DIO_setPortDirection+0x26>
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	88 23       	and	r24, r24
    1536:	09 f0       	breq	.+2      	; 0x153a <DIO_setPortDirection+0x26>
    1538:	4e c0       	rjmp	.+156    	; 0x15d6 <DIO_setPortDirection+0xc2>
	{
		switch(PortId)
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	3c 83       	std	Y+4, r19	; 0x04
    1542:	2b 83       	std	Y+3, r18	; 0x03
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	9c 81       	ldd	r25, Y+4	; 0x04
    1548:	81 30       	cpi	r24, 0x01	; 1
    154a:	91 05       	cpc	r25, r1
    154c:	09 f1       	breq	.+66     	; 0x1590 <DIO_setPortDirection+0x7c>
    154e:	2b 81       	ldd	r18, Y+3	; 0x03
    1550:	3c 81       	ldd	r19, Y+4	; 0x04
    1552:	22 30       	cpi	r18, 0x02	; 2
    1554:	31 05       	cpc	r19, r1
    1556:	2c f4       	brge	.+10     	; 0x1562 <DIO_setPortDirection+0x4e>
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	9c 81       	ldd	r25, Y+4	; 0x04
    155c:	00 97       	sbiw	r24, 0x00	; 0
    155e:	61 f0       	breq	.+24     	; 0x1578 <DIO_setPortDirection+0x64>
    1560:	3a c0       	rjmp	.+116    	; 0x15d6 <DIO_setPortDirection+0xc2>
    1562:	2b 81       	ldd	r18, Y+3	; 0x03
    1564:	3c 81       	ldd	r19, Y+4	; 0x04
    1566:	22 30       	cpi	r18, 0x02	; 2
    1568:	31 05       	cpc	r19, r1
    156a:	f1 f0       	breq	.+60     	; 0x15a8 <DIO_setPortDirection+0x94>
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	9c 81       	ldd	r25, Y+4	; 0x04
    1570:	83 30       	cpi	r24, 0x03	; 3
    1572:	91 05       	cpc	r25, r1
    1574:	29 f1       	breq	.+74     	; 0x15c0 <DIO_setPortDirection+0xac>
    1576:	2f c0       	rjmp	.+94     	; 0x15d6 <DIO_setPortDirection+0xc2>
		{
		case 0:
			if(DIO_PORT_OUTPUT == PortDirection)
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	8f 3f       	cpi	r24, 0xFF	; 255
    157c:	29 f4       	brne	.+10     	; 0x1588 <DIO_setPortDirection+0x74>
			{
				DDRA = 0xff;
    157e:	ea e3       	ldi	r30, 0x3A	; 58
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	8f ef       	ldi	r24, 0xFF	; 255
    1584:	80 83       	st	Z, r24
    1586:	27 c0       	rjmp	.+78     	; 0x15d6 <DIO_setPortDirection+0xc2>
			}
			else
			{
				DDRA = 0x00;
    1588:	ea e3       	ldi	r30, 0x3A	; 58
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	10 82       	st	Z, r1
    158e:	23 c0       	rjmp	.+70     	; 0x15d6 <DIO_setPortDirection+0xc2>
			}
			break;

		case 1:
			if(DIO_PORT_OUTPUT == PortDirection)
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	8f 3f       	cpi	r24, 0xFF	; 255
    1594:	29 f4       	brne	.+10     	; 0x15a0 <DIO_setPortDirection+0x8c>
			{
				DDRB = 0xff;
    1596:	e7 e3       	ldi	r30, 0x37	; 55
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	8f ef       	ldi	r24, 0xFF	; 255
    159c:	80 83       	st	Z, r24
    159e:	1b c0       	rjmp	.+54     	; 0x15d6 <DIO_setPortDirection+0xc2>
			}
			else
			{
				DDRB = 0x00;
    15a0:	e7 e3       	ldi	r30, 0x37	; 55
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	10 82       	st	Z, r1
    15a6:	17 c0       	rjmp	.+46     	; 0x15d6 <DIO_setPortDirection+0xc2>
			}
			break;

		case 2:
			if(DIO_PORT_OUTPUT == PortDirection)
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	8f 3f       	cpi	r24, 0xFF	; 255
    15ac:	29 f4       	brne	.+10     	; 0x15b8 <DIO_setPortDirection+0xa4>
			{
				DDRC = 0xff;
    15ae:	e4 e3       	ldi	r30, 0x34	; 52
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	8f ef       	ldi	r24, 0xFF	; 255
    15b4:	80 83       	st	Z, r24
    15b6:	0f c0       	rjmp	.+30     	; 0x15d6 <DIO_setPortDirection+0xc2>
			}
			else
			{
				DDRC = 0x00;
    15b8:	e4 e3       	ldi	r30, 0x34	; 52
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	10 82       	st	Z, r1
    15be:	0b c0       	rjmp	.+22     	; 0x15d6 <DIO_setPortDirection+0xc2>
			}
			break;

		case 3:
			if(DIO_PORT_OUTPUT == PortDirection)
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	8f 3f       	cpi	r24, 0xFF	; 255
    15c4:	29 f4       	brne	.+10     	; 0x15d0 <DIO_setPortDirection+0xbc>
			{
				DDRD = 0xff;
    15c6:	e1 e3       	ldi	r30, 0x31	; 49
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	8f ef       	ldi	r24, 0xFF	; 255
    15cc:	80 83       	st	Z, r24
    15ce:	03 c0       	rjmp	.+6      	; 0x15d6 <DIO_setPortDirection+0xc2>
			}
			else
			{
				DDRD = 0x00;
    15d0:	e1 e3       	ldi	r30, 0x31	; 49
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	10 82       	st	Z, r1
			}
			break;
		}
	}
}
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	cf 91       	pop	r28
    15e0:	df 91       	pop	r29
    15e2:	08 95       	ret

000015e4 <DIO_setPortValue>:


void DIO_setPortValue(u8 PortId, u8 PortValue)
{
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	00 d0       	rcall	.+0      	; 0x15ea <DIO_setPortValue+0x6>
    15ea:	00 d0       	rcall	.+0      	; 0x15ec <DIO_setPortValue+0x8>
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	89 83       	std	Y+1, r24	; 0x01
    15f2:	6a 83       	std	Y+2, r22	; 0x02
	if(PortId<=3)
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	84 30       	cpi	r24, 0x04	; 4
    15f8:	90 f5       	brcc	.+100    	; 0x165e <DIO_setPortValue+0x7a>
	{
		switch(PortId)
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	3c 83       	std	Y+4, r19	; 0x04
    1602:	2b 83       	std	Y+3, r18	; 0x03
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	9c 81       	ldd	r25, Y+4	; 0x04
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	91 05       	cpc	r25, r1
    160c:	d1 f0       	breq	.+52     	; 0x1642 <DIO_setPortValue+0x5e>
    160e:	2b 81       	ldd	r18, Y+3	; 0x03
    1610:	3c 81       	ldd	r19, Y+4	; 0x04
    1612:	22 30       	cpi	r18, 0x02	; 2
    1614:	31 05       	cpc	r19, r1
    1616:	2c f4       	brge	.+10     	; 0x1622 <DIO_setPortValue+0x3e>
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	9c 81       	ldd	r25, Y+4	; 0x04
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	61 f0       	breq	.+24     	; 0x1638 <DIO_setPortValue+0x54>
    1620:	1e c0       	rjmp	.+60     	; 0x165e <DIO_setPortValue+0x7a>
    1622:	2b 81       	ldd	r18, Y+3	; 0x03
    1624:	3c 81       	ldd	r19, Y+4	; 0x04
    1626:	22 30       	cpi	r18, 0x02	; 2
    1628:	31 05       	cpc	r19, r1
    162a:	81 f0       	breq	.+32     	; 0x164c <DIO_setPortValue+0x68>
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	9c 81       	ldd	r25, Y+4	; 0x04
    1630:	83 30       	cpi	r24, 0x03	; 3
    1632:	91 05       	cpc	r25, r1
    1634:	81 f0       	breq	.+32     	; 0x1656 <DIO_setPortValue+0x72>
    1636:	13 c0       	rjmp	.+38     	; 0x165e <DIO_setPortValue+0x7a>
		{
		case 0:
			PORTA = PortValue;
    1638:	eb e3       	ldi	r30, 0x3B	; 59
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	80 83       	st	Z, r24
    1640:	0e c0       	rjmp	.+28     	; 0x165e <DIO_setPortValue+0x7a>
			break;

		case 1:
			PORTB = PortValue;
    1642:	e8 e3       	ldi	r30, 0x38	; 56
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	80 83       	st	Z, r24
    164a:	09 c0       	rjmp	.+18     	; 0x165e <DIO_setPortValue+0x7a>
			break;

		case 2:
			PORTC = PortValue;
    164c:	e5 e3       	ldi	r30, 0x35	; 53
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	80 83       	st	Z, r24
    1654:	04 c0       	rjmp	.+8      	; 0x165e <DIO_setPortValue+0x7a>
			break;

		case 3:
			PORTD = PortValue;
    1656:	e2 e3       	ldi	r30, 0x32	; 50
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	80 83       	st	Z, r24
			break;
		}
	}
}
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	08 95       	ret

0000166c <DIO_getPortValue>:


void DIO_getPortValue(u8 PortId, u8* PortValue)
{
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	00 d0       	rcall	.+0      	; 0x1672 <DIO_getPortValue+0x6>
    1672:	00 d0       	rcall	.+0      	; 0x1674 <DIO_getPortValue+0x8>
    1674:	0f 92       	push	r0
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	89 83       	std	Y+1, r24	; 0x01
    167c:	7b 83       	std	Y+3, r23	; 0x03
    167e:	6a 83       	std	Y+2, r22	; 0x02
	if((PortId<=3) && (PortValue != 0))
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	84 30       	cpi	r24, 0x04	; 4
    1684:	08 f0       	brcs	.+2      	; 0x1688 <DIO_getPortValue+0x1c>
    1686:	3e c0       	rjmp	.+124    	; 0x1704 <DIO_getPortValue+0x98>
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	9b 81       	ldd	r25, Y+3	; 0x03
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	d1 f1       	breq	.+116    	; 0x1704 <DIO_getPortValue+0x98>
	{
		switch(PortId)
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	3d 83       	std	Y+5, r19	; 0x05
    1698:	2c 83       	std	Y+4, r18	; 0x04
    169a:	8c 81       	ldd	r24, Y+4	; 0x04
    169c:	9d 81       	ldd	r25, Y+5	; 0x05
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	91 05       	cpc	r25, r1
    16a2:	e1 f0       	breq	.+56     	; 0x16dc <DIO_getPortValue+0x70>
    16a4:	2c 81       	ldd	r18, Y+4	; 0x04
    16a6:	3d 81       	ldd	r19, Y+5	; 0x05
    16a8:	22 30       	cpi	r18, 0x02	; 2
    16aa:	31 05       	cpc	r19, r1
    16ac:	2c f4       	brge	.+10     	; 0x16b8 <DIO_getPortValue+0x4c>
    16ae:	8c 81       	ldd	r24, Y+4	; 0x04
    16b0:	9d 81       	ldd	r25, Y+5	; 0x05
    16b2:	00 97       	sbiw	r24, 0x00	; 0
    16b4:	61 f0       	breq	.+24     	; 0x16ce <DIO_getPortValue+0x62>
    16b6:	26 c0       	rjmp	.+76     	; 0x1704 <DIO_getPortValue+0x98>
    16b8:	2c 81       	ldd	r18, Y+4	; 0x04
    16ba:	3d 81       	ldd	r19, Y+5	; 0x05
    16bc:	22 30       	cpi	r18, 0x02	; 2
    16be:	31 05       	cpc	r19, r1
    16c0:	a1 f0       	breq	.+40     	; 0x16ea <DIO_getPortValue+0x7e>
    16c2:	8c 81       	ldd	r24, Y+4	; 0x04
    16c4:	9d 81       	ldd	r25, Y+5	; 0x05
    16c6:	83 30       	cpi	r24, 0x03	; 3
    16c8:	91 05       	cpc	r25, r1
    16ca:	b1 f0       	breq	.+44     	; 0x16f8 <DIO_getPortValue+0x8c>
    16cc:	1b c0       	rjmp	.+54     	; 0x1704 <DIO_getPortValue+0x98>
		{
		case 0:
			*PortValue = PINA;
    16ce:	e9 e3       	ldi	r30, 0x39	; 57
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	ea 81       	ldd	r30, Y+2	; 0x02
    16d6:	fb 81       	ldd	r31, Y+3	; 0x03
    16d8:	80 83       	st	Z, r24
    16da:	14 c0       	rjmp	.+40     	; 0x1704 <DIO_getPortValue+0x98>
			break;

		case 1:
			*PortValue = PINB;
    16dc:	e6 e3       	ldi	r30, 0x36	; 54
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	ea 81       	ldd	r30, Y+2	; 0x02
    16e4:	fb 81       	ldd	r31, Y+3	; 0x03
    16e6:	80 83       	st	Z, r24
    16e8:	0d c0       	rjmp	.+26     	; 0x1704 <DIO_getPortValue+0x98>
			break;

		case 2:
			*PortValue = PINC;
    16ea:	e3 e3       	ldi	r30, 0x33	; 51
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	ea 81       	ldd	r30, Y+2	; 0x02
    16f2:	fb 81       	ldd	r31, Y+3	; 0x03
    16f4:	80 83       	st	Z, r24
    16f6:	06 c0       	rjmp	.+12     	; 0x1704 <DIO_getPortValue+0x98>
			break;

		case 3:
			*PortValue = PIND;
    16f8:	e0 e3       	ldi	r30, 0x30	; 48
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1700:	fb 81       	ldd	r31, Y+3	; 0x03
    1702:	80 83       	st	Z, r24
			break;
		}
	}
}
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	08 95       	ret

00001714 <DIO_togglePortValue>:


void DIO_togglePortValue(u8 PortId)
{
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	00 d0       	rcall	.+0      	; 0x171a <DIO_togglePortValue+0x6>
    171a:	0f 92       	push	r0
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	89 83       	std	Y+1, r24	; 0x01
	if(PortId<=3)
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	84 30       	cpi	r24, 0x04	; 4
    1726:	08 f0       	brcs	.+2      	; 0x172a <DIO_togglePortValue+0x16>
    1728:	3e c0       	rjmp	.+124    	; 0x17a6 <DIO_togglePortValue+0x92>
	{
		switch(PortId)
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	3b 83       	std	Y+3, r19	; 0x03
    1732:	2a 83       	std	Y+2, r18	; 0x02
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	9b 81       	ldd	r25, Y+3	; 0x03
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	91 05       	cpc	r25, r1
    173c:	e9 f0       	breq	.+58     	; 0x1778 <DIO_togglePortValue+0x64>
    173e:	2a 81       	ldd	r18, Y+2	; 0x02
    1740:	3b 81       	ldd	r19, Y+3	; 0x03
    1742:	22 30       	cpi	r18, 0x02	; 2
    1744:	31 05       	cpc	r19, r1
    1746:	2c f4       	brge	.+10     	; 0x1752 <DIO_togglePortValue+0x3e>
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	9b 81       	ldd	r25, Y+3	; 0x03
    174c:	00 97       	sbiw	r24, 0x00	; 0
    174e:	61 f0       	breq	.+24     	; 0x1768 <DIO_togglePortValue+0x54>
    1750:	2a c0       	rjmp	.+84     	; 0x17a6 <DIO_togglePortValue+0x92>
    1752:	2a 81       	ldd	r18, Y+2	; 0x02
    1754:	3b 81       	ldd	r19, Y+3	; 0x03
    1756:	22 30       	cpi	r18, 0x02	; 2
    1758:	31 05       	cpc	r19, r1
    175a:	b1 f0       	breq	.+44     	; 0x1788 <DIO_togglePortValue+0x74>
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	9b 81       	ldd	r25, Y+3	; 0x03
    1760:	83 30       	cpi	r24, 0x03	; 3
    1762:	91 05       	cpc	r25, r1
    1764:	c9 f0       	breq	.+50     	; 0x1798 <DIO_togglePortValue+0x84>
    1766:	1f c0       	rjmp	.+62     	; 0x17a6 <DIO_togglePortValue+0x92>
		{
		case 0:
			PORTA = ~PORTA;
    1768:	ab e3       	ldi	r26, 0x3B	; 59
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	eb e3       	ldi	r30, 0x3B	; 59
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	80 95       	com	r24
    1774:	8c 93       	st	X, r24
    1776:	17 c0       	rjmp	.+46     	; 0x17a6 <DIO_togglePortValue+0x92>
			break;

		case 1:
			PORTB = ~PORTB;
    1778:	a8 e3       	ldi	r26, 0x38	; 56
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e8 e3       	ldi	r30, 0x38	; 56
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	80 95       	com	r24
    1784:	8c 93       	st	X, r24
    1786:	0f c0       	rjmp	.+30     	; 0x17a6 <DIO_togglePortValue+0x92>
			break;

		case 2:
			PORTC = ~PORTC;
    1788:	a5 e3       	ldi	r26, 0x35	; 53
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e5 e3       	ldi	r30, 0x35	; 53
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	80 95       	com	r24
    1794:	8c 93       	st	X, r24
    1796:	07 c0       	rjmp	.+14     	; 0x17a6 <DIO_togglePortValue+0x92>
			break;

		case 3:
			PORTD = ~PORTD;
    1798:	a2 e3       	ldi	r26, 0x32	; 50
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e2 e3       	ldi	r30, 0x32	; 50
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	80 95       	com	r24
    17a4:	8c 93       	st	X, r24
			break;
		}
	}
}
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <DIO_activePortInPullUpResistance>:


void DIO_activePortInPullUpResistance(u8 PortId)
{
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <DIO_activePortInPullUpResistance+0x6>
    17b8:	0f 92       	push	r0
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	89 83       	std	Y+1, r24	; 0x01
	if(PortId<=3)
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	84 30       	cpi	r24, 0x04	; 4
    17c4:	90 f5       	brcc	.+100    	; 0x182a <DIO_activePortInPullUpResistance+0x78>
	{
		switch(PortId)
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	3b 83       	std	Y+3, r19	; 0x03
    17ce:	2a 83       	std	Y+2, r18	; 0x02
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	9b 81       	ldd	r25, Y+3	; 0x03
    17d4:	81 30       	cpi	r24, 0x01	; 1
    17d6:	91 05       	cpc	r25, r1
    17d8:	d1 f0       	breq	.+52     	; 0x180e <DIO_activePortInPullUpResistance+0x5c>
    17da:	2a 81       	ldd	r18, Y+2	; 0x02
    17dc:	3b 81       	ldd	r19, Y+3	; 0x03
    17de:	22 30       	cpi	r18, 0x02	; 2
    17e0:	31 05       	cpc	r19, r1
    17e2:	2c f4       	brge	.+10     	; 0x17ee <DIO_activePortInPullUpResistance+0x3c>
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	9b 81       	ldd	r25, Y+3	; 0x03
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	61 f0       	breq	.+24     	; 0x1804 <DIO_activePortInPullUpResistance+0x52>
    17ec:	1e c0       	rjmp	.+60     	; 0x182a <DIO_activePortInPullUpResistance+0x78>
    17ee:	2a 81       	ldd	r18, Y+2	; 0x02
    17f0:	3b 81       	ldd	r19, Y+3	; 0x03
    17f2:	22 30       	cpi	r18, 0x02	; 2
    17f4:	31 05       	cpc	r19, r1
    17f6:	81 f0       	breq	.+32     	; 0x1818 <DIO_activePortInPullUpResistance+0x66>
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	9b 81       	ldd	r25, Y+3	; 0x03
    17fc:	83 30       	cpi	r24, 0x03	; 3
    17fe:	91 05       	cpc	r25, r1
    1800:	81 f0       	breq	.+32     	; 0x1822 <DIO_activePortInPullUpResistance+0x70>
    1802:	13 c0       	rjmp	.+38     	; 0x182a <DIO_activePortInPullUpResistance+0x78>
		{
		case 0:
			PORTA = 0xff;
    1804:	eb e3       	ldi	r30, 0x3B	; 59
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	8f ef       	ldi	r24, 0xFF	; 255
    180a:	80 83       	st	Z, r24
    180c:	0e c0       	rjmp	.+28     	; 0x182a <DIO_activePortInPullUpResistance+0x78>
			break;

		case 1:
			PORTB = 0xff;
    180e:	e8 e3       	ldi	r30, 0x38	; 56
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	8f ef       	ldi	r24, 0xFF	; 255
    1814:	80 83       	st	Z, r24
    1816:	09 c0       	rjmp	.+18     	; 0x182a <DIO_activePortInPullUpResistance+0x78>
			break;

		case 2:
			PORTC = 0xff;
    1818:	e5 e3       	ldi	r30, 0x35	; 53
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	8f ef       	ldi	r24, 0xFF	; 255
    181e:	80 83       	st	Z, r24
    1820:	04 c0       	rjmp	.+8      	; 0x182a <DIO_activePortInPullUpResistance+0x78>
			break;

		case 3:
			PORTD = 0xff;
    1822:	e2 e3       	ldi	r30, 0x32	; 50
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	8f ef       	ldi	r24, 0xFF	; 255
    1828:	80 83       	st	Z, r24
			break;
		}
	}
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <LCD_init>:
#include "LCD_config.h"
#include "LCD_private.h"


void LCD_init(void)
{
    1836:	0f 93       	push	r16
    1838:	1f 93       	push	r17
    183a:	df 93       	push	r29
    183c:	cf 93       	push	r28
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	ca 55       	subi	r28, 0x5A	; 90
    1844:	d0 40       	sbci	r29, 0x00	; 0
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	f8 94       	cli
    184a:	de bf       	out	0x3e, r29	; 62
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	cd bf       	out	0x3d, r28	; 61
	// Intialize LCD pins As OutPut Pins
	DIO_setPinDirection(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT);
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	61 e0       	ldi	r22, 0x01	; 1
    1854:	41 e0       	ldi	r20, 0x01	; 1
    1856:	0e 94 0b 07 	call	0xe16	; 0xe16 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_RW_PORT, LCD_RW_PIN, DIO_PIN_OUTPUT);
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	62 e0       	ldi	r22, 0x02	; 2
    185e:	41 e0       	ldi	r20, 0x01	; 1
    1860:	0e 94 0b 07 	call	0xe16	; 0xe16 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT);
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	63 e0       	ldi	r22, 0x03	; 3
    1868:	41 e0       	ldi	r20, 0x01	; 1
    186a:	0e 94 0b 07 	call	0xe16	; 0xe16 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_OUTPUT);
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	64 e0       	ldi	r22, 0x04	; 4
    1872:	41 e0       	ldi	r20, 0x01	; 1
    1874:	0e 94 0b 07 	call	0xe16	; 0xe16 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT);
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	65 e0       	ldi	r22, 0x05	; 5
    187c:	41 e0       	ldi	r20, 0x01	; 1
    187e:	0e 94 0b 07 	call	0xe16	; 0xe16 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT);
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	66 e0       	ldi	r22, 0x06	; 6
    1886:	41 e0       	ldi	r20, 0x01	; 1
    1888:	0e 94 0b 07 	call	0xe16	; 0xe16 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT);
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	67 e0       	ldi	r22, 0x07	; 7
    1890:	41 e0       	ldi	r20, 0x01	; 1
    1892:	0e 94 0b 07 	call	0xe16	; 0xe16 <DIO_setPinDirection>
    1896:	fe 01       	movw	r30, r28
    1898:	e9 5a       	subi	r30, 0xA9	; 169
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	ac e0       	ldi	r26, 0x0C	; 12
    18a2:	b2 e4       	ldi	r27, 0x42	; 66
    18a4:	80 83       	st	Z, r24
    18a6:	91 83       	std	Z+1, r25	; 0x01
    18a8:	a2 83       	std	Z+2, r26	; 0x02
    18aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ac:	8e 01       	movw	r16, r28
    18ae:	0d 5a       	subi	r16, 0xAD	; 173
    18b0:	1f 4f       	sbci	r17, 0xFF	; 255
    18b2:	fe 01       	movw	r30, r28
    18b4:	e9 5a       	subi	r30, 0xA9	; 169
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	60 81       	ld	r22, Z
    18ba:	71 81       	ldd	r23, Z+1	; 0x01
    18bc:	82 81       	ldd	r24, Z+2	; 0x02
    18be:	93 81       	ldd	r25, Z+3	; 0x03
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	4a e7       	ldi	r20, 0x7A	; 122
    18c6:	55 e4       	ldi	r21, 0x45	; 69
    18c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	f8 01       	movw	r30, r16
    18d2:	80 83       	st	Z, r24
    18d4:	91 83       	std	Z+1, r25	; 0x01
    18d6:	a2 83       	std	Z+2, r26	; 0x02
    18d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18da:	fe 01       	movw	r30, r28
    18dc:	ed 5a       	subi	r30, 0xAD	; 173
    18de:	ff 4f       	sbci	r31, 0xFF	; 255
    18e0:	60 81       	ld	r22, Z
    18e2:	71 81       	ldd	r23, Z+1	; 0x01
    18e4:	82 81       	ldd	r24, Z+2	; 0x02
    18e6:	93 81       	ldd	r25, Z+3	; 0x03
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	40 e8       	ldi	r20, 0x80	; 128
    18ee:	5f e3       	ldi	r21, 0x3F	; 63
    18f0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18f4:	88 23       	and	r24, r24
    18f6:	44 f4       	brge	.+16     	; 0x1908 <LCD_init+0xd2>
		__ticks = 1;
    18f8:	fe 01       	movw	r30, r28
    18fa:	ef 5a       	subi	r30, 0xAF	; 175
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	91 83       	std	Z+1, r25	; 0x01
    1904:	80 83       	st	Z, r24
    1906:	64 c0       	rjmp	.+200    	; 0x19d0 <LCD_init+0x19a>
	else if (__tmp > 65535)
    1908:	fe 01       	movw	r30, r28
    190a:	ed 5a       	subi	r30, 0xAD	; 173
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	60 81       	ld	r22, Z
    1910:	71 81       	ldd	r23, Z+1	; 0x01
    1912:	82 81       	ldd	r24, Z+2	; 0x02
    1914:	93 81       	ldd	r25, Z+3	; 0x03
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	3f ef       	ldi	r19, 0xFF	; 255
    191a:	4f e7       	ldi	r20, 0x7F	; 127
    191c:	57 e4       	ldi	r21, 0x47	; 71
    191e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1922:	18 16       	cp	r1, r24
    1924:	0c f0       	brlt	.+2      	; 0x1928 <LCD_init+0xf2>
    1926:	43 c0       	rjmp	.+134    	; 0x19ae <LCD_init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1928:	fe 01       	movw	r30, r28
    192a:	e9 5a       	subi	r30, 0xA9	; 169
    192c:	ff 4f       	sbci	r31, 0xFF	; 255
    192e:	60 81       	ld	r22, Z
    1930:	71 81       	ldd	r23, Z+1	; 0x01
    1932:	82 81       	ldd	r24, Z+2	; 0x02
    1934:	93 81       	ldd	r25, Z+3	; 0x03
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	40 e2       	ldi	r20, 0x20	; 32
    193c:	51 e4       	ldi	r21, 0x41	; 65
    193e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	8e 01       	movw	r16, r28
    1948:	0f 5a       	subi	r16, 0xAF	; 175
    194a:	1f 4f       	sbci	r17, 0xFF	; 255
    194c:	bc 01       	movw	r22, r24
    194e:	cd 01       	movw	r24, r26
    1950:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	f8 01       	movw	r30, r16
    195a:	91 83       	std	Z+1, r25	; 0x01
    195c:	80 83       	st	Z, r24
    195e:	1f c0       	rjmp	.+62     	; 0x199e <LCD_init+0x168>
    1960:	fe 01       	movw	r30, r28
    1962:	e1 5b       	subi	r30, 0xB1	; 177
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	80 e9       	ldi	r24, 0x90	; 144
    1968:	91 e0       	ldi	r25, 0x01	; 1
    196a:	91 83       	std	Z+1, r25	; 0x01
    196c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    196e:	fe 01       	movw	r30, r28
    1970:	e1 5b       	subi	r30, 0xB1	; 177
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	80 81       	ld	r24, Z
    1976:	91 81       	ldd	r25, Z+1	; 0x01
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	f1 f7       	brne	.-4      	; 0x1978 <LCD_init+0x142>
    197c:	fe 01       	movw	r30, r28
    197e:	e1 5b       	subi	r30, 0xB1	; 177
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	91 83       	std	Z+1, r25	; 0x01
    1984:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1986:	de 01       	movw	r26, r28
    1988:	af 5a       	subi	r26, 0xAF	; 175
    198a:	bf 4f       	sbci	r27, 0xFF	; 255
    198c:	fe 01       	movw	r30, r28
    198e:	ef 5a       	subi	r30, 0xAF	; 175
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	80 81       	ld	r24, Z
    1994:	91 81       	ldd	r25, Z+1	; 0x01
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	11 96       	adiw	r26, 0x01	; 1
    199a:	9c 93       	st	X, r25
    199c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199e:	fe 01       	movw	r30, r28
    19a0:	ef 5a       	subi	r30, 0xAF	; 175
    19a2:	ff 4f       	sbci	r31, 0xFF	; 255
    19a4:	80 81       	ld	r24, Z
    19a6:	91 81       	ldd	r25, Z+1	; 0x01
    19a8:	00 97       	sbiw	r24, 0x00	; 0
    19aa:	d1 f6       	brne	.-76     	; 0x1960 <LCD_init+0x12a>
    19ac:	27 c0       	rjmp	.+78     	; 0x19fc <LCD_init+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ae:	8e 01       	movw	r16, r28
    19b0:	0f 5a       	subi	r16, 0xAF	; 175
    19b2:	1f 4f       	sbci	r17, 0xFF	; 255
    19b4:	fe 01       	movw	r30, r28
    19b6:	ed 5a       	subi	r30, 0xAD	; 173
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	60 81       	ld	r22, Z
    19bc:	71 81       	ldd	r23, Z+1	; 0x01
    19be:	82 81       	ldd	r24, Z+2	; 0x02
    19c0:	93 81       	ldd	r25, Z+3	; 0x03
    19c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	f8 01       	movw	r30, r16
    19cc:	91 83       	std	Z+1, r25	; 0x01
    19ce:	80 83       	st	Z, r24
    19d0:	de 01       	movw	r26, r28
    19d2:	a3 5b       	subi	r26, 0xB3	; 179
    19d4:	bf 4f       	sbci	r27, 0xFF	; 255
    19d6:	fe 01       	movw	r30, r28
    19d8:	ef 5a       	subi	r30, 0xAF	; 175
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	80 81       	ld	r24, Z
    19de:	91 81       	ldd	r25, Z+1	; 0x01
    19e0:	8d 93       	st	X+, r24
    19e2:	9c 93       	st	X, r25
    19e4:	fe 01       	movw	r30, r28
    19e6:	e3 5b       	subi	r30, 0xB3	; 179
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	80 81       	ld	r24, Z
    19ec:	91 81       	ldd	r25, Z+1	; 0x01
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	f1 f7       	brne	.-4      	; 0x19ee <LCD_init+0x1b8>
    19f2:	fe 01       	movw	r30, r28
    19f4:	e3 5b       	subi	r30, 0xB3	; 179
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	91 83       	std	Z+1, r25	; 0x01
    19fa:	80 83       	st	Z, r24
	
	_delay_ms(35);
	
	// set Rs pin = 0 (write command)
	DIO_setPinValue(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_LOW);
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	61 e0       	ldi	r22, 0x01	; 1
    1a00:	40 e0       	ldi	r20, 0x00	; 0
    1a02:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_setPinValue>
	// set Rw pin = 0 (write)
	DIO_setPinValue(LCD_RW_PORT, LCD_RW_PIN, DIO_PIN_LOW);
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	62 e0       	ldi	r22, 0x02	; 2
    1a0a:	40 e0       	ldi	r20, 0x00	; 0
    1a0c:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_setPinValue>
	private_writeHalfPort(0b0010);
    1a10:	82 e0       	ldi	r24, 0x02	; 2
    1a12:	0e 94 55 13 	call	0x26aa	; 0x26aa <private_writeHalfPort>
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_HIGH);
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	63 e0       	ldi	r22, 0x03	; 3
    1a1a:	41 e0       	ldi	r20, 0x01	; 1
    1a1c:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_setPinValue>
    1a20:	fe 01       	movw	r30, r28
    1a22:	e7 5b       	subi	r30, 0xB7	; 183
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	a0 e8       	ldi	r26, 0x80	; 128
    1a2c:	bf e3       	ldi	r27, 0x3F	; 63
    1a2e:	80 83       	st	Z, r24
    1a30:	91 83       	std	Z+1, r25	; 0x01
    1a32:	a2 83       	std	Z+2, r26	; 0x02
    1a34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a36:	8e 01       	movw	r16, r28
    1a38:	0b 5b       	subi	r16, 0xBB	; 187
    1a3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	e7 5b       	subi	r30, 0xB7	; 183
    1a40:	ff 4f       	sbci	r31, 0xFF	; 255
    1a42:	60 81       	ld	r22, Z
    1a44:	71 81       	ldd	r23, Z+1	; 0x01
    1a46:	82 81       	ldd	r24, Z+2	; 0x02
    1a48:	93 81       	ldd	r25, Z+3	; 0x03
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	4a e7       	ldi	r20, 0x7A	; 122
    1a50:	55 e4       	ldi	r21, 0x45	; 69
    1a52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	f8 01       	movw	r30, r16
    1a5c:	80 83       	st	Z, r24
    1a5e:	91 83       	std	Z+1, r25	; 0x01
    1a60:	a2 83       	std	Z+2, r26	; 0x02
    1a62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a64:	fe 01       	movw	r30, r28
    1a66:	eb 5b       	subi	r30, 0xBB	; 187
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	60 81       	ld	r22, Z
    1a6c:	71 81       	ldd	r23, Z+1	; 0x01
    1a6e:	82 81       	ldd	r24, Z+2	; 0x02
    1a70:	93 81       	ldd	r25, Z+3	; 0x03
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	40 e8       	ldi	r20, 0x80	; 128
    1a78:	5f e3       	ldi	r21, 0x3F	; 63
    1a7a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a7e:	88 23       	and	r24, r24
    1a80:	44 f4       	brge	.+16     	; 0x1a92 <LCD_init+0x25c>
		__ticks = 1;
    1a82:	fe 01       	movw	r30, r28
    1a84:	ed 5b       	subi	r30, 0xBD	; 189
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	91 83       	std	Z+1, r25	; 0x01
    1a8e:	80 83       	st	Z, r24
    1a90:	64 c0       	rjmp	.+200    	; 0x1b5a <LCD_init+0x324>
	else if (__tmp > 65535)
    1a92:	fe 01       	movw	r30, r28
    1a94:	eb 5b       	subi	r30, 0xBB	; 187
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	60 81       	ld	r22, Z
    1a9a:	71 81       	ldd	r23, Z+1	; 0x01
    1a9c:	82 81       	ldd	r24, Z+2	; 0x02
    1a9e:	93 81       	ldd	r25, Z+3	; 0x03
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	3f ef       	ldi	r19, 0xFF	; 255
    1aa4:	4f e7       	ldi	r20, 0x7F	; 127
    1aa6:	57 e4       	ldi	r21, 0x47	; 71
    1aa8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1aac:	18 16       	cp	r1, r24
    1aae:	0c f0       	brlt	.+2      	; 0x1ab2 <LCD_init+0x27c>
    1ab0:	43 c0       	rjmp	.+134    	; 0x1b38 <LCD_init+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	e7 5b       	subi	r30, 0xB7	; 183
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	60 81       	ld	r22, Z
    1aba:	71 81       	ldd	r23, Z+1	; 0x01
    1abc:	82 81       	ldd	r24, Z+2	; 0x02
    1abe:	93 81       	ldd	r25, Z+3	; 0x03
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	40 e2       	ldi	r20, 0x20	; 32
    1ac6:	51 e4       	ldi	r21, 0x41	; 65
    1ac8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	8e 01       	movw	r16, r28
    1ad2:	0d 5b       	subi	r16, 0xBD	; 189
    1ad4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad6:	bc 01       	movw	r22, r24
    1ad8:	cd 01       	movw	r24, r26
    1ada:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	f8 01       	movw	r30, r16
    1ae4:	91 83       	std	Z+1, r25	; 0x01
    1ae6:	80 83       	st	Z, r24
    1ae8:	1f c0       	rjmp	.+62     	; 0x1b28 <LCD_init+0x2f2>
    1aea:	fe 01       	movw	r30, r28
    1aec:	ef 5b       	subi	r30, 0xBF	; 191
    1aee:	ff 4f       	sbci	r31, 0xFF	; 255
    1af0:	80 e9       	ldi	r24, 0x90	; 144
    1af2:	91 e0       	ldi	r25, 0x01	; 1
    1af4:	91 83       	std	Z+1, r25	; 0x01
    1af6:	80 83       	st	Z, r24
    1af8:	fe 01       	movw	r30, r28
    1afa:	ef 5b       	subi	r30, 0xBF	; 191
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
    1afe:	80 81       	ld	r24, Z
    1b00:	91 81       	ldd	r25, Z+1	; 0x01
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <LCD_init+0x2cc>
    1b06:	fe 01       	movw	r30, r28
    1b08:	ef 5b       	subi	r30, 0xBF	; 191
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	91 83       	std	Z+1, r25	; 0x01
    1b0e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b10:	de 01       	movw	r26, r28
    1b12:	ad 5b       	subi	r26, 0xBD	; 189
    1b14:	bf 4f       	sbci	r27, 0xFF	; 255
    1b16:	fe 01       	movw	r30, r28
    1b18:	ed 5b       	subi	r30, 0xBD	; 189
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	80 81       	ld	r24, Z
    1b1e:	91 81       	ldd	r25, Z+1	; 0x01
    1b20:	01 97       	sbiw	r24, 0x01	; 1
    1b22:	11 96       	adiw	r26, 0x01	; 1
    1b24:	9c 93       	st	X, r25
    1b26:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b28:	fe 01       	movw	r30, r28
    1b2a:	ed 5b       	subi	r30, 0xBD	; 189
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	80 81       	ld	r24, Z
    1b30:	91 81       	ldd	r25, Z+1	; 0x01
    1b32:	00 97       	sbiw	r24, 0x00	; 0
    1b34:	d1 f6       	brne	.-76     	; 0x1aea <LCD_init+0x2b4>
    1b36:	24 c0       	rjmp	.+72     	; 0x1b80 <LCD_init+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b38:	8e 01       	movw	r16, r28
    1b3a:	0d 5b       	subi	r16, 0xBD	; 189
    1b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3e:	fe 01       	movw	r30, r28
    1b40:	eb 5b       	subi	r30, 0xBB	; 187
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	60 81       	ld	r22, Z
    1b46:	71 81       	ldd	r23, Z+1	; 0x01
    1b48:	82 81       	ldd	r24, Z+2	; 0x02
    1b4a:	93 81       	ldd	r25, Z+3	; 0x03
    1b4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	f8 01       	movw	r30, r16
    1b56:	91 83       	std	Z+1, r25	; 0x01
    1b58:	80 83       	st	Z, r24
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	ed 5b       	subi	r30, 0xBD	; 189
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	80 81       	ld	r24, Z
    1b62:	91 81       	ldd	r25, Z+1	; 0x01
    1b64:	fe 01       	movw	r30, r28
    1b66:	ff 96       	adiw	r30, 0x3f	; 63
    1b68:	91 83       	std	Z+1, r25	; 0x01
    1b6a:	80 83       	st	Z, r24
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	ff 96       	adiw	r30, 0x3f	; 63
    1b70:	80 81       	ld	r24, Z
    1b72:	91 81       	ldd	r25, Z+1	; 0x01
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <LCD_init+0x33e>
    1b78:	fe 01       	movw	r30, r28
    1b7a:	ff 96       	adiw	r30, 0x3f	; 63
    1b7c:	91 83       	std	Z+1, r25	; 0x01
    1b7e:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_LOW);
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	63 e0       	ldi	r22, 0x03	; 3
    1b84:	40 e0       	ldi	r20, 0x00	; 0
    1b86:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_setPinValue>
    // Function Set command 2*16 LCD , 4 Bit Mode
	LCD_sendCmnd(0b00101000);
    1b8a:	88 e2       	ldi	r24, 0x28	; 40
    1b8c:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <LCD_sendCmnd>
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	a4 e3       	ldi	r26, 0x34	; 52
    1b96:	b2 e4       	ldi	r27, 0x42	; 66
    1b98:	8b af       	std	Y+59, r24	; 0x3b
    1b9a:	9c af       	std	Y+60, r25	; 0x3c
    1b9c:	ad af       	std	Y+61, r26	; 0x3d
    1b9e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ba0:	6b ad       	ldd	r22, Y+59	; 0x3b
    1ba2:	7c ad       	ldd	r23, Y+60	; 0x3c
    1ba4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ba6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ba8:	2b ea       	ldi	r18, 0xAB	; 171
    1baa:	3a ea       	ldi	r19, 0xAA	; 170
    1bac:	4a ea       	ldi	r20, 0xAA	; 170
    1bae:	50 e4       	ldi	r21, 0x40	; 64
    1bb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	8f ab       	std	Y+55, r24	; 0x37
    1bba:	98 af       	std	Y+56, r25	; 0x38
    1bbc:	a9 af       	std	Y+57, r26	; 0x39
    1bbe:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1bc0:	6f a9       	ldd	r22, Y+55	; 0x37
    1bc2:	78 ad       	ldd	r23, Y+56	; 0x38
    1bc4:	89 ad       	ldd	r24, Y+57	; 0x39
    1bc6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e8       	ldi	r20, 0x80	; 128
    1bce:	5f e3       	ldi	r21, 0x3F	; 63
    1bd0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bd4:	88 23       	and	r24, r24
    1bd6:	1c f4       	brge	.+6      	; 0x1bde <LCD_init+0x3a8>
		__ticks = 1;
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	8e ab       	std	Y+54, r24	; 0x36
    1bdc:	91 c0       	rjmp	.+290    	; 0x1d00 <LCD_init+0x4ca>
	else if (__tmp > 255)
    1bde:	6f a9       	ldd	r22, Y+55	; 0x37
    1be0:	78 ad       	ldd	r23, Y+56	; 0x38
    1be2:	89 ad       	ldd	r24, Y+57	; 0x39
    1be4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	4f e7       	ldi	r20, 0x7F	; 127
    1bec:	53 e4       	ldi	r21, 0x43	; 67
    1bee:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bf2:	18 16       	cp	r1, r24
    1bf4:	0c f0       	brlt	.+2      	; 0x1bf8 <LCD_init+0x3c2>
    1bf6:	7b c0       	rjmp	.+246    	; 0x1cee <LCD_init+0x4b8>
	{
		_delay_ms(__us / 1000.0);
    1bf8:	6b ad       	ldd	r22, Y+59	; 0x3b
    1bfa:	7c ad       	ldd	r23, Y+60	; 0x3c
    1bfc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bfe:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	4a e7       	ldi	r20, 0x7A	; 122
    1c06:	54 e4       	ldi	r21, 0x44	; 68
    1c08:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	8a ab       	std	Y+50, r24	; 0x32
    1c12:	9b ab       	std	Y+51, r25	; 0x33
    1c14:	ac ab       	std	Y+52, r26	; 0x34
    1c16:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c18:	6a a9       	ldd	r22, Y+50	; 0x32
    1c1a:	7b a9       	ldd	r23, Y+51	; 0x33
    1c1c:	8c a9       	ldd	r24, Y+52	; 0x34
    1c1e:	9d a9       	ldd	r25, Y+53	; 0x35
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	4a e7       	ldi	r20, 0x7A	; 122
    1c26:	55 e4       	ldi	r21, 0x45	; 69
    1c28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	8e a7       	std	Y+46, r24	; 0x2e
    1c32:	9f a7       	std	Y+47, r25	; 0x2f
    1c34:	a8 ab       	std	Y+48, r26	; 0x30
    1c36:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1c38:	6e a5       	ldd	r22, Y+46	; 0x2e
    1c3a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1c3c:	88 a9       	ldd	r24, Y+48	; 0x30
    1c3e:	99 a9       	ldd	r25, Y+49	; 0x31
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	40 e8       	ldi	r20, 0x80	; 128
    1c46:	5f e3       	ldi	r21, 0x3F	; 63
    1c48:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c4c:	88 23       	and	r24, r24
    1c4e:	2c f4       	brge	.+10     	; 0x1c5a <LCD_init+0x424>
		__ticks = 1;
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	9d a7       	std	Y+45, r25	; 0x2d
    1c56:	8c a7       	std	Y+44, r24	; 0x2c
    1c58:	3f c0       	rjmp	.+126    	; 0x1cd8 <LCD_init+0x4a2>
	else if (__tmp > 65535)
    1c5a:	6e a5       	ldd	r22, Y+46	; 0x2e
    1c5c:	7f a5       	ldd	r23, Y+47	; 0x2f
    1c5e:	88 a9       	ldd	r24, Y+48	; 0x30
    1c60:	99 a9       	ldd	r25, Y+49	; 0x31
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	3f ef       	ldi	r19, 0xFF	; 255
    1c66:	4f e7       	ldi	r20, 0x7F	; 127
    1c68:	57 e4       	ldi	r21, 0x47	; 71
    1c6a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c6e:	18 16       	cp	r1, r24
    1c70:	4c f5       	brge	.+82     	; 0x1cc4 <LCD_init+0x48e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c72:	6a a9       	ldd	r22, Y+50	; 0x32
    1c74:	7b a9       	ldd	r23, Y+51	; 0x33
    1c76:	8c a9       	ldd	r24, Y+52	; 0x34
    1c78:	9d a9       	ldd	r25, Y+53	; 0x35
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	40 e2       	ldi	r20, 0x20	; 32
    1c80:	51 e4       	ldi	r21, 0x41	; 65
    1c82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	bc 01       	movw	r22, r24
    1c8c:	cd 01       	movw	r24, r26
    1c8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	9d a7       	std	Y+45, r25	; 0x2d
    1c98:	8c a7       	std	Y+44, r24	; 0x2c
    1c9a:	0f c0       	rjmp	.+30     	; 0x1cba <LCD_init+0x484>
    1c9c:	80 e9       	ldi	r24, 0x90	; 144
    1c9e:	91 e0       	ldi	r25, 0x01	; 1
    1ca0:	9b a7       	std	Y+43, r25	; 0x2b
    1ca2:	8a a7       	std	Y+42, r24	; 0x2a
    1ca4:	8a a5       	ldd	r24, Y+42	; 0x2a
    1ca6:	9b a5       	ldd	r25, Y+43	; 0x2b
    1ca8:	01 97       	sbiw	r24, 0x01	; 1
    1caa:	f1 f7       	brne	.-4      	; 0x1ca8 <LCD_init+0x472>
    1cac:	9b a7       	std	Y+43, r25	; 0x2b
    1cae:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb0:	8c a5       	ldd	r24, Y+44	; 0x2c
    1cb2:	9d a5       	ldd	r25, Y+45	; 0x2d
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	9d a7       	std	Y+45, r25	; 0x2d
    1cb8:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cba:	8c a5       	ldd	r24, Y+44	; 0x2c
    1cbc:	9d a5       	ldd	r25, Y+45	; 0x2d
    1cbe:	00 97       	sbiw	r24, 0x00	; 0
    1cc0:	69 f7       	brne	.-38     	; 0x1c9c <LCD_init+0x466>
    1cc2:	24 c0       	rjmp	.+72     	; 0x1d0c <LCD_init+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc4:	6e a5       	ldd	r22, Y+46	; 0x2e
    1cc6:	7f a5       	ldd	r23, Y+47	; 0x2f
    1cc8:	88 a9       	ldd	r24, Y+48	; 0x30
    1cca:	99 a9       	ldd	r25, Y+49	; 0x31
    1ccc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	9d a7       	std	Y+45, r25	; 0x2d
    1cd6:	8c a7       	std	Y+44, r24	; 0x2c
    1cd8:	8c a5       	ldd	r24, Y+44	; 0x2c
    1cda:	9d a5       	ldd	r25, Y+45	; 0x2d
    1cdc:	99 a7       	std	Y+41, r25	; 0x29
    1cde:	88 a7       	std	Y+40, r24	; 0x28
    1ce0:	88 a5       	ldd	r24, Y+40	; 0x28
    1ce2:	99 a5       	ldd	r25, Y+41	; 0x29
    1ce4:	01 97       	sbiw	r24, 0x01	; 1
    1ce6:	f1 f7       	brne	.-4      	; 0x1ce4 <LCD_init+0x4ae>
    1ce8:	99 a7       	std	Y+41, r25	; 0x29
    1cea:	88 a7       	std	Y+40, r24	; 0x28
    1cec:	0f c0       	rjmp	.+30     	; 0x1d0c <LCD_init+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cee:	6f a9       	ldd	r22, Y+55	; 0x37
    1cf0:	78 ad       	ldd	r23, Y+56	; 0x38
    1cf2:	89 ad       	ldd	r24, Y+57	; 0x39
    1cf4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cf6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	8e ab       	std	Y+54, r24	; 0x36
    1d00:	8e a9       	ldd	r24, Y+54	; 0x36
    1d02:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d04:	8f a1       	ldd	r24, Y+39	; 0x27
    1d06:	8a 95       	dec	r24
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <LCD_init+0x4d0>
    1d0a:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(45);
	
	// Display on off Control (DisplayOn, Cursor on, Blink on)
	LCD_sendCmnd(0b00001111);
    1d0c:	8f e0       	ldi	r24, 0x0F	; 15
    1d0e:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <LCD_sendCmnd>
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	a4 e3       	ldi	r26, 0x34	; 52
    1d18:	b2 e4       	ldi	r27, 0x42	; 66
    1d1a:	8b a3       	std	Y+35, r24	; 0x23
    1d1c:	9c a3       	std	Y+36, r25	; 0x24
    1d1e:	ad a3       	std	Y+37, r26	; 0x25
    1d20:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d22:	6b a1       	ldd	r22, Y+35	; 0x23
    1d24:	7c a1       	ldd	r23, Y+36	; 0x24
    1d26:	8d a1       	ldd	r24, Y+37	; 0x25
    1d28:	9e a1       	ldd	r25, Y+38	; 0x26
    1d2a:	2b ea       	ldi	r18, 0xAB	; 171
    1d2c:	3a ea       	ldi	r19, 0xAA	; 170
    1d2e:	4a ea       	ldi	r20, 0xAA	; 170
    1d30:	50 e4       	ldi	r21, 0x40	; 64
    1d32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	8f 8f       	std	Y+31, r24	; 0x1f
    1d3c:	98 a3       	std	Y+32, r25	; 0x20
    1d3e:	a9 a3       	std	Y+33, r26	; 0x21
    1d40:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1d42:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d44:	78 a1       	ldd	r23, Y+32	; 0x20
    1d46:	89 a1       	ldd	r24, Y+33	; 0x21
    1d48:	9a a1       	ldd	r25, Y+34	; 0x22
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	40 e8       	ldi	r20, 0x80	; 128
    1d50:	5f e3       	ldi	r21, 0x3F	; 63
    1d52:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d56:	88 23       	and	r24, r24
    1d58:	1c f4       	brge	.+6      	; 0x1d60 <LCD_init+0x52a>
		__ticks = 1;
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	8e 8f       	std	Y+30, r24	; 0x1e
    1d5e:	91 c0       	rjmp	.+290    	; 0x1e82 <LCD_init+0x64c>
	else if (__tmp > 255)
    1d60:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d62:	78 a1       	ldd	r23, Y+32	; 0x20
    1d64:	89 a1       	ldd	r24, Y+33	; 0x21
    1d66:	9a a1       	ldd	r25, Y+34	; 0x22
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	4f e7       	ldi	r20, 0x7F	; 127
    1d6e:	53 e4       	ldi	r21, 0x43	; 67
    1d70:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d74:	18 16       	cp	r1, r24
    1d76:	0c f0       	brlt	.+2      	; 0x1d7a <LCD_init+0x544>
    1d78:	7b c0       	rjmp	.+246    	; 0x1e70 <LCD_init+0x63a>
	{
		_delay_ms(__us / 1000.0);
    1d7a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d7c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d7e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d80:	9e a1       	ldd	r25, Y+38	; 0x26
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	4a e7       	ldi	r20, 0x7A	; 122
    1d88:	54 e4       	ldi	r21, 0x44	; 68
    1d8a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	8a 8f       	std	Y+26, r24	; 0x1a
    1d94:	9b 8f       	std	Y+27, r25	; 0x1b
    1d96:	ac 8f       	std	Y+28, r26	; 0x1c
    1d98:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d9a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1d9c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1d9e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1da0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	4a e7       	ldi	r20, 0x7A	; 122
    1da8:	55 e4       	ldi	r21, 0x45	; 69
    1daa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	8e 8b       	std	Y+22, r24	; 0x16
    1db4:	9f 8b       	std	Y+23, r25	; 0x17
    1db6:	a8 8f       	std	Y+24, r26	; 0x18
    1db8:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1dba:	6e 89       	ldd	r22, Y+22	; 0x16
    1dbc:	7f 89       	ldd	r23, Y+23	; 0x17
    1dbe:	88 8d       	ldd	r24, Y+24	; 0x18
    1dc0:	99 8d       	ldd	r25, Y+25	; 0x19
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	40 e8       	ldi	r20, 0x80	; 128
    1dc8:	5f e3       	ldi	r21, 0x3F	; 63
    1dca:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1dce:	88 23       	and	r24, r24
    1dd0:	2c f4       	brge	.+10     	; 0x1ddc <LCD_init+0x5a6>
		__ticks = 1;
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	9d 8b       	std	Y+21, r25	; 0x15
    1dd8:	8c 8b       	std	Y+20, r24	; 0x14
    1dda:	3f c0       	rjmp	.+126    	; 0x1e5a <LCD_init+0x624>
	else if (__tmp > 65535)
    1ddc:	6e 89       	ldd	r22, Y+22	; 0x16
    1dde:	7f 89       	ldd	r23, Y+23	; 0x17
    1de0:	88 8d       	ldd	r24, Y+24	; 0x18
    1de2:	99 8d       	ldd	r25, Y+25	; 0x19
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	3f ef       	ldi	r19, 0xFF	; 255
    1de8:	4f e7       	ldi	r20, 0x7F	; 127
    1dea:	57 e4       	ldi	r21, 0x47	; 71
    1dec:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1df0:	18 16       	cp	r1, r24
    1df2:	4c f5       	brge	.+82     	; 0x1e46 <LCD_init+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1df6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1df8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1dfa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e2       	ldi	r20, 0x20	; 32
    1e02:	51 e4       	ldi	r21, 0x41	; 65
    1e04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	bc 01       	movw	r22, r24
    1e0e:	cd 01       	movw	r24, r26
    1e10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	9d 8b       	std	Y+21, r25	; 0x15
    1e1a:	8c 8b       	std	Y+20, r24	; 0x14
    1e1c:	0f c0       	rjmp	.+30     	; 0x1e3c <LCD_init+0x606>
    1e1e:	80 e9       	ldi	r24, 0x90	; 144
    1e20:	91 e0       	ldi	r25, 0x01	; 1
    1e22:	9b 8b       	std	Y+19, r25	; 0x13
    1e24:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e26:	8a 89       	ldd	r24, Y+18	; 0x12
    1e28:	9b 89       	ldd	r25, Y+19	; 0x13
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	f1 f7       	brne	.-4      	; 0x1e2a <LCD_init+0x5f4>
    1e2e:	9b 8b       	std	Y+19, r25	; 0x13
    1e30:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e32:	8c 89       	ldd	r24, Y+20	; 0x14
    1e34:	9d 89       	ldd	r25, Y+21	; 0x15
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	9d 8b       	std	Y+21, r25	; 0x15
    1e3a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e3c:	8c 89       	ldd	r24, Y+20	; 0x14
    1e3e:	9d 89       	ldd	r25, Y+21	; 0x15
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	69 f7       	brne	.-38     	; 0x1e1e <LCD_init+0x5e8>
    1e44:	24 c0       	rjmp	.+72     	; 0x1e8e <LCD_init+0x658>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e46:	6e 89       	ldd	r22, Y+22	; 0x16
    1e48:	7f 89       	ldd	r23, Y+23	; 0x17
    1e4a:	88 8d       	ldd	r24, Y+24	; 0x18
    1e4c:	99 8d       	ldd	r25, Y+25	; 0x19
    1e4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	9d 8b       	std	Y+21, r25	; 0x15
    1e58:	8c 8b       	std	Y+20, r24	; 0x14
    1e5a:	8c 89       	ldd	r24, Y+20	; 0x14
    1e5c:	9d 89       	ldd	r25, Y+21	; 0x15
    1e5e:	99 8b       	std	Y+17, r25	; 0x11
    1e60:	88 8b       	std	Y+16, r24	; 0x10
    1e62:	88 89       	ldd	r24, Y+16	; 0x10
    1e64:	99 89       	ldd	r25, Y+17	; 0x11
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <LCD_init+0x630>
    1e6a:	99 8b       	std	Y+17, r25	; 0x11
    1e6c:	88 8b       	std	Y+16, r24	; 0x10
    1e6e:	0f c0       	rjmp	.+30     	; 0x1e8e <LCD_init+0x658>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e70:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e72:	78 a1       	ldd	r23, Y+32	; 0x20
    1e74:	89 a1       	ldd	r24, Y+33	; 0x21
    1e76:	9a a1       	ldd	r25, Y+34	; 0x22
    1e78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	8e 8f       	std	Y+30, r24	; 0x1e
    1e82:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e84:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e88:	8a 95       	dec	r24
    1e8a:	f1 f7       	brne	.-4      	; 0x1e88 <LCD_init+0x652>
    1e8c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(45);
	
	// Clear Display
	LCD_sendCmnd(0b00000001);
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <LCD_sendCmnd>
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	a0 e0       	ldi	r26, 0x00	; 0
    1e9a:	b0 e4       	ldi	r27, 0x40	; 64
    1e9c:	8b 87       	std	Y+11, r24	; 0x0b
    1e9e:	9c 87       	std	Y+12, r25	; 0x0c
    1ea0:	ad 87       	std	Y+13, r26	; 0x0d
    1ea2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	4a e7       	ldi	r20, 0x7A	; 122
    1eb2:	55 e4       	ldi	r21, 0x45	; 69
    1eb4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	8f 83       	std	Y+7, r24	; 0x07
    1ebe:	98 87       	std	Y+8, r25	; 0x08
    1ec0:	a9 87       	std	Y+9, r26	; 0x09
    1ec2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ec4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec6:	78 85       	ldd	r23, Y+8	; 0x08
    1ec8:	89 85       	ldd	r24, Y+9	; 0x09
    1eca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	40 e8       	ldi	r20, 0x80	; 128
    1ed2:	5f e3       	ldi	r21, 0x3F	; 63
    1ed4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ed8:	88 23       	and	r24, r24
    1eda:	2c f4       	brge	.+10     	; 0x1ee6 <LCD_init+0x6b0>
		__ticks = 1;
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	9e 83       	std	Y+6, r25	; 0x06
    1ee2:	8d 83       	std	Y+5, r24	; 0x05
    1ee4:	3f c0       	rjmp	.+126    	; 0x1f64 <LCD_init+0x72e>
	else if (__tmp > 65535)
    1ee6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee8:	78 85       	ldd	r23, Y+8	; 0x08
    1eea:	89 85       	ldd	r24, Y+9	; 0x09
    1eec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	3f ef       	ldi	r19, 0xFF	; 255
    1ef2:	4f e7       	ldi	r20, 0x7F	; 127
    1ef4:	57 e4       	ldi	r21, 0x47	; 71
    1ef6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1efa:	18 16       	cp	r1, r24
    1efc:	4c f5       	brge	.+82     	; 0x1f50 <LCD_init+0x71a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	40 e2       	ldi	r20, 0x20	; 32
    1f0c:	51 e4       	ldi	r21, 0x41	; 65
    1f0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	bc 01       	movw	r22, r24
    1f18:	cd 01       	movw	r24, r26
    1f1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	9e 83       	std	Y+6, r25	; 0x06
    1f24:	8d 83       	std	Y+5, r24	; 0x05
    1f26:	0f c0       	rjmp	.+30     	; 0x1f46 <LCD_init+0x710>
    1f28:	80 e9       	ldi	r24, 0x90	; 144
    1f2a:	91 e0       	ldi	r25, 0x01	; 1
    1f2c:	9c 83       	std	Y+4, r25	; 0x04
    1f2e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	9c 81       	ldd	r25, Y+4	; 0x04
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	f1 f7       	brne	.-4      	; 0x1f34 <LCD_init+0x6fe>
    1f38:	9c 83       	std	Y+4, r25	; 0x04
    1f3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	9e 83       	std	Y+6, r25	; 0x06
    1f44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f46:	8d 81       	ldd	r24, Y+5	; 0x05
    1f48:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	69 f7       	brne	.-38     	; 0x1f28 <LCD_init+0x6f2>
    1f4e:	14 c0       	rjmp	.+40     	; 0x1f78 <LCD_init+0x742>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f50:	6f 81       	ldd	r22, Y+7	; 0x07
    1f52:	78 85       	ldd	r23, Y+8	; 0x08
    1f54:	89 85       	ldd	r24, Y+9	; 0x09
    1f56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	9e 83       	std	Y+6, r25	; 0x06
    1f62:	8d 83       	std	Y+5, r24	; 0x05
    1f64:	8d 81       	ldd	r24, Y+5	; 0x05
    1f66:	9e 81       	ldd	r25, Y+6	; 0x06
    1f68:	9a 83       	std	Y+2, r25	; 0x02
    1f6a:	89 83       	std	Y+1, r24	; 0x01
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	f1 f7       	brne	.-4      	; 0x1f70 <LCD_init+0x73a>
    1f74:	9a 83       	std	Y+2, r25	; 0x02
    1f76:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	
	LCD_sendCmnd(0b00000110);
    1f78:	86 e0       	ldi	r24, 0x06	; 6
    1f7a:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <LCD_sendCmnd>
}
    1f7e:	c6 5a       	subi	r28, 0xA6	; 166
    1f80:	df 4f       	sbci	r29, 0xFF	; 255
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	cd bf       	out	0x3d, r28	; 61
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	1f 91       	pop	r17
    1f92:	0f 91       	pop	r16
    1f94:	08 95       	ret

00001f96 <LCD_sendCmnd>:

void LCD_sendCmnd(u8 Cmnd)
{
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
    1f9e:	6d 97       	sbiw	r28, 0x1d	; 29
    1fa0:	0f b6       	in	r0, 0x3f	; 63
    1fa2:	f8 94       	cli
    1fa4:	de bf       	out	0x3e, r29	; 62
    1fa6:	0f be       	out	0x3f, r0	; 63
    1fa8:	cd bf       	out	0x3d, r28	; 61
    1faa:	8d 8f       	std	Y+29, r24	; 0x1d
	// set Rs pin = 0 (write command)
	DIO_setPinValue(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_LOW);
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	61 e0       	ldi	r22, 0x01	; 1
    1fb0:	40 e0       	ldi	r20, 0x00	; 0
    1fb2:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_setPinValue>
	
	// set Rw pin = 0 (write)
	DIO_setPinValue(LCD_RW_PORT, LCD_RW_PIN, DIO_PIN_LOW);
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	62 e0       	ldi	r22, 0x02	; 2
    1fba:	40 e0       	ldi	r20, 0x00	; 0
    1fbc:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_setPinValue>
	
	// Write The Most 4 bits Of command on Data Pins
	private_writeHalfPort(Cmnd>>4);
    1fc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fc2:	82 95       	swap	r24
    1fc4:	8f 70       	andi	r24, 0x0F	; 15
    1fc6:	0e 94 55 13 	call	0x26aa	; 0x26aa <private_writeHalfPort>
	
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_HIGH);
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	63 e0       	ldi	r22, 0x03	; 3
    1fce:	41 e0       	ldi	r20, 0x01	; 1
    1fd0:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_setPinValue>
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	a0 e8       	ldi	r26, 0x80	; 128
    1fda:	bf e3       	ldi	r27, 0x3F	; 63
    1fdc:	89 8f       	std	Y+25, r24	; 0x19
    1fde:	9a 8f       	std	Y+26, r25	; 0x1a
    1fe0:	ab 8f       	std	Y+27, r26	; 0x1b
    1fe2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe4:	69 8d       	ldd	r22, Y+25	; 0x19
    1fe6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fe8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	4a e7       	ldi	r20, 0x7A	; 122
    1ff2:	55 e4       	ldi	r21, 0x45	; 69
    1ff4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	8d 8b       	std	Y+21, r24	; 0x15
    1ffe:	9e 8b       	std	Y+22, r25	; 0x16
    2000:	af 8b       	std	Y+23, r26	; 0x17
    2002:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2004:	6d 89       	ldd	r22, Y+21	; 0x15
    2006:	7e 89       	ldd	r23, Y+22	; 0x16
    2008:	8f 89       	ldd	r24, Y+23	; 0x17
    200a:	98 8d       	ldd	r25, Y+24	; 0x18
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	40 e8       	ldi	r20, 0x80	; 128
    2012:	5f e3       	ldi	r21, 0x3F	; 63
    2014:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2018:	88 23       	and	r24, r24
    201a:	2c f4       	brge	.+10     	; 0x2026 <LCD_sendCmnd+0x90>
		__ticks = 1;
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	9c 8b       	std	Y+20, r25	; 0x14
    2022:	8b 8b       	std	Y+19, r24	; 0x13
    2024:	3f c0       	rjmp	.+126    	; 0x20a4 <LCD_sendCmnd+0x10e>
	else if (__tmp > 65535)
    2026:	6d 89       	ldd	r22, Y+21	; 0x15
    2028:	7e 89       	ldd	r23, Y+22	; 0x16
    202a:	8f 89       	ldd	r24, Y+23	; 0x17
    202c:	98 8d       	ldd	r25, Y+24	; 0x18
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	3f ef       	ldi	r19, 0xFF	; 255
    2032:	4f e7       	ldi	r20, 0x7F	; 127
    2034:	57 e4       	ldi	r21, 0x47	; 71
    2036:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    203a:	18 16       	cp	r1, r24
    203c:	4c f5       	brge	.+82     	; 0x2090 <LCD_sendCmnd+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    203e:	69 8d       	ldd	r22, Y+25	; 0x19
    2040:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2042:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2044:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	40 e2       	ldi	r20, 0x20	; 32
    204c:	51 e4       	ldi	r21, 0x41	; 65
    204e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	bc 01       	movw	r22, r24
    2058:	cd 01       	movw	r24, r26
    205a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	9c 8b       	std	Y+20, r25	; 0x14
    2064:	8b 8b       	std	Y+19, r24	; 0x13
    2066:	0f c0       	rjmp	.+30     	; 0x2086 <LCD_sendCmnd+0xf0>
    2068:	80 e9       	ldi	r24, 0x90	; 144
    206a:	91 e0       	ldi	r25, 0x01	; 1
    206c:	9a 8b       	std	Y+18, r25	; 0x12
    206e:	89 8b       	std	Y+17, r24	; 0x11
    2070:	89 89       	ldd	r24, Y+17	; 0x11
    2072:	9a 89       	ldd	r25, Y+18	; 0x12
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	f1 f7       	brne	.-4      	; 0x2074 <LCD_sendCmnd+0xde>
    2078:	9a 8b       	std	Y+18, r25	; 0x12
    207a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207c:	8b 89       	ldd	r24, Y+19	; 0x13
    207e:	9c 89       	ldd	r25, Y+20	; 0x14
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	9c 8b       	std	Y+20, r25	; 0x14
    2084:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2086:	8b 89       	ldd	r24, Y+19	; 0x13
    2088:	9c 89       	ldd	r25, Y+20	; 0x14
    208a:	00 97       	sbiw	r24, 0x00	; 0
    208c:	69 f7       	brne	.-38     	; 0x2068 <LCD_sendCmnd+0xd2>
    208e:	14 c0       	rjmp	.+40     	; 0x20b8 <LCD_sendCmnd+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2090:	6d 89       	ldd	r22, Y+21	; 0x15
    2092:	7e 89       	ldd	r23, Y+22	; 0x16
    2094:	8f 89       	ldd	r24, Y+23	; 0x17
    2096:	98 8d       	ldd	r25, Y+24	; 0x18
    2098:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	9c 8b       	std	Y+20, r25	; 0x14
    20a2:	8b 8b       	std	Y+19, r24	; 0x13
    20a4:	8b 89       	ldd	r24, Y+19	; 0x13
    20a6:	9c 89       	ldd	r25, Y+20	; 0x14
    20a8:	98 8b       	std	Y+16, r25	; 0x10
    20aa:	8f 87       	std	Y+15, r24	; 0x0f
    20ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ae:	98 89       	ldd	r25, Y+16	; 0x10
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	f1 f7       	brne	.-4      	; 0x20b0 <LCD_sendCmnd+0x11a>
    20b4:	98 8b       	std	Y+16, r25	; 0x10
    20b6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_LOW);
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	63 e0       	ldi	r22, 0x03	; 3
    20bc:	40 e0       	ldi	r20, 0x00	; 0
    20be:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_setPinValue>
	
	// Write The Least 4 bits Of command on Data Pins
	private_writeHalfPort(Cmnd);
    20c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20c4:	0e 94 55 13 	call	0x26aa	; 0x26aa <private_writeHalfPort>
	
	/* Enable Pulse *//* H => L */	
	DIO_setPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_HIGH);
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	63 e0       	ldi	r22, 0x03	; 3
    20cc:	41 e0       	ldi	r20, 0x01	; 1
    20ce:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_setPinValue>
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	a0 e8       	ldi	r26, 0x80	; 128
    20d8:	bf e3       	ldi	r27, 0x3F	; 63
    20da:	8b 87       	std	Y+11, r24	; 0x0b
    20dc:	9c 87       	std	Y+12, r25	; 0x0c
    20de:	ad 87       	std	Y+13, r26	; 0x0d
    20e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	4a e7       	ldi	r20, 0x7A	; 122
    20f0:	55 e4       	ldi	r21, 0x45	; 69
    20f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	8f 83       	std	Y+7, r24	; 0x07
    20fc:	98 87       	std	Y+8, r25	; 0x08
    20fe:	a9 87       	std	Y+9, r26	; 0x09
    2100:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2102:	6f 81       	ldd	r22, Y+7	; 0x07
    2104:	78 85       	ldd	r23, Y+8	; 0x08
    2106:	89 85       	ldd	r24, Y+9	; 0x09
    2108:	9a 85       	ldd	r25, Y+10	; 0x0a
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	40 e8       	ldi	r20, 0x80	; 128
    2110:	5f e3       	ldi	r21, 0x3F	; 63
    2112:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2116:	88 23       	and	r24, r24
    2118:	2c f4       	brge	.+10     	; 0x2124 <LCD_sendCmnd+0x18e>
		__ticks = 1;
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	9e 83       	std	Y+6, r25	; 0x06
    2120:	8d 83       	std	Y+5, r24	; 0x05
    2122:	3f c0       	rjmp	.+126    	; 0x21a2 <LCD_sendCmnd+0x20c>
	else if (__tmp > 65535)
    2124:	6f 81       	ldd	r22, Y+7	; 0x07
    2126:	78 85       	ldd	r23, Y+8	; 0x08
    2128:	89 85       	ldd	r24, Y+9	; 0x09
    212a:	9a 85       	ldd	r25, Y+10	; 0x0a
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	3f ef       	ldi	r19, 0xFF	; 255
    2130:	4f e7       	ldi	r20, 0x7F	; 127
    2132:	57 e4       	ldi	r21, 0x47	; 71
    2134:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2138:	18 16       	cp	r1, r24
    213a:	4c f5       	brge	.+82     	; 0x218e <LCD_sendCmnd+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213c:	6b 85       	ldd	r22, Y+11	; 0x0b
    213e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2140:	8d 85       	ldd	r24, Y+13	; 0x0d
    2142:	9e 85       	ldd	r25, Y+14	; 0x0e
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	40 e2       	ldi	r20, 0x20	; 32
    214a:	51 e4       	ldi	r21, 0x41	; 65
    214c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	bc 01       	movw	r22, r24
    2156:	cd 01       	movw	r24, r26
    2158:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	9e 83       	std	Y+6, r25	; 0x06
    2162:	8d 83       	std	Y+5, r24	; 0x05
    2164:	0f c0       	rjmp	.+30     	; 0x2184 <LCD_sendCmnd+0x1ee>
    2166:	80 e9       	ldi	r24, 0x90	; 144
    2168:	91 e0       	ldi	r25, 0x01	; 1
    216a:	9c 83       	std	Y+4, r25	; 0x04
    216c:	8b 83       	std	Y+3, r24	; 0x03
    216e:	8b 81       	ldd	r24, Y+3	; 0x03
    2170:	9c 81       	ldd	r25, Y+4	; 0x04
    2172:	01 97       	sbiw	r24, 0x01	; 1
    2174:	f1 f7       	brne	.-4      	; 0x2172 <LCD_sendCmnd+0x1dc>
    2176:	9c 83       	std	Y+4, r25	; 0x04
    2178:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217a:	8d 81       	ldd	r24, Y+5	; 0x05
    217c:	9e 81       	ldd	r25, Y+6	; 0x06
    217e:	01 97       	sbiw	r24, 0x01	; 1
    2180:	9e 83       	std	Y+6, r25	; 0x06
    2182:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2184:	8d 81       	ldd	r24, Y+5	; 0x05
    2186:	9e 81       	ldd	r25, Y+6	; 0x06
    2188:	00 97       	sbiw	r24, 0x00	; 0
    218a:	69 f7       	brne	.-38     	; 0x2166 <LCD_sendCmnd+0x1d0>
    218c:	14 c0       	rjmp	.+40     	; 0x21b6 <LCD_sendCmnd+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    218e:	6f 81       	ldd	r22, Y+7	; 0x07
    2190:	78 85       	ldd	r23, Y+8	; 0x08
    2192:	89 85       	ldd	r24, Y+9	; 0x09
    2194:	9a 85       	ldd	r25, Y+10	; 0x0a
    2196:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	9e 83       	std	Y+6, r25	; 0x06
    21a0:	8d 83       	std	Y+5, r24	; 0x05
    21a2:	8d 81       	ldd	r24, Y+5	; 0x05
    21a4:	9e 81       	ldd	r25, Y+6	; 0x06
    21a6:	9a 83       	std	Y+2, r25	; 0x02
    21a8:	89 83       	std	Y+1, r24	; 0x01
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
    21ac:	9a 81       	ldd	r25, Y+2	; 0x02
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	f1 f7       	brne	.-4      	; 0x21ae <LCD_sendCmnd+0x218>
    21b2:	9a 83       	std	Y+2, r25	; 0x02
    21b4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_LOW);
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	63 e0       	ldi	r22, 0x03	; 3
    21ba:	40 e0       	ldi	r20, 0x00	; 0
    21bc:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_setPinValue>
}
    21c0:	6d 96       	adiw	r28, 0x1d	; 29
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	f8 94       	cli
    21c6:	de bf       	out	0x3e, r29	; 62
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	08 95       	ret

000021d2 <LCD_sendChar>:


void LCD_sendChar(u8 data)
{
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	6d 97       	sbiw	r28, 0x1d	; 29
    21dc:	0f b6       	in	r0, 0x3f	; 63
    21de:	f8 94       	cli
    21e0:	de bf       	out	0x3e, r29	; 62
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	cd bf       	out	0x3d, r28	; 61
    21e6:	8d 8f       	std	Y+29, r24	; 0x1d
	// set Rs pin = 1 (write data)
	DIO_setPinValue(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_HIGH);
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	61 e0       	ldi	r22, 0x01	; 1
    21ec:	41 e0       	ldi	r20, 0x01	; 1
    21ee:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_setPinValue>
	
	// set Rw pin = 0 (write)
	DIO_setPinValue(LCD_RW_PORT, LCD_RW_PIN, DIO_PIN_LOW);
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	62 e0       	ldi	r22, 0x02	; 2
    21f6:	40 e0       	ldi	r20, 0x00	; 0
    21f8:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_setPinValue>
	
	// Write The Most 4 bits Of data on Data Pins
	private_writeHalfPort(data>>4);
    21fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21fe:	82 95       	swap	r24
    2200:	8f 70       	andi	r24, 0x0F	; 15
    2202:	0e 94 55 13 	call	0x26aa	; 0x26aa <private_writeHalfPort>
	
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_HIGH);
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	63 e0       	ldi	r22, 0x03	; 3
    220a:	41 e0       	ldi	r20, 0x01	; 1
    220c:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_setPinValue>
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	a0 e8       	ldi	r26, 0x80	; 128
    2216:	bf e3       	ldi	r27, 0x3F	; 63
    2218:	89 8f       	std	Y+25, r24	; 0x19
    221a:	9a 8f       	std	Y+26, r25	; 0x1a
    221c:	ab 8f       	std	Y+27, r26	; 0x1b
    221e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2220:	69 8d       	ldd	r22, Y+25	; 0x19
    2222:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2224:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2226:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	4a e7       	ldi	r20, 0x7A	; 122
    222e:	55 e4       	ldi	r21, 0x45	; 69
    2230:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	8d 8b       	std	Y+21, r24	; 0x15
    223a:	9e 8b       	std	Y+22, r25	; 0x16
    223c:	af 8b       	std	Y+23, r26	; 0x17
    223e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2240:	6d 89       	ldd	r22, Y+21	; 0x15
    2242:	7e 89       	ldd	r23, Y+22	; 0x16
    2244:	8f 89       	ldd	r24, Y+23	; 0x17
    2246:	98 8d       	ldd	r25, Y+24	; 0x18
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	40 e8       	ldi	r20, 0x80	; 128
    224e:	5f e3       	ldi	r21, 0x3F	; 63
    2250:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2254:	88 23       	and	r24, r24
    2256:	2c f4       	brge	.+10     	; 0x2262 <LCD_sendChar+0x90>
		__ticks = 1;
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	9c 8b       	std	Y+20, r25	; 0x14
    225e:	8b 8b       	std	Y+19, r24	; 0x13
    2260:	3f c0       	rjmp	.+126    	; 0x22e0 <LCD_sendChar+0x10e>
	else if (__tmp > 65535)
    2262:	6d 89       	ldd	r22, Y+21	; 0x15
    2264:	7e 89       	ldd	r23, Y+22	; 0x16
    2266:	8f 89       	ldd	r24, Y+23	; 0x17
    2268:	98 8d       	ldd	r25, Y+24	; 0x18
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	3f ef       	ldi	r19, 0xFF	; 255
    226e:	4f e7       	ldi	r20, 0x7F	; 127
    2270:	57 e4       	ldi	r21, 0x47	; 71
    2272:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2276:	18 16       	cp	r1, r24
    2278:	4c f5       	brge	.+82     	; 0x22cc <LCD_sendChar+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227a:	69 8d       	ldd	r22, Y+25	; 0x19
    227c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    227e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2280:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	40 e2       	ldi	r20, 0x20	; 32
    2288:	51 e4       	ldi	r21, 0x41	; 65
    228a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	bc 01       	movw	r22, r24
    2294:	cd 01       	movw	r24, r26
    2296:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	9c 8b       	std	Y+20, r25	; 0x14
    22a0:	8b 8b       	std	Y+19, r24	; 0x13
    22a2:	0f c0       	rjmp	.+30     	; 0x22c2 <LCD_sendChar+0xf0>
    22a4:	80 e9       	ldi	r24, 0x90	; 144
    22a6:	91 e0       	ldi	r25, 0x01	; 1
    22a8:	9a 8b       	std	Y+18, r25	; 0x12
    22aa:	89 8b       	std	Y+17, r24	; 0x11
    22ac:	89 89       	ldd	r24, Y+17	; 0x11
    22ae:	9a 89       	ldd	r25, Y+18	; 0x12
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	f1 f7       	brne	.-4      	; 0x22b0 <LCD_sendChar+0xde>
    22b4:	9a 8b       	std	Y+18, r25	; 0x12
    22b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b8:	8b 89       	ldd	r24, Y+19	; 0x13
    22ba:	9c 89       	ldd	r25, Y+20	; 0x14
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	9c 8b       	std	Y+20, r25	; 0x14
    22c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c2:	8b 89       	ldd	r24, Y+19	; 0x13
    22c4:	9c 89       	ldd	r25, Y+20	; 0x14
    22c6:	00 97       	sbiw	r24, 0x00	; 0
    22c8:	69 f7       	brne	.-38     	; 0x22a4 <LCD_sendChar+0xd2>
    22ca:	14 c0       	rjmp	.+40     	; 0x22f4 <LCD_sendChar+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22cc:	6d 89       	ldd	r22, Y+21	; 0x15
    22ce:	7e 89       	ldd	r23, Y+22	; 0x16
    22d0:	8f 89       	ldd	r24, Y+23	; 0x17
    22d2:	98 8d       	ldd	r25, Y+24	; 0x18
    22d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	9c 8b       	std	Y+20, r25	; 0x14
    22de:	8b 8b       	std	Y+19, r24	; 0x13
    22e0:	8b 89       	ldd	r24, Y+19	; 0x13
    22e2:	9c 89       	ldd	r25, Y+20	; 0x14
    22e4:	98 8b       	std	Y+16, r25	; 0x10
    22e6:	8f 87       	std	Y+15, r24	; 0x0f
    22e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    22ea:	98 89       	ldd	r25, Y+16	; 0x10
    22ec:	01 97       	sbiw	r24, 0x01	; 1
    22ee:	f1 f7       	brne	.-4      	; 0x22ec <LCD_sendChar+0x11a>
    22f0:	98 8b       	std	Y+16, r25	; 0x10
    22f2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_LOW);
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	63 e0       	ldi	r22, 0x03	; 3
    22f8:	40 e0       	ldi	r20, 0x00	; 0
    22fa:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_setPinValue>
	
	// Write The Least 4 bits Of data on Data Pins
	private_writeHalfPort(data);
    22fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2300:	0e 94 55 13 	call	0x26aa	; 0x26aa <private_writeHalfPort>
	
	/* Enable Pulse *//* H => L */	
	DIO_setPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_HIGH);
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	63 e0       	ldi	r22, 0x03	; 3
    2308:	41 e0       	ldi	r20, 0x01	; 1
    230a:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_setPinValue>
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	a0 e8       	ldi	r26, 0x80	; 128
    2314:	bf e3       	ldi	r27, 0x3F	; 63
    2316:	8b 87       	std	Y+11, r24	; 0x0b
    2318:	9c 87       	std	Y+12, r25	; 0x0c
    231a:	ad 87       	std	Y+13, r26	; 0x0d
    231c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    231e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2320:	7c 85       	ldd	r23, Y+12	; 0x0c
    2322:	8d 85       	ldd	r24, Y+13	; 0x0d
    2324:	9e 85       	ldd	r25, Y+14	; 0x0e
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	4a e7       	ldi	r20, 0x7A	; 122
    232c:	55 e4       	ldi	r21, 0x45	; 69
    232e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	8f 83       	std	Y+7, r24	; 0x07
    2338:	98 87       	std	Y+8, r25	; 0x08
    233a:	a9 87       	std	Y+9, r26	; 0x09
    233c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    233e:	6f 81       	ldd	r22, Y+7	; 0x07
    2340:	78 85       	ldd	r23, Y+8	; 0x08
    2342:	89 85       	ldd	r24, Y+9	; 0x09
    2344:	9a 85       	ldd	r25, Y+10	; 0x0a
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	40 e8       	ldi	r20, 0x80	; 128
    234c:	5f e3       	ldi	r21, 0x3F	; 63
    234e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2352:	88 23       	and	r24, r24
    2354:	2c f4       	brge	.+10     	; 0x2360 <LCD_sendChar+0x18e>
		__ticks = 1;
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	9e 83       	std	Y+6, r25	; 0x06
    235c:	8d 83       	std	Y+5, r24	; 0x05
    235e:	3f c0       	rjmp	.+126    	; 0x23de <LCD_sendChar+0x20c>
	else if (__tmp > 65535)
    2360:	6f 81       	ldd	r22, Y+7	; 0x07
    2362:	78 85       	ldd	r23, Y+8	; 0x08
    2364:	89 85       	ldd	r24, Y+9	; 0x09
    2366:	9a 85       	ldd	r25, Y+10	; 0x0a
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	3f ef       	ldi	r19, 0xFF	; 255
    236c:	4f e7       	ldi	r20, 0x7F	; 127
    236e:	57 e4       	ldi	r21, 0x47	; 71
    2370:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2374:	18 16       	cp	r1, r24
    2376:	4c f5       	brge	.+82     	; 0x23ca <LCD_sendChar+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2378:	6b 85       	ldd	r22, Y+11	; 0x0b
    237a:	7c 85       	ldd	r23, Y+12	; 0x0c
    237c:	8d 85       	ldd	r24, Y+13	; 0x0d
    237e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	40 e2       	ldi	r20, 0x20	; 32
    2386:	51 e4       	ldi	r21, 0x41	; 65
    2388:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	bc 01       	movw	r22, r24
    2392:	cd 01       	movw	r24, r26
    2394:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	9e 83       	std	Y+6, r25	; 0x06
    239e:	8d 83       	std	Y+5, r24	; 0x05
    23a0:	0f c0       	rjmp	.+30     	; 0x23c0 <LCD_sendChar+0x1ee>
    23a2:	80 e9       	ldi	r24, 0x90	; 144
    23a4:	91 e0       	ldi	r25, 0x01	; 1
    23a6:	9c 83       	std	Y+4, r25	; 0x04
    23a8:	8b 83       	std	Y+3, r24	; 0x03
    23aa:	8b 81       	ldd	r24, Y+3	; 0x03
    23ac:	9c 81       	ldd	r25, Y+4	; 0x04
    23ae:	01 97       	sbiw	r24, 0x01	; 1
    23b0:	f1 f7       	brne	.-4      	; 0x23ae <LCD_sendChar+0x1dc>
    23b2:	9c 83       	std	Y+4, r25	; 0x04
    23b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b6:	8d 81       	ldd	r24, Y+5	; 0x05
    23b8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ba:	01 97       	sbiw	r24, 0x01	; 1
    23bc:	9e 83       	std	Y+6, r25	; 0x06
    23be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c0:	8d 81       	ldd	r24, Y+5	; 0x05
    23c2:	9e 81       	ldd	r25, Y+6	; 0x06
    23c4:	00 97       	sbiw	r24, 0x00	; 0
    23c6:	69 f7       	brne	.-38     	; 0x23a2 <LCD_sendChar+0x1d0>
    23c8:	14 c0       	rjmp	.+40     	; 0x23f2 <LCD_sendChar+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ca:	6f 81       	ldd	r22, Y+7	; 0x07
    23cc:	78 85       	ldd	r23, Y+8	; 0x08
    23ce:	89 85       	ldd	r24, Y+9	; 0x09
    23d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	9e 83       	std	Y+6, r25	; 0x06
    23dc:	8d 83       	std	Y+5, r24	; 0x05
    23de:	8d 81       	ldd	r24, Y+5	; 0x05
    23e0:	9e 81       	ldd	r25, Y+6	; 0x06
    23e2:	9a 83       	std	Y+2, r25	; 0x02
    23e4:	89 83       	std	Y+1, r24	; 0x01
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	f1 f7       	brne	.-4      	; 0x23ea <LCD_sendChar+0x218>
    23ee:	9a 83       	std	Y+2, r25	; 0x02
    23f0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_LOW);
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	63 e0       	ldi	r22, 0x03	; 3
    23f6:	40 e0       	ldi	r20, 0x00	; 0
    23f8:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_setPinValue>
}
    23fc:	6d 96       	adiw	r28, 0x1d	; 29
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	f8 94       	cli
    2402:	de bf       	out	0x3e, r29	; 62
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	cd bf       	out	0x3d, r28	; 61
    2408:	cf 91       	pop	r28
    240a:	df 91       	pop	r29
    240c:	08 95       	ret

0000240e <LCD_writeString>:


void LCD_writeString(u8* String)
{
    240e:	df 93       	push	r29
    2410:	cf 93       	push	r28
    2412:	00 d0       	rcall	.+0      	; 0x2414 <LCD_writeString+0x6>
    2414:	0f 92       	push	r0
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    241a:	9b 83       	std	Y+3, r25	; 0x03
    241c:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter=0;
    241e:	19 82       	std	Y+1, r1	; 0x01
    2420:	0e c0       	rjmp	.+28     	; 0x243e <LCD_writeString+0x30>
	while(String[counter]!='\0')
	{
		LCD_sendChar(String[counter]);
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	28 2f       	mov	r18, r24
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	8a 81       	ldd	r24, Y+2	; 0x02
    242a:	9b 81       	ldd	r25, Y+3	; 0x03
    242c:	fc 01       	movw	r30, r24
    242e:	e2 0f       	add	r30, r18
    2430:	f3 1f       	adc	r31, r19
    2432:	80 81       	ld	r24, Z
    2434:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_sendChar>
		++counter;
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	8f 5f       	subi	r24, 0xFF	; 255
    243c:	89 83       	std	Y+1, r24	; 0x01


void LCD_writeString(u8* String)
{
	u8 counter=0;
	while(String[counter]!='\0')
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	28 2f       	mov	r18, r24
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	8a 81       	ldd	r24, Y+2	; 0x02
    2446:	9b 81       	ldd	r25, Y+3	; 0x03
    2448:	fc 01       	movw	r30, r24
    244a:	e2 0f       	add	r30, r18
    244c:	f3 1f       	adc	r31, r19
    244e:	80 81       	ld	r24, Z
    2450:	88 23       	and	r24, r24
    2452:	39 f7       	brne	.-50     	; 0x2422 <LCD_writeString+0x14>
	{
		LCD_sendChar(String[counter]);
		++counter;
	}
}
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	0f 90       	pop	r0
    245a:	cf 91       	pop	r28
    245c:	df 91       	pop	r29
    245e:	08 95       	ret

00002460 <LCD_clear>:


void LCD_clear(void)
{
    2460:	df 93       	push	r29
    2462:	cf 93       	push	r28
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	2e 97       	sbiw	r28, 0x0e	; 14
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	de bf       	out	0x3e, r29	; 62
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	cd bf       	out	0x3d, r28	; 61
	// Clear Display
	LCD_sendCmnd(0b00000001);
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <LCD_sendCmnd>
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	a0 e0       	ldi	r26, 0x00	; 0
    2480:	b0 e4       	ldi	r27, 0x40	; 64
    2482:	8b 87       	std	Y+11, r24	; 0x0b
    2484:	9c 87       	std	Y+12, r25	; 0x0c
    2486:	ad 87       	std	Y+13, r26	; 0x0d
    2488:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248a:	6b 85       	ldd	r22, Y+11	; 0x0b
    248c:	7c 85       	ldd	r23, Y+12	; 0x0c
    248e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2490:	9e 85       	ldd	r25, Y+14	; 0x0e
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	4a e7       	ldi	r20, 0x7A	; 122
    2498:	55 e4       	ldi	r21, 0x45	; 69
    249a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	8f 83       	std	Y+7, r24	; 0x07
    24a4:	98 87       	std	Y+8, r25	; 0x08
    24a6:	a9 87       	std	Y+9, r26	; 0x09
    24a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24aa:	6f 81       	ldd	r22, Y+7	; 0x07
    24ac:	78 85       	ldd	r23, Y+8	; 0x08
    24ae:	89 85       	ldd	r24, Y+9	; 0x09
    24b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	40 e8       	ldi	r20, 0x80	; 128
    24b8:	5f e3       	ldi	r21, 0x3F	; 63
    24ba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24be:	88 23       	and	r24, r24
    24c0:	2c f4       	brge	.+10     	; 0x24cc <LCD_clear+0x6c>
		__ticks = 1;
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	9e 83       	std	Y+6, r25	; 0x06
    24c8:	8d 83       	std	Y+5, r24	; 0x05
    24ca:	3f c0       	rjmp	.+126    	; 0x254a <LCD_clear+0xea>
	else if (__tmp > 65535)
    24cc:	6f 81       	ldd	r22, Y+7	; 0x07
    24ce:	78 85       	ldd	r23, Y+8	; 0x08
    24d0:	89 85       	ldd	r24, Y+9	; 0x09
    24d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	3f ef       	ldi	r19, 0xFF	; 255
    24d8:	4f e7       	ldi	r20, 0x7F	; 127
    24da:	57 e4       	ldi	r21, 0x47	; 71
    24dc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    24e0:	18 16       	cp	r1, r24
    24e2:	4c f5       	brge	.+82     	; 0x2536 <LCD_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	40 e2       	ldi	r20, 0x20	; 32
    24f2:	51 e4       	ldi	r21, 0x41	; 65
    24f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	bc 01       	movw	r22, r24
    24fe:	cd 01       	movw	r24, r26
    2500:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	9e 83       	std	Y+6, r25	; 0x06
    250a:	8d 83       	std	Y+5, r24	; 0x05
    250c:	0f c0       	rjmp	.+30     	; 0x252c <LCD_clear+0xcc>
    250e:	80 e9       	ldi	r24, 0x90	; 144
    2510:	91 e0       	ldi	r25, 0x01	; 1
    2512:	9c 83       	std	Y+4, r25	; 0x04
    2514:	8b 83       	std	Y+3, r24	; 0x03
    2516:	8b 81       	ldd	r24, Y+3	; 0x03
    2518:	9c 81       	ldd	r25, Y+4	; 0x04
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	f1 f7       	brne	.-4      	; 0x251a <LCD_clear+0xba>
    251e:	9c 83       	std	Y+4, r25	; 0x04
    2520:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2522:	8d 81       	ldd	r24, Y+5	; 0x05
    2524:	9e 81       	ldd	r25, Y+6	; 0x06
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	9e 83       	std	Y+6, r25	; 0x06
    252a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252c:	8d 81       	ldd	r24, Y+5	; 0x05
    252e:	9e 81       	ldd	r25, Y+6	; 0x06
    2530:	00 97       	sbiw	r24, 0x00	; 0
    2532:	69 f7       	brne	.-38     	; 0x250e <LCD_clear+0xae>
    2534:	14 c0       	rjmp	.+40     	; 0x255e <LCD_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2536:	6f 81       	ldd	r22, Y+7	; 0x07
    2538:	78 85       	ldd	r23, Y+8	; 0x08
    253a:	89 85       	ldd	r24, Y+9	; 0x09
    253c:	9a 85       	ldd	r25, Y+10	; 0x0a
    253e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	9e 83       	std	Y+6, r25	; 0x06
    2548:	8d 83       	std	Y+5, r24	; 0x05
    254a:	8d 81       	ldd	r24, Y+5	; 0x05
    254c:	9e 81       	ldd	r25, Y+6	; 0x06
    254e:	9a 83       	std	Y+2, r25	; 0x02
    2550:	89 83       	std	Y+1, r24	; 0x01
    2552:	89 81       	ldd	r24, Y+1	; 0x01
    2554:	9a 81       	ldd	r25, Y+2	; 0x02
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	f1 f7       	brne	.-4      	; 0x2556 <LCD_clear+0xf6>
    255a:	9a 83       	std	Y+2, r25	; 0x02
    255c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    255e:	2e 96       	adiw	r28, 0x0e	; 14
    2560:	0f b6       	in	r0, 0x3f	; 63
    2562:	f8 94       	cli
    2564:	de bf       	out	0x3e, r29	; 62
    2566:	0f be       	out	0x3f, r0	; 63
    2568:	cd bf       	out	0x3d, r28	; 61
    256a:	cf 91       	pop	r28
    256c:	df 91       	pop	r29
    256e:	08 95       	ret

00002570 <LCD_writeNumber>:


void LCD_writeNumber(u32 number)
{
    2570:	ef 92       	push	r14
    2572:	ff 92       	push	r15
    2574:	0f 93       	push	r16
    2576:	1f 93       	push	r17
    2578:	df 93       	push	r29
    257a:	cf 93       	push	r28
    257c:	cd b7       	in	r28, 0x3d	; 61
    257e:	de b7       	in	r29, 0x3e	; 62
    2580:	28 97       	sbiw	r28, 0x08	; 8
    2582:	0f b6       	in	r0, 0x3f	; 63
    2584:	f8 94       	cli
    2586:	de bf       	out	0x3e, r29	; 62
    2588:	0f be       	out	0x3f, r0	; 63
    258a:	cd bf       	out	0x3d, r28	; 61
    258c:	6d 83       	std	Y+5, r22	; 0x05
    258e:	7e 83       	std	Y+6, r23	; 0x06
    2590:	8f 83       	std	Y+7, r24	; 0x07
    2592:	98 87       	std	Y+8, r25	; 0x08
	u32 reversed = 1;
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	a0 e0       	ldi	r26, 0x00	; 0
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	89 83       	std	Y+1, r24	; 0x01
    259e:	9a 83       	std	Y+2, r25	; 0x02
    25a0:	ab 83       	std	Y+3, r26	; 0x03
    25a2:	bc 83       	std	Y+4, r27	; 0x04
	if (number == 0)
    25a4:	8d 81       	ldd	r24, Y+5	; 0x05
    25a6:	9e 81       	ldd	r25, Y+6	; 0x06
    25a8:	af 81       	ldd	r26, Y+7	; 0x07
    25aa:	b8 85       	ldd	r27, Y+8	; 0x08
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	a1 05       	cpc	r26, r1
    25b0:	b1 05       	cpc	r27, r1
    25b2:	d1 f5       	brne	.+116    	; 0x2628 <LCD_writeNumber+0xb8>
	{
		LCD_sendChar('0');
    25b4:	80 e3       	ldi	r24, 0x30	; 48
    25b6:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_sendChar>
    25ba:	6a c0       	rjmp	.+212    	; 0x2690 <LCD_writeNumber+0x120>
	else
	{
		// Reverse Number
		while (number != 0)
		{
			reversed = reversed*10 + (number%10);
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	9a 81       	ldd	r25, Y+2	; 0x02
    25c0:	ab 81       	ldd	r26, Y+3	; 0x03
    25c2:	bc 81       	ldd	r27, Y+4	; 0x04
    25c4:	2a e0       	ldi	r18, 0x0A	; 10
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e0       	ldi	r20, 0x00	; 0
    25ca:	50 e0       	ldi	r21, 0x00	; 0
    25cc:	bc 01       	movw	r22, r24
    25ce:	cd 01       	movw	r24, r26
    25d0:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <__mulsi3>
    25d4:	7b 01       	movw	r14, r22
    25d6:	8c 01       	movw	r16, r24
    25d8:	8d 81       	ldd	r24, Y+5	; 0x05
    25da:	9e 81       	ldd	r25, Y+6	; 0x06
    25dc:	af 81       	ldd	r26, Y+7	; 0x07
    25de:	b8 85       	ldd	r27, Y+8	; 0x08
    25e0:	2a e0       	ldi	r18, 0x0A	; 10
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	40 e0       	ldi	r20, 0x00	; 0
    25e6:	50 e0       	ldi	r21, 0x00	; 0
    25e8:	bc 01       	movw	r22, r24
    25ea:	cd 01       	movw	r24, r26
    25ec:	0e 94 38 15 	call	0x2a70	; 0x2a70 <__udivmodsi4>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	8e 0d       	add	r24, r14
    25f6:	9f 1d       	adc	r25, r15
    25f8:	a0 1f       	adc	r26, r16
    25fa:	b1 1f       	adc	r27, r17
    25fc:	89 83       	std	Y+1, r24	; 0x01
    25fe:	9a 83       	std	Y+2, r25	; 0x02
    2600:	ab 83       	std	Y+3, r26	; 0x03
    2602:	bc 83       	std	Y+4, r27	; 0x04
			number /= 10;
    2604:	8d 81       	ldd	r24, Y+5	; 0x05
    2606:	9e 81       	ldd	r25, Y+6	; 0x06
    2608:	af 81       	ldd	r26, Y+7	; 0x07
    260a:	b8 85       	ldd	r27, Y+8	; 0x08
    260c:	2a e0       	ldi	r18, 0x0A	; 10
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	40 e0       	ldi	r20, 0x00	; 0
    2612:	50 e0       	ldi	r21, 0x00	; 0
    2614:	bc 01       	movw	r22, r24
    2616:	cd 01       	movw	r24, r26
    2618:	0e 94 38 15 	call	0x2a70	; 0x2a70 <__udivmodsi4>
    261c:	da 01       	movw	r26, r20
    261e:	c9 01       	movw	r24, r18
    2620:	8d 83       	std	Y+5, r24	; 0x05
    2622:	9e 83       	std	Y+6, r25	; 0x06
    2624:	af 83       	std	Y+7, r26	; 0x07
    2626:	b8 87       	std	Y+8, r27	; 0x08
		LCD_sendChar('0');
	}
	else
	{
		// Reverse Number
		while (number != 0)
    2628:	8d 81       	ldd	r24, Y+5	; 0x05
    262a:	9e 81       	ldd	r25, Y+6	; 0x06
    262c:	af 81       	ldd	r26, Y+7	; 0x07
    262e:	b8 85       	ldd	r27, Y+8	; 0x08
    2630:	00 97       	sbiw	r24, 0x00	; 0
    2632:	a1 05       	cpc	r26, r1
    2634:	b1 05       	cpc	r27, r1
    2636:	11 f6       	brne	.-124    	; 0x25bc <LCD_writeNumber+0x4c>
			number /= 10;
		}
		
		do
		{
			LCD_sendChar((reversed%10)+'0');
    2638:	89 81       	ldd	r24, Y+1	; 0x01
    263a:	9a 81       	ldd	r25, Y+2	; 0x02
    263c:	ab 81       	ldd	r26, Y+3	; 0x03
    263e:	bc 81       	ldd	r27, Y+4	; 0x04
    2640:	2a e0       	ldi	r18, 0x0A	; 10
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	40 e0       	ldi	r20, 0x00	; 0
    2646:	50 e0       	ldi	r21, 0x00	; 0
    2648:	bc 01       	movw	r22, r24
    264a:	cd 01       	movw	r24, r26
    264c:	0e 94 38 15 	call	0x2a70	; 0x2a70 <__udivmodsi4>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	80 5d       	subi	r24, 0xD0	; 208
    2656:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_sendChar>
			reversed /= 10;
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	9a 81       	ldd	r25, Y+2	; 0x02
    265e:	ab 81       	ldd	r26, Y+3	; 0x03
    2660:	bc 81       	ldd	r27, Y+4	; 0x04
    2662:	2a e0       	ldi	r18, 0x0A	; 10
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	40 e0       	ldi	r20, 0x00	; 0
    2668:	50 e0       	ldi	r21, 0x00	; 0
    266a:	bc 01       	movw	r22, r24
    266c:	cd 01       	movw	r24, r26
    266e:	0e 94 38 15 	call	0x2a70	; 0x2a70 <__udivmodsi4>
    2672:	da 01       	movw	r26, r20
    2674:	c9 01       	movw	r24, r18
    2676:	89 83       	std	Y+1, r24	; 0x01
    2678:	9a 83       	std	Y+2, r25	; 0x02
    267a:	ab 83       	std	Y+3, r26	; 0x03
    267c:	bc 83       	std	Y+4, r27	; 0x04
		}while (reversed != 1);
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	9a 81       	ldd	r25, Y+2	; 0x02
    2682:	ab 81       	ldd	r26, Y+3	; 0x03
    2684:	bc 81       	ldd	r27, Y+4	; 0x04
    2686:	81 30       	cpi	r24, 0x01	; 1
    2688:	91 05       	cpc	r25, r1
    268a:	a1 05       	cpc	r26, r1
    268c:	b1 05       	cpc	r27, r1
    268e:	a1 f6       	brne	.-88     	; 0x2638 <LCD_writeNumber+0xc8>
	}
}
    2690:	28 96       	adiw	r28, 0x08	; 8
    2692:	0f b6       	in	r0, 0x3f	; 63
    2694:	f8 94       	cli
    2696:	de bf       	out	0x3e, r29	; 62
    2698:	0f be       	out	0x3f, r0	; 63
    269a:	cd bf       	out	0x3d, r28	; 61
    269c:	cf 91       	pop	r28
    269e:	df 91       	pop	r29
    26a0:	1f 91       	pop	r17
    26a2:	0f 91       	pop	r16
    26a4:	ff 90       	pop	r15
    26a6:	ef 90       	pop	r14
    26a8:	08 95       	ret

000026aa <private_writeHalfPort>:


static void private_writeHalfPort(u8 value)
{
    26aa:	df 93       	push	r29
    26ac:	cf 93       	push	r28
    26ae:	0f 92       	push	r0
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
    26b4:	89 83       	std	Y+1, r24	; 0x01
	if(GET_BIT(value,0) == 1)
    26b6:	89 81       	ldd	r24, Y+1	; 0x01
    26b8:	88 2f       	mov	r24, r24
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	81 70       	andi	r24, 0x01	; 1
    26be:	90 70       	andi	r25, 0x00	; 0
    26c0:	88 23       	and	r24, r24
    26c2:	31 f0       	breq	.+12     	; 0x26d0 <private_writeHalfPort+0x26>
	{
		DIO_setPinValue(LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_HIGH);
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	64 e0       	ldi	r22, 0x04	; 4
    26c8:	41 e0       	ldi	r20, 0x01	; 1
    26ca:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_setPinValue>
    26ce:	05 c0       	rjmp	.+10     	; 0x26da <private_writeHalfPort+0x30>
	}
	else
	{
		DIO_setPinValue(LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_LOW);
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	64 e0       	ldi	r22, 0x04	; 4
    26d4:	40 e0       	ldi	r20, 0x00	; 0
    26d6:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_setPinValue>
	}
	
	if(GET_BIT(value,1) == 1)
    26da:	89 81       	ldd	r24, Y+1	; 0x01
    26dc:	86 95       	lsr	r24
    26de:	88 2f       	mov	r24, r24
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	81 70       	andi	r24, 0x01	; 1
    26e4:	90 70       	andi	r25, 0x00	; 0
    26e6:	88 23       	and	r24, r24
    26e8:	31 f0       	breq	.+12     	; 0x26f6 <private_writeHalfPort+0x4c>
	{
		DIO_setPinValue(LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_HIGH);
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	65 e0       	ldi	r22, 0x05	; 5
    26ee:	41 e0       	ldi	r20, 0x01	; 1
    26f0:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_setPinValue>
    26f4:	05 c0       	rjmp	.+10     	; 0x2700 <private_writeHalfPort+0x56>
	}
	else
	{
		DIO_setPinValue(LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_LOW);
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	65 e0       	ldi	r22, 0x05	; 5
    26fa:	40 e0       	ldi	r20, 0x00	; 0
    26fc:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_setPinValue>
	}
	
	if(GET_BIT(value,2) == 1)
    2700:	89 81       	ldd	r24, Y+1	; 0x01
    2702:	86 95       	lsr	r24
    2704:	86 95       	lsr	r24
    2706:	88 2f       	mov	r24, r24
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	81 70       	andi	r24, 0x01	; 1
    270c:	90 70       	andi	r25, 0x00	; 0
    270e:	88 23       	and	r24, r24
    2710:	31 f0       	breq	.+12     	; 0x271e <private_writeHalfPort+0x74>
	{
		DIO_setPinValue(LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_HIGH);
    2712:	80 e0       	ldi	r24, 0x00	; 0
    2714:	66 e0       	ldi	r22, 0x06	; 6
    2716:	41 e0       	ldi	r20, 0x01	; 1
    2718:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_setPinValue>
    271c:	05 c0       	rjmp	.+10     	; 0x2728 <private_writeHalfPort+0x7e>
	}
	else
	{
		DIO_setPinValue(LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_LOW);
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	66 e0       	ldi	r22, 0x06	; 6
    2722:	40 e0       	ldi	r20, 0x00	; 0
    2724:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_setPinValue>
	}
	
	if(GET_BIT(value,3) == 1)
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	86 95       	lsr	r24
    272c:	86 95       	lsr	r24
    272e:	86 95       	lsr	r24
    2730:	88 2f       	mov	r24, r24
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	81 70       	andi	r24, 0x01	; 1
    2736:	90 70       	andi	r25, 0x00	; 0
    2738:	88 23       	and	r24, r24
    273a:	31 f0       	breq	.+12     	; 0x2748 <private_writeHalfPort+0x9e>
	{
		DIO_setPinValue(LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_HIGH);
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	67 e0       	ldi	r22, 0x07	; 7
    2740:	41 e0       	ldi	r20, 0x01	; 1
    2742:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_setPinValue>
    2746:	05 c0       	rjmp	.+10     	; 0x2752 <private_writeHalfPort+0xa8>
	}
	else
	{
		DIO_setPinValue(LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_LOW);
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	67 e0       	ldi	r22, 0x07	; 7
    274c:	40 e0       	ldi	r20, 0x00	; 0
    274e:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_setPinValue>
	}
    2752:	0f 90       	pop	r0
    2754:	cf 91       	pop	r28
    2756:	df 91       	pop	r29
    2758:	08 95       	ret

0000275a <main>:
/* HAL */
#include "LCD_interface.h"


int main(void)
{
    275a:	df 93       	push	r29
    275c:	cf 93       	push	r28
    275e:	cd b7       	in	r28, 0x3d	; 61
    2760:	de b7       	in	r29, 0x3e	; 62
    2762:	a2 97       	sbiw	r28, 0x22	; 34
    2764:	0f b6       	in	r0, 0x3f	; 63
    2766:	f8 94       	cli
    2768:	de bf       	out	0x3e, r29	; 62
    276a:	0f be       	out	0x3f, r0	; 63
    276c:	cd bf       	out	0x3d, r28	; 61
	/*DIO_setPinDirection(DIO_PORTC,DIO_PIN2,DIO_PIN_OUTPUT);
	DIO_setPinDirection(DIO_PORTC,DIO_PIN7,DIO_PIN_OUTPUT);*/
	DIO_setPinDirection(DIO_PORTD,DIO_PIN3,DIO_PIN_OUTPUT);// DC
    276e:	83 e0       	ldi	r24, 0x03	; 3
    2770:	63 e0       	ldi	r22, 0x03	; 3
    2772:	41 e0       	ldi	r20, 0x01	; 1
    2774:	0e 94 0b 07 	call	0xe16	; 0xe16 <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTA,DIO_PIN0,DIO_PIN_INPUT);
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	60 e0       	ldi	r22, 0x00	; 0
    277c:	40 e0       	ldi	r20, 0x00	; 0
    277e:	0e 94 0b 07 	call	0xe16	; 0xe16 <DIO_setPinDirection>
	LCD_init();
    2782:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_init>
	ADC_init(ADC_REFERENCE_INTRNAL);
    2786:	83 e0       	ldi	r24, 0x03	; 3
    2788:	0e 94 47 06 	call	0xc8e	; 0xc8e <ADC_init>
	
	u16 digitalVal,analogVal;
	u16 temp;
    while (1) 
    {
		ADC_getDigitalValue(ADC_CHANNEL_0,&digitalVal);
    278c:	9e 01       	movw	r18, r28
    278e:	2f 5d       	subi	r18, 0xDF	; 223
    2790:	3f 4f       	sbci	r19, 0xFF	; 255
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	b9 01       	movw	r22, r18
    2796:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ADC_getDigitalValue>
		
		analogVal = ((u32)digitalVal*2560UL)/1024;
    279a:	89 a1       	ldd	r24, Y+33	; 0x21
    279c:	9a a1       	ldd	r25, Y+34	; 0x22
    279e:	cc 01       	movw	r24, r24
    27a0:	a0 e0       	ldi	r26, 0x00	; 0
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	3a e0       	ldi	r19, 0x0A	; 10
    27a8:	40 e0       	ldi	r20, 0x00	; 0
    27aa:	50 e0       	ldi	r21, 0x00	; 0
    27ac:	bc 01       	movw	r22, r24
    27ae:	cd 01       	movw	r24, r26
    27b0:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <__mulsi3>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	07 2e       	mov	r0, r23
    27ba:	7a e0       	ldi	r23, 0x0A	; 10
    27bc:	b6 95       	lsr	r27
    27be:	a7 95       	ror	r26
    27c0:	97 95       	ror	r25
    27c2:	87 95       	ror	r24
    27c4:	7a 95       	dec	r23
    27c6:	d1 f7       	brne	.-12     	; 0x27bc <main+0x62>
    27c8:	70 2d       	mov	r23, r0
    27ca:	98 a3       	std	Y+32, r25	; 0x20
    27cc:	8f 8f       	std	Y+31, r24	; 0x1f
		
		
		// FAN control simple system
		temp = analogVal/10; //Data Sheet
    27ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27d0:	98 a1       	ldd	r25, Y+32	; 0x20
    27d2:	2a e0       	ldi	r18, 0x0A	; 10
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	b9 01       	movw	r22, r18
    27d8:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__udivmodhi4>
    27dc:	cb 01       	movw	r24, r22
    27de:	9e 8f       	std	Y+30, r25	; 0x1e
    27e0:	8d 8f       	std	Y+29, r24	; 0x1d
		
		if (temp>25)
    27e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27e6:	8a 31       	cpi	r24, 0x1A	; 26
    27e8:	91 05       	cpc	r25, r1
    27ea:	08 f4       	brcc	.+2      	; 0x27ee <main+0x94>
    27ec:	87 c0       	rjmp	.+270    	; 0x28fc <main+0x1a2>
		{
			DIO_setPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_HIGH); // AC ON
    27ee:	83 e0       	ldi	r24, 0x03	; 3
    27f0:	63 e0       	ldi	r22, 0x03	; 3
    27f2:	41 e0       	ldi	r20, 0x01	; 1
    27f4:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_setPinValue>
			LCD_writeString((u8*)"temp is >> ");
    27f8:	80 e6       	ldi	r24, 0x60	; 96
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	0e 94 07 12 	call	0x240e	; 0x240e <LCD_writeString>
			LCD_writeNumber(temp);
    2800:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2802:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2804:	cc 01       	movw	r24, r24
    2806:	a0 e0       	ldi	r26, 0x00	; 0
    2808:	b0 e0       	ldi	r27, 0x00	; 0
    280a:	bc 01       	movw	r22, r24
    280c:	cd 01       	movw	r24, r26
    280e:	0e 94 b8 12 	call	0x2570	; 0x2570 <LCD_writeNumber>
    2812:	80 e0       	ldi	r24, 0x00	; 0
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	aa e7       	ldi	r26, 0x7A	; 122
    2818:	b4 e4       	ldi	r27, 0x44	; 68
    281a:	89 8f       	std	Y+25, r24	; 0x19
    281c:	9a 8f       	std	Y+26, r25	; 0x1a
    281e:	ab 8f       	std	Y+27, r26	; 0x1b
    2820:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2822:	69 8d       	ldd	r22, Y+25	; 0x19
    2824:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2826:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2828:	9c 8d       	ldd	r25, Y+28	; 0x1c
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	4a e7       	ldi	r20, 0x7A	; 122
    2830:	55 e4       	ldi	r21, 0x45	; 69
    2832:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	8d 8b       	std	Y+21, r24	; 0x15
    283c:	9e 8b       	std	Y+22, r25	; 0x16
    283e:	af 8b       	std	Y+23, r26	; 0x17
    2840:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2842:	6d 89       	ldd	r22, Y+21	; 0x15
    2844:	7e 89       	ldd	r23, Y+22	; 0x16
    2846:	8f 89       	ldd	r24, Y+23	; 0x17
    2848:	98 8d       	ldd	r25, Y+24	; 0x18
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	40 e8       	ldi	r20, 0x80	; 128
    2850:	5f e3       	ldi	r21, 0x3F	; 63
    2852:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2856:	88 23       	and	r24, r24
    2858:	2c f4       	brge	.+10     	; 0x2864 <main+0x10a>
		__ticks = 1;
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	9c 8b       	std	Y+20, r25	; 0x14
    2860:	8b 8b       	std	Y+19, r24	; 0x13
    2862:	3f c0       	rjmp	.+126    	; 0x28e2 <main+0x188>
	else if (__tmp > 65535)
    2864:	6d 89       	ldd	r22, Y+21	; 0x15
    2866:	7e 89       	ldd	r23, Y+22	; 0x16
    2868:	8f 89       	ldd	r24, Y+23	; 0x17
    286a:	98 8d       	ldd	r25, Y+24	; 0x18
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	3f ef       	ldi	r19, 0xFF	; 255
    2870:	4f e7       	ldi	r20, 0x7F	; 127
    2872:	57 e4       	ldi	r21, 0x47	; 71
    2874:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2878:	18 16       	cp	r1, r24
    287a:	4c f5       	brge	.+82     	; 0x28ce <main+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    287c:	69 8d       	ldd	r22, Y+25	; 0x19
    287e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2880:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2882:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	40 e2       	ldi	r20, 0x20	; 32
    288a:	51 e4       	ldi	r21, 0x41	; 65
    288c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	bc 01       	movw	r22, r24
    2896:	cd 01       	movw	r24, r26
    2898:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	9c 8b       	std	Y+20, r25	; 0x14
    28a2:	8b 8b       	std	Y+19, r24	; 0x13
    28a4:	0f c0       	rjmp	.+30     	; 0x28c4 <main+0x16a>
    28a6:	80 e9       	ldi	r24, 0x90	; 144
    28a8:	91 e0       	ldi	r25, 0x01	; 1
    28aa:	9a 8b       	std	Y+18, r25	; 0x12
    28ac:	89 8b       	std	Y+17, r24	; 0x11
    28ae:	89 89       	ldd	r24, Y+17	; 0x11
    28b0:	9a 89       	ldd	r25, Y+18	; 0x12
    28b2:	01 97       	sbiw	r24, 0x01	; 1
    28b4:	f1 f7       	brne	.-4      	; 0x28b2 <main+0x158>
    28b6:	9a 8b       	std	Y+18, r25	; 0x12
    28b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ba:	8b 89       	ldd	r24, Y+19	; 0x13
    28bc:	9c 89       	ldd	r25, Y+20	; 0x14
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	9c 8b       	std	Y+20, r25	; 0x14
    28c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c4:	8b 89       	ldd	r24, Y+19	; 0x13
    28c6:	9c 89       	ldd	r25, Y+20	; 0x14
    28c8:	00 97       	sbiw	r24, 0x00	; 0
    28ca:	69 f7       	brne	.-38     	; 0x28a6 <main+0x14c>
    28cc:	14 c0       	rjmp	.+40     	; 0x28f6 <main+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ce:	6d 89       	ldd	r22, Y+21	; 0x15
    28d0:	7e 89       	ldd	r23, Y+22	; 0x16
    28d2:	8f 89       	ldd	r24, Y+23	; 0x17
    28d4:	98 8d       	ldd	r25, Y+24	; 0x18
    28d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	9c 8b       	std	Y+20, r25	; 0x14
    28e0:	8b 8b       	std	Y+19, r24	; 0x13
    28e2:	8b 89       	ldd	r24, Y+19	; 0x13
    28e4:	9c 89       	ldd	r25, Y+20	; 0x14
    28e6:	98 8b       	std	Y+16, r25	; 0x10
    28e8:	8f 87       	std	Y+15, r24	; 0x0f
    28ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ec:	98 89       	ldd	r25, Y+16	; 0x10
    28ee:	01 97       	sbiw	r24, 0x01	; 1
    28f0:	f1 f7       	brne	.-4      	; 0x28ee <main+0x194>
    28f2:	98 8b       	std	Y+16, r25	; 0x10
    28f4:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			LCD_clear();
    28f6:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_clear>
    28fa:	48 cf       	rjmp	.-368    	; 0x278c <main+0x32>
		}
		else
		{
			DIO_setPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_LOW); // AC OFF
    28fc:	83 e0       	ldi	r24, 0x03	; 3
    28fe:	63 e0       	ldi	r22, 0x03	; 3
    2900:	40 e0       	ldi	r20, 0x00	; 0
    2902:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_setPinValue>
			LCD_writeString((u8*)"temp is >> ");
    2906:	80 e6       	ldi	r24, 0x60	; 96
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	0e 94 07 12 	call	0x240e	; 0x240e <LCD_writeString>
			LCD_writeNumber(temp);
    290e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2910:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2912:	cc 01       	movw	r24, r24
    2914:	a0 e0       	ldi	r26, 0x00	; 0
    2916:	b0 e0       	ldi	r27, 0x00	; 0
    2918:	bc 01       	movw	r22, r24
    291a:	cd 01       	movw	r24, r26
    291c:	0e 94 b8 12 	call	0x2570	; 0x2570 <LCD_writeNumber>
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	aa e7       	ldi	r26, 0x7A	; 122
    2926:	b4 e4       	ldi	r27, 0x44	; 68
    2928:	8b 87       	std	Y+11, r24	; 0x0b
    292a:	9c 87       	std	Y+12, r25	; 0x0c
    292c:	ad 87       	std	Y+13, r26	; 0x0d
    292e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2930:	6b 85       	ldd	r22, Y+11	; 0x0b
    2932:	7c 85       	ldd	r23, Y+12	; 0x0c
    2934:	8d 85       	ldd	r24, Y+13	; 0x0d
    2936:	9e 85       	ldd	r25, Y+14	; 0x0e
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	4a e7       	ldi	r20, 0x7A	; 122
    293e:	55 e4       	ldi	r21, 0x45	; 69
    2940:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	8f 83       	std	Y+7, r24	; 0x07
    294a:	98 87       	std	Y+8, r25	; 0x08
    294c:	a9 87       	std	Y+9, r26	; 0x09
    294e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2950:	6f 81       	ldd	r22, Y+7	; 0x07
    2952:	78 85       	ldd	r23, Y+8	; 0x08
    2954:	89 85       	ldd	r24, Y+9	; 0x09
    2956:	9a 85       	ldd	r25, Y+10	; 0x0a
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	40 e8       	ldi	r20, 0x80	; 128
    295e:	5f e3       	ldi	r21, 0x3F	; 63
    2960:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2964:	88 23       	and	r24, r24
    2966:	2c f4       	brge	.+10     	; 0x2972 <main+0x218>
		__ticks = 1;
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	9e 83       	std	Y+6, r25	; 0x06
    296e:	8d 83       	std	Y+5, r24	; 0x05
    2970:	3f c0       	rjmp	.+126    	; 0x29f0 <main+0x296>
	else if (__tmp > 65535)
    2972:	6f 81       	ldd	r22, Y+7	; 0x07
    2974:	78 85       	ldd	r23, Y+8	; 0x08
    2976:	89 85       	ldd	r24, Y+9	; 0x09
    2978:	9a 85       	ldd	r25, Y+10	; 0x0a
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	3f ef       	ldi	r19, 0xFF	; 255
    297e:	4f e7       	ldi	r20, 0x7F	; 127
    2980:	57 e4       	ldi	r21, 0x47	; 71
    2982:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2986:	18 16       	cp	r1, r24
    2988:	4c f5       	brge	.+82     	; 0x29dc <main+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    298a:	6b 85       	ldd	r22, Y+11	; 0x0b
    298c:	7c 85       	ldd	r23, Y+12	; 0x0c
    298e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2990:	9e 85       	ldd	r25, Y+14	; 0x0e
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	40 e2       	ldi	r20, 0x20	; 32
    2998:	51 e4       	ldi	r21, 0x41	; 65
    299a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	bc 01       	movw	r22, r24
    29a4:	cd 01       	movw	r24, r26
    29a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	9e 83       	std	Y+6, r25	; 0x06
    29b0:	8d 83       	std	Y+5, r24	; 0x05
    29b2:	0f c0       	rjmp	.+30     	; 0x29d2 <main+0x278>
    29b4:	80 e9       	ldi	r24, 0x90	; 144
    29b6:	91 e0       	ldi	r25, 0x01	; 1
    29b8:	9c 83       	std	Y+4, r25	; 0x04
    29ba:	8b 83       	std	Y+3, r24	; 0x03
    29bc:	8b 81       	ldd	r24, Y+3	; 0x03
    29be:	9c 81       	ldd	r25, Y+4	; 0x04
    29c0:	01 97       	sbiw	r24, 0x01	; 1
    29c2:	f1 f7       	brne	.-4      	; 0x29c0 <main+0x266>
    29c4:	9c 83       	std	Y+4, r25	; 0x04
    29c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c8:	8d 81       	ldd	r24, Y+5	; 0x05
    29ca:	9e 81       	ldd	r25, Y+6	; 0x06
    29cc:	01 97       	sbiw	r24, 0x01	; 1
    29ce:	9e 83       	std	Y+6, r25	; 0x06
    29d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d2:	8d 81       	ldd	r24, Y+5	; 0x05
    29d4:	9e 81       	ldd	r25, Y+6	; 0x06
    29d6:	00 97       	sbiw	r24, 0x00	; 0
    29d8:	69 f7       	brne	.-38     	; 0x29b4 <main+0x25a>
    29da:	14 c0       	rjmp	.+40     	; 0x2a04 <main+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29dc:	6f 81       	ldd	r22, Y+7	; 0x07
    29de:	78 85       	ldd	r23, Y+8	; 0x08
    29e0:	89 85       	ldd	r24, Y+9	; 0x09
    29e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	9e 83       	std	Y+6, r25	; 0x06
    29ee:	8d 83       	std	Y+5, r24	; 0x05
    29f0:	8d 81       	ldd	r24, Y+5	; 0x05
    29f2:	9e 81       	ldd	r25, Y+6	; 0x06
    29f4:	9a 83       	std	Y+2, r25	; 0x02
    29f6:	89 83       	std	Y+1, r24	; 0x01
    29f8:	89 81       	ldd	r24, Y+1	; 0x01
    29fa:	9a 81       	ldd	r25, Y+2	; 0x02
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	f1 f7       	brne	.-4      	; 0x29fc <main+0x2a2>
    2a00:	9a 83       	std	Y+2, r25	; 0x02
    2a02:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			LCD_clear();
    2a04:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_clear>
    2a08:	c1 ce       	rjmp	.-638    	; 0x278c <main+0x32>

00002a0a <__mulsi3>:
    2a0a:	62 9f       	mul	r22, r18
    2a0c:	d0 01       	movw	r26, r0
    2a0e:	73 9f       	mul	r23, r19
    2a10:	f0 01       	movw	r30, r0
    2a12:	82 9f       	mul	r24, r18
    2a14:	e0 0d       	add	r30, r0
    2a16:	f1 1d       	adc	r31, r1
    2a18:	64 9f       	mul	r22, r20
    2a1a:	e0 0d       	add	r30, r0
    2a1c:	f1 1d       	adc	r31, r1
    2a1e:	92 9f       	mul	r25, r18
    2a20:	f0 0d       	add	r31, r0
    2a22:	83 9f       	mul	r24, r19
    2a24:	f0 0d       	add	r31, r0
    2a26:	74 9f       	mul	r23, r20
    2a28:	f0 0d       	add	r31, r0
    2a2a:	65 9f       	mul	r22, r21
    2a2c:	f0 0d       	add	r31, r0
    2a2e:	99 27       	eor	r25, r25
    2a30:	72 9f       	mul	r23, r18
    2a32:	b0 0d       	add	r27, r0
    2a34:	e1 1d       	adc	r30, r1
    2a36:	f9 1f       	adc	r31, r25
    2a38:	63 9f       	mul	r22, r19
    2a3a:	b0 0d       	add	r27, r0
    2a3c:	e1 1d       	adc	r30, r1
    2a3e:	f9 1f       	adc	r31, r25
    2a40:	bd 01       	movw	r22, r26
    2a42:	cf 01       	movw	r24, r30
    2a44:	11 24       	eor	r1, r1
    2a46:	08 95       	ret

00002a48 <__udivmodhi4>:
    2a48:	aa 1b       	sub	r26, r26
    2a4a:	bb 1b       	sub	r27, r27
    2a4c:	51 e1       	ldi	r21, 0x11	; 17
    2a4e:	07 c0       	rjmp	.+14     	; 0x2a5e <__udivmodhi4_ep>

00002a50 <__udivmodhi4_loop>:
    2a50:	aa 1f       	adc	r26, r26
    2a52:	bb 1f       	adc	r27, r27
    2a54:	a6 17       	cp	r26, r22
    2a56:	b7 07       	cpc	r27, r23
    2a58:	10 f0       	brcs	.+4      	; 0x2a5e <__udivmodhi4_ep>
    2a5a:	a6 1b       	sub	r26, r22
    2a5c:	b7 0b       	sbc	r27, r23

00002a5e <__udivmodhi4_ep>:
    2a5e:	88 1f       	adc	r24, r24
    2a60:	99 1f       	adc	r25, r25
    2a62:	5a 95       	dec	r21
    2a64:	a9 f7       	brne	.-22     	; 0x2a50 <__udivmodhi4_loop>
    2a66:	80 95       	com	r24
    2a68:	90 95       	com	r25
    2a6a:	bc 01       	movw	r22, r24
    2a6c:	cd 01       	movw	r24, r26
    2a6e:	08 95       	ret

00002a70 <__udivmodsi4>:
    2a70:	a1 e2       	ldi	r26, 0x21	; 33
    2a72:	1a 2e       	mov	r1, r26
    2a74:	aa 1b       	sub	r26, r26
    2a76:	bb 1b       	sub	r27, r27
    2a78:	fd 01       	movw	r30, r26
    2a7a:	0d c0       	rjmp	.+26     	; 0x2a96 <__udivmodsi4_ep>

00002a7c <__udivmodsi4_loop>:
    2a7c:	aa 1f       	adc	r26, r26
    2a7e:	bb 1f       	adc	r27, r27
    2a80:	ee 1f       	adc	r30, r30
    2a82:	ff 1f       	adc	r31, r31
    2a84:	a2 17       	cp	r26, r18
    2a86:	b3 07       	cpc	r27, r19
    2a88:	e4 07       	cpc	r30, r20
    2a8a:	f5 07       	cpc	r31, r21
    2a8c:	20 f0       	brcs	.+8      	; 0x2a96 <__udivmodsi4_ep>
    2a8e:	a2 1b       	sub	r26, r18
    2a90:	b3 0b       	sbc	r27, r19
    2a92:	e4 0b       	sbc	r30, r20
    2a94:	f5 0b       	sbc	r31, r21

00002a96 <__udivmodsi4_ep>:
    2a96:	66 1f       	adc	r22, r22
    2a98:	77 1f       	adc	r23, r23
    2a9a:	88 1f       	adc	r24, r24
    2a9c:	99 1f       	adc	r25, r25
    2a9e:	1a 94       	dec	r1
    2aa0:	69 f7       	brne	.-38     	; 0x2a7c <__udivmodsi4_loop>
    2aa2:	60 95       	com	r22
    2aa4:	70 95       	com	r23
    2aa6:	80 95       	com	r24
    2aa8:	90 95       	com	r25
    2aaa:	9b 01       	movw	r18, r22
    2aac:	ac 01       	movw	r20, r24
    2aae:	bd 01       	movw	r22, r26
    2ab0:	cf 01       	movw	r24, r30
    2ab2:	08 95       	ret

00002ab4 <__prologue_saves__>:
    2ab4:	2f 92       	push	r2
    2ab6:	3f 92       	push	r3
    2ab8:	4f 92       	push	r4
    2aba:	5f 92       	push	r5
    2abc:	6f 92       	push	r6
    2abe:	7f 92       	push	r7
    2ac0:	8f 92       	push	r8
    2ac2:	9f 92       	push	r9
    2ac4:	af 92       	push	r10
    2ac6:	bf 92       	push	r11
    2ac8:	cf 92       	push	r12
    2aca:	df 92       	push	r13
    2acc:	ef 92       	push	r14
    2ace:	ff 92       	push	r15
    2ad0:	0f 93       	push	r16
    2ad2:	1f 93       	push	r17
    2ad4:	cf 93       	push	r28
    2ad6:	df 93       	push	r29
    2ad8:	cd b7       	in	r28, 0x3d	; 61
    2ada:	de b7       	in	r29, 0x3e	; 62
    2adc:	ca 1b       	sub	r28, r26
    2ade:	db 0b       	sbc	r29, r27
    2ae0:	0f b6       	in	r0, 0x3f	; 63
    2ae2:	f8 94       	cli
    2ae4:	de bf       	out	0x3e, r29	; 62
    2ae6:	0f be       	out	0x3f, r0	; 63
    2ae8:	cd bf       	out	0x3d, r28	; 61
    2aea:	09 94       	ijmp

00002aec <__epilogue_restores__>:
    2aec:	2a 88       	ldd	r2, Y+18	; 0x12
    2aee:	39 88       	ldd	r3, Y+17	; 0x11
    2af0:	48 88       	ldd	r4, Y+16	; 0x10
    2af2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2af4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2af6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2af8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2afa:	9b 84       	ldd	r9, Y+11	; 0x0b
    2afc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2afe:	b9 84       	ldd	r11, Y+9	; 0x09
    2b00:	c8 84       	ldd	r12, Y+8	; 0x08
    2b02:	df 80       	ldd	r13, Y+7	; 0x07
    2b04:	ee 80       	ldd	r14, Y+6	; 0x06
    2b06:	fd 80       	ldd	r15, Y+5	; 0x05
    2b08:	0c 81       	ldd	r16, Y+4	; 0x04
    2b0a:	1b 81       	ldd	r17, Y+3	; 0x03
    2b0c:	aa 81       	ldd	r26, Y+2	; 0x02
    2b0e:	b9 81       	ldd	r27, Y+1	; 0x01
    2b10:	ce 0f       	add	r28, r30
    2b12:	d1 1d       	adc	r29, r1
    2b14:	0f b6       	in	r0, 0x3f	; 63
    2b16:	f8 94       	cli
    2b18:	de bf       	out	0x3e, r29	; 62
    2b1a:	0f be       	out	0x3f, r0	; 63
    2b1c:	cd bf       	out	0x3d, r28	; 61
    2b1e:	ed 01       	movw	r28, r26
    2b20:	08 95       	ret

00002b22 <_exit>:
    2b22:	f8 94       	cli

00002b24 <__stop_program>:
    2b24:	ff cf       	rjmp	.-2      	; 0x2b24 <__stop_program>
